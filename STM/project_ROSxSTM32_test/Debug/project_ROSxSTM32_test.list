
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e620  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ebe4  0800ebe4  0001ebe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ebec  0800ebec  0001ebec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ebf4  0800ebf4  0001ebf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  0800ebf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e08  24000218  0800ee10  00020218  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001020  0800ee10  00021020  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002133d  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036be  00000000  00000000  00041583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a8  00000000  00000000  00044c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001398  00000000  00000000  000460f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035170  00000000  00000000  00047488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b5fc  00000000  00000000  0007c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015365f  00000000  00000000  00097bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eb253  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c40  00000000  00000000  001eb2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000218 	.word	0x24000218
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e8d8 	.word	0x0800e8d8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400021c 	.word	0x2400021c
 800030c:	0800e8d8 	.word	0x0800e8d8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	4aa9      	ldr	r2, [pc, #676]	; (8000930 <pidCtrl+0x2b0>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2168      	movs	r1, #104	; 0x68
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	4413      	add	r3, r2
 8000694:	3318      	adds	r3, #24
 8000696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000908 <pidCtrl+0x288>
 80006a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006aa:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000910 <pidCtrl+0x290>
 80006ae:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b2:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8000918 <pidCtrl+0x298>
 80006b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ba:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000920 <pidCtrl+0x2a0>
 80006be:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c2:	4a9b      	ldr	r2, [pc, #620]	; (8000930 <pidCtrl+0x2b0>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2168      	movs	r1, #104	; 0x68
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	3328      	adds	r3, #40	; 0x28
 80006d0:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d4:	4a96      	ldr	r2, [pc, #600]	; (8000930 <pidCtrl+0x2b0>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2168      	movs	r1, #104	; 0x68
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	3320      	adds	r3, #32
 80006e2:	ed93 6b00 	vldr	d6, [r3]
 80006e6:	4a92      	ldr	r2, [pc, #584]	; (8000930 <pidCtrl+0x2b0>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2168      	movs	r1, #104	; 0x68
 80006ec:	fb01 f303 	mul.w	r3, r1, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	4a8c      	ldr	r2, [pc, #560]	; (8000930 <pidCtrl+0x2b0>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2168      	movs	r1, #104	; 0x68
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	4413      	add	r3, r2
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 800070e:	4a88      	ldr	r2, [pc, #544]	; (8000930 <pidCtrl+0x2b0>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2168      	movs	r1, #104	; 0x68
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4413      	add	r3, r2
 800071a:	ed93 6b00 	vldr	d6, [r3]
 800071e:	4a84      	ldr	r2, [pc, #528]	; (8000930 <pidCtrl+0x2b0>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2168      	movs	r1, #104	; 0x68
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	4413      	add	r3, r2
 800072a:	3330      	adds	r3, #48	; 0x30
 800072c:	ed93 7b00 	vldr	d7, [r3]
 8000730:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000734:	4a7e      	ldr	r2, [pc, #504]	; (8000930 <pidCtrl+0x2b0>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2168      	movs	r1, #104	; 0x68
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	4413      	add	r3, r2
 8000740:	3348      	adds	r3, #72	; 0x48
 8000742:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000746:	4a7a      	ldr	r2, [pc, #488]	; (8000930 <pidCtrl+0x2b0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2168      	movs	r1, #104	; 0x68
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	3350      	adds	r3, #80	; 0x50
 8000754:	ed93 6b00 	vldr	d6, [r3]
 8000758:	4a75      	ldr	r2, [pc, #468]	; (8000930 <pidCtrl+0x2b0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2168      	movs	r1, #104	; 0x68
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	ed93 5b00 	vldr	d5, [r3]
 800076a:	4a71      	ldr	r2, [pc, #452]	; (8000930 <pidCtrl+0x2b0>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2168      	movs	r1, #104	; 0x68
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	4413      	add	r3, r2
 8000776:	3338      	adds	r3, #56	; 0x38
 8000778:	ed93 7b00 	vldr	d7, [r3]
 800077c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000780:	ed9f 4b67 	vldr	d4, [pc, #412]	; 8000920 <pidCtrl+0x2a0>
 8000784:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800078c:	4a68      	ldr	r2, [pc, #416]	; (8000930 <pidCtrl+0x2b0>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2168      	movs	r1, #104	; 0x68
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	3350      	adds	r3, #80	; 0x50
 800079a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 800079e:	4a64      	ldr	r2, [pc, #400]	; (8000930 <pidCtrl+0x2b0>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2168      	movs	r1, #104	; 0x68
 80007a4:	fb01 f303 	mul.w	r3, r1, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	3310      	adds	r3, #16
 80007ac:	ed93 6b00 	vldr	d6, [r3]
 80007b0:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <pidCtrl+0x2b0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2168      	movs	r1, #104	; 0x68
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	3330      	adds	r3, #48	; 0x30
 80007be:	ed93 5b00 	vldr	d5, [r3]
 80007c2:	4a5b      	ldr	r2, [pc, #364]	; (8000930 <pidCtrl+0x2b0>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2168      	movs	r1, #104	; 0x68
 80007c8:	fb01 f303 	mul.w	r3, r1, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	3338      	adds	r3, #56	; 0x38
 80007d0:	ed93 7b00 	vldr	d7, [r3]
 80007d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007dc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000920 <pidCtrl+0x2a0>
 80007e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <pidCtrl+0x2b0>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	fb01 f303 	mul.w	r3, r1, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	3358      	adds	r3, #88	; 0x58
 80007f2:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 80007f6:	4a4e      	ldr	r2, [pc, #312]	; (8000930 <pidCtrl+0x2b0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2168      	movs	r1, #104	; 0x68
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	4413      	add	r3, r2
 8000802:	3350      	adds	r3, #80	; 0x50
 8000804:	ed93 7b00 	vldr	d7, [r3]
 8000808:	eeb0 7bc7 	vabs.f64	d7, d7
 800080c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000810:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	dd1d      	ble.n	8000856 <pidCtrl+0x1d6>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800081a:	4a45      	ldr	r2, [pc, #276]	; (8000930 <pidCtrl+0x2b0>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2168      	movs	r1, #104	; 0x68
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	3350      	adds	r3, #80	; 0x50
 8000828:	ed93 7b00 	vldr	d7, [r3]
 800082c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	db03      	blt.n	800083e <pidCtrl+0x1be>
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <pidCtrl+0x2b4>)
 800083c:	e002      	b.n	8000844 <pidCtrl+0x1c4>
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <pidCtrl+0x2b8>)
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <pidCtrl+0x2b0>)
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2468      	movs	r4, #104	; 0x68
 800084a:	fb04 f101 	mul.w	r1, r4, r1
 800084e:	4401      	add	r1, r0
 8000850:	3150      	adds	r1, #80	; 0x50
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000856:	4a36      	ldr	r2, [pc, #216]	; (8000930 <pidCtrl+0x2b0>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2168      	movs	r1, #104	; 0x68
 800085c:	fb01 f303 	mul.w	r3, r1, r3
 8000860:	4413      	add	r3, r2
 8000862:	3348      	adds	r3, #72	; 0x48
 8000864:	ed93 6b00 	vldr	d6, [r3]
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <pidCtrl+0x2b0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2168      	movs	r1, #104	; 0x68
 800086e:	fb01 f303 	mul.w	r3, r1, r3
 8000872:	4413      	add	r3, r2
 8000874:	3350      	adds	r3, #80	; 0x50
 8000876:	ed93 7b00 	vldr	d7, [r3]
 800087a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <pidCtrl+0x2b0>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2168      	movs	r1, #104	; 0x68
 8000884:	fb01 f303 	mul.w	r3, r1, r3
 8000888:	4413      	add	r3, r2
 800088a:	3358      	adds	r3, #88	; 0x58
 800088c:	ed93 7b00 	vldr	d7, [r3]
 8000890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <pidCtrl+0x2b0>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2168      	movs	r1, #104	; 0x68
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	4413      	add	r3, r2
 80008a0:	3340      	adds	r3, #64	; 0x40
 80008a2:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <pidCtrl+0x2b0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2168      	movs	r1, #104	; 0x68
 80008ac:	fb01 f303 	mul.w	r3, r1, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <pidCtrl+0x2b0>)
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2468      	movs	r4, #104	; 0x68
 80008be:	fb04 f101 	mul.w	r1, r4, r1
 80008c2:	4401      	add	r1, r0
 80008c4:	3138      	adds	r1, #56	; 0x38
 80008c6:	e9c1 2300 	strd	r2, r3, [r1]

	Kpid[i].pulse = fabs(Kpid[i].u) * 3200;
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <pidCtrl+0x2b0>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2168      	movs	r1, #104	; 0x68
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	3340      	adds	r3, #64	; 0x40
 80008d8:	ed93 7b00 	vldr	d7, [r3]
 80008dc:	eeb0 7bc7 	vabs.f64	d7, d7
 80008e0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000928 <pidCtrl+0x2a8>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <pidCtrl+0x2b0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2168      	movs	r1, #104	; 0x68
 80008ee:	fb01 f303 	mul.w	r3, r1, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	3360      	adds	r3, #96	; 0x60
 80008f6:	ed83 7b00 	vstr	d7, [r3]
//	if(Kpid[i].pulse > 3200)	Kpid[i].pulse = 3200;
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc90      	pop	{r4, r7}
 8000902:	4770      	bx	lr
 8000904:	f3af 8000 	nop.w
 8000908:	54cadf99 	.word	0x54cadf99
 800090c:	400921fb 	.word	0x400921fb
 8000910:	b6ae7d56 	.word	0xb6ae7d56
 8000914:	3fb97f62 	.word	0x3fb97f62
 8000918:	cccccccd 	.word	0xcccccccd
 800091c:	40e4cccc 	.word	0x40e4cccc
 8000920:	00000000 	.word	0x00000000
 8000924:	408f4000 	.word	0x408f4000
 8000928:	00000000 	.word	0x00000000
 800092c:	40a90000 	.word	0x40a90000
 8000930:	24000000 	.word	0x24000000
 8000934:	3ff00000 	.word	0x3ff00000
 8000938:	bff00000 	.word	0xbff00000

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f004 f8f0 	bl	8004b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f862 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 fc68 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 800094c:	f000 fc3e 	bl	80011cc <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000950:	f000 fbf0 	bl	8001134 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000954:	f000 f91a 	bl	8000b8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000958:	f000 f96e 	bl	8000c38 <MX_TIM4_Init>
  MX_TIM5_Init();
 800095c:	f000 f9c2 	bl	8000ce4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000960:	f000 fa0e 	bl	8000d80 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000964:	f000 faa8 	bl	8000eb8 <MX_TIM15_Init>
  MX_TIM23_Init();
 8000968:	f000 fb38 	bl	8000fdc <MX_TIM23_Init>
  MX_TIM24_Init();
 800096c:	f000 fb8c 	bl	8001088 <MX_TIM24_Init>
  MX_TIM2_Init();
 8000970:	f000 f8be 	bl	8000af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <main+0xb0>)
 8000976:	f00a f869 	bl	800aa4c <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <main+0xb4>)
 800097c:	f00a f866 	bl	800aa4c <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000980:	2108      	movs	r1, #8
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0xb8>)
 8000984:	f00a f940 	bl	800ac08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000988:	210c      	movs	r1, #12
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <main+0xb8>)
 800098c:	f00a f93c 	bl	800ac08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <main+0xbc>)
 8000994:	f00a f938 	bl	800ac08 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <main+0xbc>)
 800099c:	f00a f934 	bl	800ac08 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <main+0xc0>)
 80009a4:	f00a faf2 	bl	800af8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0xc0>)
 80009ac:	f00a faee 	bl	800af8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xc4>)
 80009b4:	f00a faea 	bl	800af8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <main+0xc4>)
 80009bc:	f00a fae6 	bl	800af8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <main+0xc8>)
 80009c4:	f00a fae2 	bl	800af8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0xc8>)
 80009cc:	f00a fade 	bl	800af8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <main+0xcc>)
 80009d4:	f00a fada 	bl	800af8c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 80009d8:	2104      	movs	r1, #4
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <main+0xcc>)
 80009dc:	f00a fad6 	bl	800af8c <HAL_TIM_Encoder_Start>


    setup();
 80009e0:	f002 fbd8 	bl	8003194 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 80009e4:	f002 fbec 	bl	80031c0 <loop>
 80009e8:	e7fc      	b.n	80009e4 <main+0xa8>
 80009ea:	bf00      	nop
 80009ec:	24000318 	.word	0x24000318
 80009f0:	24000234 	.word	0x24000234
 80009f4:	24000364 	.word	0x24000364
 80009f8:	240003b0 	.word	0x240003b0
 80009fc:	24000448 	.word	0x24000448
 8000a00:	24000280 	.word	0x24000280
 8000a04:	240002cc 	.word	0x240002cc
 8000a08:	240003fc 	.word	0x240003fc

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00d fdd2 	bl	800e5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d fdcc 	bl	800e5c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f007 fd25 	bl	800847c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <SystemClock_Config+0xe0>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <SystemClock_Config+0xe0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <SystemClock_Config+0xe0>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a52:	bf00      	nop
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xe0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a60:	d1f8      	bne.n	8000a54 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000a7a:	2315      	movs	r3, #21
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fd28 	bl	80084f0 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 fc79 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f8ba 	bl	8008c4c <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000ade:	f000 fc5d 	bl	800139c <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3770      	adds	r7, #112	; 0x70
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024800 	.word	0x58024800

08000af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b18:	223f      	movs	r2, #63	; 0x3f
 8000b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b24:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b38:	f009 ff30 	bl	800a99c <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b42:	f000 fc2b 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b54:	f00a fcdc 	bl	800b510 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b5e:	f000 fc1d 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b70:	f00b fa2e 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b7a:	f000 fc0f 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000234 	.word	0x24000234

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00d fd12 	bl	800e5c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bfc:	f00a f920 	bl	800ae40 <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f000 fbc9 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000c18:	f00b f9da 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f000 fbbb 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000280 	.word	0x24000280
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	; 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00d fcbc 	bl	800e5c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_TIM4_Init+0xa8>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000ca8:	f00a f8ca 	bl	800ae40 <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f000 fb73 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000cc4:	f00b f984 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f000 fb65 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240002cc 	.word	0x240002cc
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <MX_TIM5_Init+0x98>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d0a:	223f      	movs	r2, #63	; 0x3f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d2a:	f009 fe37 	bl	800a99c <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 fb32 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d46:	f00a fbe3 	bl	800b510 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d50:	f000 fb24 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d62:	f00b f935 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fb16 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000318 	.word	0x24000318
 8000d7c:	40000c00 	.word	0x40000c00

08000d80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b098      	sub	sp, #96	; 0x60
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2234      	movs	r2, #52	; 0x34
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00d fc09 	bl	800e5c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000db4:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <MX_TIM8_Init+0x134>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000dca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dde:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000de0:	f009 feba 	bl	800ab58 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 fad7 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e02:	f00b f8e5 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 fac6 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e30:	2208      	movs	r2, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e36:	f00a fa57 	bl	800b2e8 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e40:	f000 faac 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e4e:	f00a fa4b 	bl	800b2e8 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f000 faa0 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e92:	f00b f939 	bl	800c108 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000e9c:	f000 fa7e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000ea2:	f003 f957 	bl	8004154 <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3760      	adds	r7, #96	; 0x60
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	24000364 	.word	0x24000364
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b098      	sub	sp, #96	; 0x60
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2234      	movs	r2, #52	; 0x34
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00d fb6d 	bl	800e5c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000eec:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_TIM15_Init+0x120>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000efe:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f16:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f18:	f009 fe1e 	bl	800ab58 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fa3b 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f32:	4619      	mov	r1, r3
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f36:	f00b f84b 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 fa2c 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f6a:	f00a f9bd 	bl	800b2e8 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f74:	f000 fa12 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f82:	f00a f9b1 	bl	800b2e8 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f8c:	f000 fa06 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fb8:	f00b f8a6 	bl	800c108 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fc2:	f000 f9eb 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fc8:	f003 f8c4 	bl	8004154 <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3760      	adds	r7, #96	; 0x60
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	240003b0 	.word	0x240003b0
 8000fd8:	40014000 	.word	0x40014000

08000fdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d faea 	bl	800e5c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_TIM23_Init+0xa4>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_TIM23_Init+0xa8>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM23_Init+0xa4>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM23_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001020:	2303      	movs	r3, #3
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM23_Init+0xa4>)
 800104c:	f009 fef8 	bl	800ae40 <HAL_TIM_Encoder_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001056:	f000 f9a1 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001068:	f00a ffb2 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001072:	f000 f993 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240003fc 	.word	0x240003fc
 8001084:	4000e000 	.word	0x4000e000

08001088 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	; 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00d fa94 	bl	800e5c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_TIM24_Init+0xa4>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_TIM24_Init+0xa8>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_TIM24_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010cc:	2303      	movs	r3, #3
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_TIM24_Init+0xa4>)
 80010f8:	f009 fea2 	bl	800ae40 <HAL_TIM_Encoder_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001102:	f000 f94b 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM24_Init+0xa4>)
 8001114:	f00a ff5c 	bl	800bfd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800111e:	f000 f93d 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000448 	.word	0x24000448
 8001130:	4000e400 	.word	0x4000e400

08001134 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <MX_USART10_UART_Init+0x94>)
 800113c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800117e:	f00b f881 	bl	800c284 <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 f908 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001190:	f00d f8fa 	bl	800e388 <HAL_UARTEx_SetTxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800119a:	f000 f8ff 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011a2:	f00d f92f 	bl	800e404 <HAL_UARTEx_SetRxFifoThreshold>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80011ac:	f000 f8f6 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011b2:	f00d f8b0 	bl	800e316 <HAL_UARTEx_DisableFifoMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 f8ee 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000494 	.word	0x24000494
 80011c8:	40011c00 	.word	0x40011c00

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA_Init+0x4c>)
 80011d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DMA_Init+0x4c>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_DMA_Init+0x4c>)
 80011e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	200b      	movs	r0, #11
 80011f6:	f003 fe26 	bl	8004e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011fa:	200b      	movs	r0, #11
 80011fc:	f003 fe3d 	bl	8004e7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200c      	movs	r0, #12
 8001206:	f003 fe1e 	bl	8004e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800120a:	200c      	movs	r0, #12
 800120c:	f003 fe35 	bl	8004e7a <HAL_NVIC_EnableIRQ>

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <MX_GPIO_Init+0x170>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a54      	ldr	r2, [pc, #336]	; (800138c <MX_GPIO_Init+0x170>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <MX_GPIO_Init+0x170>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_GPIO_Init+0x170>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a4d      	ldr	r2, [pc, #308]	; (800138c <MX_GPIO_Init+0x170>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <MX_GPIO_Init+0x170>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <MX_GPIO_Init+0x170>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <MX_GPIO_Init+0x170>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <MX_GPIO_Init+0x170>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <MX_GPIO_Init+0x170>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a3e      	ldr	r2, [pc, #248]	; (800138c <MX_GPIO_Init+0x170>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <MX_GPIO_Init+0x170>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a36      	ldr	r2, [pc, #216]	; (800138c <MX_GPIO_Init+0x170>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x170>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_GPIO_Init+0x170>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001304:	2200      	movs	r2, #0
 8001306:	f249 51c0 	movw	r1, #38336	; 0x95c0
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_GPIO_Init+0x174>)
 800130c:	f007 f878 	bl	8008400 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <MX_GPIO_Init+0x178>)
 8001318:	f007 f872 	bl	8008400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800131c:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001320:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <MX_GPIO_Init+0x174>)
 8001336:	f006 fdb9 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001340:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0x17c>)
 8001352:	f006 fdab 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001356:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_GPIO_Init+0x178>)
 8001370:	f006 fd9c 	bl	8007eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2028      	movs	r0, #40	; 0x28
 800137a:	f003 fd64 	bl	8004e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f003 fd7b 	bl	8004e7a <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	58021000 	.word	0x58021000
 8001394:	58020400 	.word	0x58020400
 8001398:	58020800 	.word	0x58020800

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>

080013a6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <_ZN3ros3MsgC1Ev+0x1c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	0800eb94 	.word	0x0800eb94

080013e8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
      data()
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffe8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffcf 	bl	80013a6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	0800eb7c 	.word	0x0800eb7c

08001418 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	b2ca      	uxtb	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0a19      	lsrs	r1, r3, #8
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0c19      	lsrs	r1, r3, #16
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3302      	adds	r3, #2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b2ca      	uxtb	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	0e19      	lsrs	r1, r3, #24
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3303      	adds	r3, #3
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0a19      	lsrs	r1, r3, #8
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	0c19      	lsrs	r1, r3, #16
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3302      	adds	r3, #2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	0e19      	lsrs	r1, r3, #24
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3303      	adds	r3, #3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3304      	adds	r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80014ba:	68fb      	ldr	r3, [r7, #12]
    }
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	440b      	add	r3, r1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3302      	adds	r3, #2
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3303      	adds	r3, #3
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	440b      	add	r3, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3304      	adds	r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	440b      	add	r3, r1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3302      	adds	r3, #2
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	440b      	add	r3, r1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3303      	adds	r3, #3
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	440b      	add	r3, r1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3304      	adds	r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
     return offset;
 8001582:	68fb      	ldr	r3, [r7, #12]
    }
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	0800e8f0 	.word	0x0800e8f0

080015ac <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	0800e904 	.word	0x0800e904

080015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fef8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	809a      	strh	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a06      	ldr	r2, [pc, #24]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015f4:	611a      	str	r2, [r3, #16]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
    {
    }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	0800eb64 	.word	0x0800eb64
 800160c:	0800e928 	.word	0x0800e928

08001610 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8899      	ldrh	r1, [r3, #4]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	b2ca      	uxtb	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b299      	uxth	r1, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3302      	adds	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fe60 	bl	8000310 <strlen>
 8001650:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	69b9      	ldr	r1, [r7, #24]
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fdba 	bl	80031d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3304      	adds	r3, #4
 8001664:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	18d0      	adds	r0, r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4619      	mov	r1, r3
 8001674:	f00c ff98 	bl	800e5a8 <memcpy>
      offset += length_topic_name;
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4413      	add	r3, r2
 800167e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fe43 	bl	8000310 <strlen>
 800168a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	6979      	ldr	r1, [r7, #20]
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fd9d 	bl	80031d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	18d0      	adds	r0, r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f00c ff7b 	bl	800e5a8 <memcpy>
      offset += length_message_type;
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fe26 	bl	8000310 <strlen>
 80016c4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	6939      	ldr	r1, [r7, #16]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fd80 	bl	80031d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3304      	adds	r3, #4
 80016d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	18d0      	adds	r0, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f00c ff5e 	bl	800e5a8 <memcpy>
      offset += length_md5sum;
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4413      	add	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80016fa:	68f9      	ldr	r1, [r7, #12]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0a19      	lsrs	r1, r3, #8
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	b2ca      	uxtb	r2, r1
 8001714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0c19      	lsrs	r1, r3, #16
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3302      	adds	r3, #2
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	0e19      	lsrs	r1, r3, #24
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3303      	adds	r3, #3
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	4413      	add	r3, r2
 8001732:	b2ca      	uxtb	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	61fb      	str	r3, [r7, #28]
      return offset;
 800173c:	69fb      	ldr	r3, [r7, #28]
    }
 800173e:	4618      	mov	r0, r3
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001746:	b580      	push	{r7, lr}
 8001748:	b08a      	sub	sp, #40	; 0x28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	b21a      	sxth	r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	3301      	adds	r3, #1
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	440b      	add	r3, r1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b21b      	sxth	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3302      	adds	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	441a      	add	r2, r3
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fd3c 	bl	8003210 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	3304      	adds	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4413      	add	r3, r2
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	441a      	add	r2, r3
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	440b      	add	r3, r1
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e7ec      	b.n	80017a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	3b01      	subs	r3, #1
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	3b01      	subs	r3, #1
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	441a      	add	r2, r3
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fd09 	bl	8003210 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	3304      	adds	r3, #4
 8001802:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	429a      	cmp	r2, r3
 8001812:	d20c      	bcs.n	800182e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	441a      	add	r2, r3
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	3b01      	subs	r3, #1
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	440b      	add	r3, r1
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	3301      	adds	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	e7ec      	b.n	8001808 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4413      	add	r3, r2
 8001834:	3b01      	subs	r3, #1
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3b01      	subs	r3, #1
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	441a      	add	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fcd6 	bl	8003210 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3304      	adds	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	441a      	add	r2, r3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3b01      	subs	r3, #1
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	440b      	add	r3, r1
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e7ec      	b.n	800186e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	3b01      	subs	r3, #1
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	441a      	add	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	440a      	add	r2, r1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	3301      	adds	r3, #1
 80018d0:	6839      	ldr	r1, [r7, #0]
 80018d2:	440b      	add	r3, r1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4313      	orrs	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	3302      	adds	r3, #2
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440b      	add	r3, r1
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3303      	adds	r3, #3
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	061b      	lsls	r3, r3, #24
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	3304      	adds	r3, #4
 800190a:	61bb      	str	r3, [r7, #24]
     return offset;
 800190c:	69bb      	ldr	r3, [r7, #24]
    }
 800190e:	4618      	mov	r0, r3
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	0800e92c 	.word	0x0800e92c

08001934 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	0800e948 	.word	0x0800e948

08001950 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd34 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	711a      	strb	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001970:	609a      	str	r2, [r3, #8]
    {
    }
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	0800eb4c 	.word	0x0800eb4c
 8001980:	0800e928 	.word	0x0800e928

08001984 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	7912      	ldrb	r2, [r2, #4]
 800199c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fcb1 	bl	8000310 <strlen>
 80019ae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fc0b 	bl	80031d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	18d0      	adds	r0, r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f00c fde9 	bl	800e5a8 <memcpy>
      offset += length_msg;
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80019de:	68fb      	ldr	r3, [r7, #12]
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fbfb 	bl	8003210 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d20c      	bcs.n	8001a4a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	441a      	add	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e7ec      	b.n	8001a24 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b01      	subs	r3, #1
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
     return offset;
 8001a6e:	693b      	ldr	r3, [r7, #16]
    }
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	0800e96c 	.word	0x0800e96c

08001a94 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	0800e980 	.word	0x0800e980

08001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc84 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	0800eb34 	.word	0x0800eb34

08001af8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0a19      	lsrs	r1, r3, #8
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0c19      	lsrs	r1, r3, #16
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3302      	adds	r3, #2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0e19      	lsrs	r1, r3, #24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3303      	adds	r3, #3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d22b      	bcs.n	8001bb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	b2ca      	uxtb	r2, r1
 8001b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	0a19      	lsrs	r1, r3, #8
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	3301      	adds	r3, #1
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	0c19      	lsrs	r1, r3, #16
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3302      	adds	r3, #2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	0e19      	lsrs	r1, r3, #24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3304      	adds	r3, #4
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	e7ce      	b.n	8001b54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	0a19      	lsrs	r1, r3, #8
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	0c19      	lsrs	r1, r3, #16
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3302      	adds	r3, #2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	0e19      	lsrs	r1, r3, #24
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d22b      	bcs.n	8001c66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	0a19      	lsrs	r1, r3, #8
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	3301      	adds	r3, #1
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0c19      	lsrs	r1, r3, #16
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3302      	adds	r3, #2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	0e19      	lsrs	r1, r3, #24
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3303      	adds	r3, #3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e7ce      	b.n	8001c04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69d9      	ldr	r1, [r3, #28]
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	0a19      	lsrs	r1, r3, #8
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	0c19      	lsrs	r1, r3, #16
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3302      	adds	r3, #2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	0e19      	lsrs	r1, r3, #24
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	3304      	adds	r3, #4
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d228      	bcs.n	8001d10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fb20 	bl	8000310 <strlen>
 8001cd0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fa7a 	bl	80031d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	18d0      	adds	r0, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f00c fc54 	bl	800e5a8 <memcpy>
      offset += length_stringsi;
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4413      	add	r3, r2
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e7d1      	b.n	8001cb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d12:	4618      	mov	r0, r3
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b08e      	sub	sp, #56	; 0x38
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	3301      	adds	r3, #1
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	3302      	adds	r3, #2
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	3303      	adds	r3, #3
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	6a3a      	ldr	r2, [r7, #32]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	6a3a      	ldr	r2, [r7, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d90a      	bls.n	8001d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f00c fc26 	bl	800e5d4 <realloc>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d236      	bcs.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	440a      	add	r2, r1
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	3301      	adds	r3, #1
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	440b      	add	r3, r1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	3302      	adds	r3, #2
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	440b      	add	r3, r1
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	3303      	adds	r3, #3
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	440b      	add	r3, r1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	3304      	adds	r3, #4
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0e:	e7c3      	b.n	8001d98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	3302      	adds	r3, #2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	3303      	adds	r3, #3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	3304      	adds	r3, #4
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d90a      	bls.n	8001e76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f00c fbb2 	bl	800e5d4 <realloc>
 8001e70:	4602      	mov	r2, r0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d236      	bcs.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	440a      	add	r2, r1
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	440b      	add	r3, r1
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	3303      	adds	r3, #3
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	440b      	add	r3, r1
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	3304      	adds	r3, #4
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	3214      	adds	r2, #20
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	e7c3      	b.n	8001e80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	3301      	adds	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	3302      	adds	r3, #2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	3303      	adds	r3, #3
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d90a      	bls.n	8001f5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f00c fb3e 	bl	800e5d4 <realloc>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d23f      	bcs.n	8001ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	441a      	add	r2, r3
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f946 	bl	8003210 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	3304      	adds	r3, #4
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d20c      	bcs.n	8001fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	441a      	add	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3301      	adds	r3, #1
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	e7ec      	b.n	8001f8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	3220      	adds	r2, #32
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	3301      	adds	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff0:	e7ba      	b.n	8001f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3738      	adds	r7, #56	; 0x38
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	0800ea88 	.word	0x0800ea88

08002018 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	0800e9a4 	.word	0x0800e9a4

08002034 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68d8      	ldr	r0, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6891      	ldr	r1, [r2, #8]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4798      	blx	r3
 8002080:	4603      	mov	r3, r0
  };
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
  }
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d068      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d061      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a3d      	ldr	r2, [pc, #244]	; (80021c8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d05a      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d053      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d04c      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a36      	ldr	r2, [pc, #216]	; (80021d4 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d045      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d03e      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a31      	ldr	r2, [pc, #196]	; (80021dc <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d037      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d030      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d029      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d022      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d01b      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d014      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d006      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d109      	bne.n	80021a0 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800219a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219e:	e008      	b.n	80021b2 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80021ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40020010 	.word	0x40020010
 80021c4:	40020028 	.word	0x40020028
 80021c8:	40020040 	.word	0x40020040
 80021cc:	40020058 	.word	0x40020058
 80021d0:	40020070 	.word	0x40020070
 80021d4:	40020088 	.word	0x40020088
 80021d8:	400200a0 	.word	0x400200a0
 80021dc:	400200b8 	.word	0x400200b8
 80021e0:	40020410 	.word	0x40020410
 80021e4:	40020428 	.word	0x40020428
 80021e8:	40020440 	.word	0x40020440
 80021ec:	40020458 	.word	0x40020458
 80021f0:	40020470 	.word	0x40020470
 80021f4:	40020488 	.word	0x40020488
 80021f8:	400204a0 	.word	0x400204a0
 80021fc:	400204b8 	.word	0x400204b8

08002200 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <_ZN13STM32HardwareC1Ev+0x34>)
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	24000494 	.word	0x24000494

08002238 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f804 	bl	800224e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002262:	4619      	mov	r1, r3
 8002264:	f00a f92c 	bl	800c4c0 <HAL_UART_Receive_DMA>
    }
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff0d 	bl	80020a4 <_ZN13STM32Hardware10getRdmaIndEv>
 800228a:	4603      	mov	r3, r0
 800228c:	429c      	cmp	r4, r3
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022a0:	1c59      	adds	r1, r3, #1
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80022c0:	68fb      	ldr	r3, [r7, #12]
    }
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
	...

080022cc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d108      	bne.n	80022f2 <_ZN13STM32Hardware5flushEv+0x26>
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <_ZN13STM32Hardware5flushEv+0xb4>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <_ZN13STM32Hardware5flushEv+0x26>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <_ZN13STM32Hardware5flushEv+0x28>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03f      	beq.n	8002378 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <_ZN13STM32Hardware5flushEv+0xb4>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800230a:	429a      	cmp	r2, r3
 800230c:	d031      	beq.n	8002372 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800231a:	429a      	cmp	r2, r3
 800231c:	d20a      	bcs.n	8002334 <_ZN13STM32Hardware5flushEv+0x68>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800232c:	b29b      	uxth	r3, r3
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	b29b      	uxth	r3, r3
 8002332:	e006      	b.n	8002342 <_ZN13STM32Hardware5flushEv+0x76>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800233a:	b29b      	uxth	r3, r3
 800233c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002340:	b29b      	uxth	r3, r3
 8002342:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800234e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	89fa      	ldrh	r2, [r7, #14]
 8002358:	4619      	mov	r1, r3
 800235a:	f00a f81f 	bl	800c39c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	4413      	add	r3, r2
 8002368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002372:	4b03      	ldr	r3, [pc, #12]	; (8002380 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
      }
    }
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	24000614 	.word	0x24000614

08002384 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800239a:	bfa8      	it	ge
 800239c:	f44f 7300 	movge.w	r3, #512	; 0x200
 80023a0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80023a8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	bf28      	it	cs
 80023b2:	4613      	movcs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80023bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f00c f8ed 	bl	800e5a8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4413      	add	r3, r2
 80023d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d00b      	beq.n	8002402 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	18d1      	adds	r1, r2, r3
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	f00c f8d3 	bl	800e5a8 <memcpy>
      }

      flush();
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f7ff ff62 	bl	80022cc <_ZN13STM32Hardware5flushEv>
    }
 8002408:	bf00      	nop
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	f002 fc0a 	bl	8004c30 <HAL_GetTick>
 800241c:	4603      	mov	r3, r0
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe ffc8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	0800eaf0 	.word	0x0800eaf0

08002478 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002478:	b480      	push	{r7}
 800247a:	b08b      	sub	sp, #44	; 0x2c
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800248c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002496:	6838      	ldr	r0, [r7, #0]
 8002498:	4401      	add	r1, r0
 800249a:	b2d3      	uxtb	r3, r2
 800249c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800249e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	0a02      	lsrs	r2, r0, #8
 80024ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80024b0:	0a0b      	lsrs	r3, r1, #8
 80024b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b4:	3101      	adds	r1, #1
 80024b6:	6838      	ldr	r0, [r7, #0]
 80024b8:	4401      	add	r1, r0
 80024ba:	b2d3      	uxtb	r3, r2
 80024bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80024be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	0c02      	lsrs	r2, r0, #16
 80024cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024d0:	0c0b      	lsrs	r3, r1, #16
 80024d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d4:	3102      	adds	r1, #2
 80024d6:	6838      	ldr	r0, [r7, #0]
 80024d8:	4401      	add	r1, r0
 80024da:	b2d3      	uxtb	r3, r2
 80024dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80024de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	0e02      	lsrs	r2, r0, #24
 80024ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024f0:	0e0b      	lsrs	r3, r1, #24
 80024f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f4:	3103      	adds	r1, #3
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	4401      	add	r1, r0
 80024fa:	b2d3      	uxtb	r3, r2
 80024fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80024fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	000a      	movs	r2, r1
 800250c:	2300      	movs	r3, #0
 800250e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002510:	3104      	adds	r1, #4
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	4401      	add	r1, r0
 8002516:	b2d3      	uxtb	r3, r2
 8002518:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800251a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	0a0a      	lsrs	r2, r1, #8
 8002528:	2300      	movs	r3, #0
 800252a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252c:	3105      	adds	r1, #5
 800252e:	6838      	ldr	r0, [r7, #0]
 8002530:	4401      	add	r1, r0
 8002532:	b2d3      	uxtb	r3, r2
 8002534:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002536:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	0c0a      	lsrs	r2, r1, #16
 8002544:	2300      	movs	r3, #0
 8002546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002548:	3106      	adds	r1, #6
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	4401      	add	r1, r0
 800254e:	b2d3      	uxtb	r3, r2
 8002550:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	0e0a      	lsrs	r2, r1, #24
 8002560:	2300      	movs	r3, #0
 8002562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002564:	3107      	adds	r1, #7
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	4401      	add	r1, r0
 800256a:	b2d3      	uxtb	r3, r2
 800256c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	3308      	adds	r3, #8
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800257a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800257e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002584:	6838      	ldr	r0, [r7, #0]
 8002586:	4401      	add	r1, r0
 8002588:	b2d3      	uxtb	r3, r2
 800258a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800258c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	0a02      	lsrs	r2, r0, #8
 800259a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800259e:	0a0b      	lsrs	r3, r1, #8
 80025a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a2:	3101      	adds	r1, #1
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	4401      	add	r1, r0
 80025a8:	b2d3      	uxtb	r3, r2
 80025aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80025ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	0c02      	lsrs	r2, r0, #16
 80025ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025be:	0c0b      	lsrs	r3, r1, #16
 80025c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c2:	3102      	adds	r1, #2
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	4401      	add	r1, r0
 80025c8:	b2d3      	uxtb	r3, r2
 80025ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80025cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	0e02      	lsrs	r2, r0, #24
 80025da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025de:	0e0b      	lsrs	r3, r1, #24
 80025e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e2:	3103      	adds	r1, #3
 80025e4:	6838      	ldr	r0, [r7, #0]
 80025e6:	4401      	add	r1, r0
 80025e8:	b2d3      	uxtb	r3, r2
 80025ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80025ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	000a      	movs	r2, r1
 80025fa:	2300      	movs	r3, #0
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	3104      	adds	r1, #4
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	4401      	add	r1, r0
 8002604:	b2d3      	uxtb	r3, r2
 8002606:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	0a0a      	lsrs	r2, r1, #8
 8002616:	2300      	movs	r3, #0
 8002618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261a:	3105      	adds	r1, #5
 800261c:	6838      	ldr	r0, [r7, #0]
 800261e:	4401      	add	r1, r0
 8002620:	b2d3      	uxtb	r3, r2
 8002622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	0c0a      	lsrs	r2, r1, #16
 8002632:	2300      	movs	r3, #0
 8002634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002636:	3106      	adds	r1, #6
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	4401      	add	r1, r0
 800263c:	b2d3      	uxtb	r3, r2
 800263e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	0e0a      	lsrs	r2, r1, #24
 800264e:	2300      	movs	r3, #0
 8002650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002652:	3107      	adds	r1, #7
 8002654:	6838      	ldr	r0, [r7, #0]
 8002656:	4401      	add	r1, r0
 8002658:	b2d3      	uxtb	r3, r2
 800265a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	3308      	adds	r3, #8
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002668:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800266c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	4401      	add	r1, r0
 8002676:	b2d3      	uxtb	r3, r2
 8002678:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800267a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	0a02      	lsrs	r2, r0, #8
 8002688:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800268c:	0a0b      	lsrs	r3, r1, #8
 800268e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002690:	3101      	adds	r1, #1
 8002692:	6838      	ldr	r0, [r7, #0]
 8002694:	4401      	add	r1, r0
 8002696:	b2d3      	uxtb	r3, r2
 8002698:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800269a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	0c02      	lsrs	r2, r0, #16
 80026a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026ac:	0c0b      	lsrs	r3, r1, #16
 80026ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b0:	3102      	adds	r1, #2
 80026b2:	6838      	ldr	r0, [r7, #0]
 80026b4:	4401      	add	r1, r0
 80026b6:	b2d3      	uxtb	r3, r2
 80026b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80026ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	0e02      	lsrs	r2, r0, #24
 80026c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026cc:	0e0b      	lsrs	r3, r1, #24
 80026ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d0:	3103      	adds	r1, #3
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	4401      	add	r1, r0
 80026d6:	b2d3      	uxtb	r3, r2
 80026d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80026da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	000a      	movs	r2, r1
 80026e8:	2300      	movs	r3, #0
 80026ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ec:	3104      	adds	r1, #4
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	4401      	add	r1, r0
 80026f2:	b2d3      	uxtb	r3, r2
 80026f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80026f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	0a0a      	lsrs	r2, r1, #8
 8002704:	2300      	movs	r3, #0
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	3105      	adds	r1, #5
 800270a:	6838      	ldr	r0, [r7, #0]
 800270c:	4401      	add	r1, r0
 800270e:	b2d3      	uxtb	r3, r2
 8002710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	0c0a      	lsrs	r2, r1, #16
 8002720:	2300      	movs	r3, #0
 8002722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002724:	3106      	adds	r1, #6
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	4401      	add	r1, r0
 800272a:	b2d3      	uxtb	r3, r2
 800272c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800272e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	0e0a      	lsrs	r2, r1, #24
 800273c:	2300      	movs	r3, #0
 800273e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002740:	3107      	adds	r1, #7
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	4401      	add	r1, r0
 8002746:	b2d3      	uxtb	r3, r2
 8002748:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	3308      	adds	r3, #8
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002752:	4618      	mov	r0, r3
 8002754:	372c      	adds	r7, #44	; 0x2c
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800275e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002762:	b0eb      	sub	sp, #428	; 0x1ac
 8002764:	af00      	add	r7, sp, #0
 8002766:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800276a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002780:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002784:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002788:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2200      	movs	r2, #0
 8002794:	461c      	mov	r4, r3
 8002796:	4615      	mov	r5, r2
 8002798:	ea40 0804 	orr.w	r8, r0, r4
 800279c:	ea41 0905 	orr.w	r9, r1, r5
 80027a0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2200      	movs	r2, #0
 80027ba:	469a      	mov	sl, r3
 80027bc:	4693      	mov	fp, r2
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80027ca:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80027ce:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80027d2:	ea40 0402 	orr.w	r4, r0, r2
 80027d6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80027da:	430b      	orrs	r3, r1
 80027dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027e0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80027e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002802:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002812:	464c      	mov	r4, r9
 8002814:	0423      	lsls	r3, r4, #16
 8002816:	4644      	mov	r4, r8
 8002818:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800281c:	4644      	mov	r4, r8
 800281e:	0422      	lsls	r2, r4, #16
 8002820:	ea40 0402 	orr.w	r4, r0, r2
 8002824:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002828:	430b      	orrs	r3, r1
 800282a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800282e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002832:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002836:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800283a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800283e:	1cda      	adds	r2, r3, #3
 8002840:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002850:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002854:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002858:	4623      	mov	r3, r4
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002860:	4623      	mov	r3, r4
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002868:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800286c:	4623      	mov	r3, r4
 800286e:	4303      	orrs	r3, r0
 8002870:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002874:	462b      	mov	r3, r5
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800287c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002880:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002884:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002888:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288c:	1d1a      	adds	r2, r3, #4
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800289e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80028ae:	0023      	movs	r3, r4
 80028b0:	2200      	movs	r2, #0
 80028b2:	ea40 0402 	orr.w	r4, r0, r2
 80028b6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80028ba:	430b      	orrs	r3, r1
 80028bc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80028c0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80028c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028d0:	1d5a      	adds	r2, r3, #5
 80028d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028d6:	4413      	add	r3, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80028e2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80028f2:	0223      	lsls	r3, r4, #8
 80028f4:	2200      	movs	r2, #0
 80028f6:	ea40 0402 	orr.w	r4, r0, r2
 80028fa:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80028fe:	430b      	orrs	r3, r1
 8002900:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002904:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002908:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800290c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002910:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002914:	1d9a      	adds	r2, r3, #6
 8002916:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800291a:	4413      	add	r3, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2200      	movs	r2, #0
 8002922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002926:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002936:	0423      	lsls	r3, r4, #16
 8002938:	2200      	movs	r2, #0
 800293a:	ea40 0402 	orr.w	r4, r0, r2
 800293e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002942:	430b      	orrs	r3, r1
 8002944:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002948:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800294c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002950:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002954:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002958:	1dda      	adds	r2, r3, #7
 800295a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800295e:	4413      	add	r3, r2
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800296a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800297a:	0623      	lsls	r3, r4, #24
 800297c:	2200      	movs	r2, #0
 800297e:	ea40 0402 	orr.w	r4, r0, r2
 8002982:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002986:	430b      	orrs	r3, r1
 8002988:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800298c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002990:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002994:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002998:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800299c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80029a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029a4:	3308      	adds	r3, #8
 80029a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029b6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029ba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80029ce:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80029d2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80029d6:	4623      	mov	r3, r4
 80029d8:	4303      	orrs	r3, r0
 80029da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80029de:	462b      	mov	r3, r5
 80029e0:	430b      	orrs	r3, r1
 80029e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029e6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80029ea:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a08:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002a18:	464c      	mov	r4, r9
 8002a1a:	0223      	lsls	r3, r4, #8
 8002a1c:	4644      	mov	r4, r8
 8002a1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a22:	4644      	mov	r4, r8
 8002a24:	0222      	lsls	r2, r4, #8
 8002a26:	ea40 0402 	orr.w	r4, r0, r2
 8002a2a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a34:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002a38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a44:	1c9a      	adds	r2, r3, #2
 8002a46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002a66:	464c      	mov	r4, r9
 8002a68:	0423      	lsls	r3, r4, #16
 8002a6a:	4644      	mov	r4, r8
 8002a6c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a70:	4644      	mov	r4, r8
 8002a72:	0422      	lsls	r2, r4, #16
 8002a74:	ea40 0402 	orr.w	r4, r0, r2
 8002a78:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a82:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002a86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a92:	1cda      	adds	r2, r3, #3
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aa4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002aa8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002aac:	4623      	mov	r3, r4
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	061b      	lsls	r3, r3, #24
 8002ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002abc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	4303      	orrs	r3, r0
 8002ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac8:	462b      	mov	r3, r5
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ad0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1d1a      	adds	r2, r3, #4
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002af2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b02:	0023      	movs	r3, r4
 8002b04:	2200      	movs	r2, #0
 8002b06:	ea40 0402 	orr.w	r4, r0, r2
 8002b0a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b14:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002b18:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b1c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b24:	1d5a      	adds	r2, r3, #5
 8002b26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b36:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002b46:	0223      	lsls	r3, r4, #8
 8002b48:	2200      	movs	r2, #0
 8002b4a:	ea40 0402 	orr.w	r4, r0, r2
 8002b4e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002b52:	430b      	orrs	r3, r1
 8002b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b58:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002b5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b68:	1d9a      	adds	r2, r3, #6
 8002b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002b8a:	0423      	lsls	r3, r4, #16
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	ea40 0402 	orr.w	r4, r0, r2
 8002b92:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002b96:	430b      	orrs	r3, r1
 8002b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b9c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002ba0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ba4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ba8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bac:	1dda      	adds	r2, r3, #7
 8002bae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002bce:	0623      	lsls	r3, r4, #24
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	ea40 0402 	orr.w	r4, r0, r2
 8002bd6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002be0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002be4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002be8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002bf0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002bf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c0e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c22:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c26:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	4303      	orrs	r3, r0
 8002c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c30:	462b      	mov	r3, r5
 8002c32:	430b      	orrs	r3, r1
 8002c34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c36:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002c3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4c:	4413      	add	r3, r2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2200      	movs	r2, #0
 8002c54:	673b      	str	r3, [r7, #112]	; 0x70
 8002c56:	677a      	str	r2, [r7, #116]	; 0x74
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c64:	464c      	mov	r4, r9
 8002c66:	0223      	lsls	r3, r4, #8
 8002c68:	4644      	mov	r4, r8
 8002c6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c6e:	4644      	mov	r4, r8
 8002c70:	0222      	lsls	r2, r4, #8
 8002c72:	ea40 0402 	orr.w	r4, r0, r2
 8002c76:	66bc      	str	r4, [r7, #104]	; 0x68
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c7c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002c80:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c84:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c9c:	667a      	str	r2, [r7, #100]	; 0x64
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002caa:	464c      	mov	r4, r9
 8002cac:	0423      	lsls	r3, r4, #16
 8002cae:	4644      	mov	r4, r8
 8002cb0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002cb4:	4644      	mov	r4, r8
 8002cb6:	0422      	lsls	r2, r4, #16
 8002cb8:	ea40 0402 	orr.w	r4, r0, r2
 8002cbc:	65bc      	str	r4, [r7, #88]	; 0x58
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002cc6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cd2:	1cda      	adds	r2, r3, #3
 8002cd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2200      	movs	r2, #0
 8002ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce2:	657a      	str	r2, [r7, #84]	; 0x54
 8002ce4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002ce8:	4623      	mov	r3, r4
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cee:	4623      	mov	r3, r4
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002cf8:	4623      	mov	r3, r4
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfe:	462b      	mov	r3, r5
 8002d00:	430b      	orrs	r3, r1
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
 8002d04:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d08:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d0c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d14:	1d1a      	adds	r2, r3, #4
 8002d16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002d30:	0023      	movs	r3, r4
 8002d32:	2200      	movs	r2, #0
 8002d34:	ea40 0402 	orr.w	r4, r0, r2
 8002d38:	633c      	str	r4, [r7, #48]	; 0x30
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002d42:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d4e:	1d5a      	adds	r2, r3, #5
 8002d50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d54:	4413      	add	r3, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002d6a:	0223      	lsls	r3, r4, #8
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	ea40 0402 	orr.w	r4, r0, r2
 8002d72:	623c      	str	r4, [r7, #32]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002d7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d80:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d88:	3306      	adds	r3, #6
 8002d8a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2200      	movs	r2, #0
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	61fa      	str	r2, [r7, #28]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	69bc      	ldr	r4, [r7, #24]
 8002da4:	0423      	lsls	r3, r4, #16
 8002da6:	2200      	movs	r2, #0
 8002da8:	ea40 0402 	orr.w	r4, r0, r2
 8002dac:	613c      	str	r4, [r7, #16]
 8002dae:	430b      	orrs	r3, r1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002db6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002dba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dc2:	3307      	adds	r3, #7
 8002dc4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002dc8:	4413      	add	r3, r2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	68bc      	ldr	r4, [r7, #8]
 8002dde:	0623      	lsls	r3, r4, #24
 8002de0:	2200      	movs	r2, #0
 8002de2:	ea40 0402 	orr.w	r4, r0, r2
 8002de6:	603c      	str	r4, [r7, #0]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002df0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002df4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002df8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e04:	3308      	adds	r3, #8
 8002e06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002e0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e1a:	4770      	bx	lr

08002e1c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	0800e9c8 	.word	0x0800e9c8

08002e38 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	0800e9e0 	.word	0x0800e9e0

08002e54 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fab2 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8002e64:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fada 	bl	8002428 <_ZN13geometry_msgs7Vector3C1Ev>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3328      	adds	r3, #40	; 0x28
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fad5 	bl	8002428 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0800ead8 	.word	0x0800ead8

08002e8c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f103 0008 	add.w	r0, r3, #8
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7ff fae6 	bl	8002478 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7ff fad9 	bl	8002478 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ece:	68fb      	ldr	r3, [r7, #12]
    }
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f103 0008 	add.w	r0, r3, #8
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7ff fc33 	bl	800275e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff fc26 	bl	800275e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
     return offset;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	0800ea04 	.word	0x0800ea04

08002f40 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	0800ea18 	.word	0x0800ea18

08002f5c <_Z8callbackRKN13geometry_msgs5TwistE>:
double Vx, Vy, W, rVx, rVy, rW;
geometry_msgs::Twist* insVel;
ros::Publisher pub("ins_vel", insVel, 1);

void callback(const geometry_msgs::Twist &msg)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f6a:	490a      	ldr	r1, [pc, #40]	; (8002f94 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8002f6c:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8002f78:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f82:	4906      	ldr	r1, [pc, #24]	; (8002f9c <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8002f84:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	24000f60 	.word	0x24000f60
 8002f98:	24000f68 	.word	0x24000f68
 8002f9c:	24000f70 	.word	0x24000f70

08002fa0 <interPub>:
void interPub(void){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	insVel->linear.x = rVx;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <interPub+0x54>)
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <interPub+0x58>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel->linear.y = rVy;
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <interPub+0x54>)
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <interPub+0x5c>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel->angular.z = rW;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <interPub+0x54>)
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <interPub+0x60>)
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	run_inter0 ++;
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <interPub+0x64>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	; (8003004 <interPub+0x64>)
 8002fd6:	6013      	str	r3, [r2, #0]

	pub.publish(insVel);
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <interPub+0x54>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	480a      	ldr	r0, [pc, #40]	; (8003008 <interPub+0x68>)
 8002fe0:	f7ff f83f 	bl	8002062 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <interPub+0x6c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <interPub+0x6c>)
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	24000f90 	.word	0x24000f90
 8002ff8:	24000f78 	.word	0x24000f78
 8002ffc:	24000f80 	.word	0x24000f80
 8003000:	24000f88 	.word	0x24000f88
 8003004:	24000f54 	.word	0x24000f54
 8003008:	24000f94 	.word	0x24000f94
 800300c:	24000f58 	.word	0x24000f58

08003010 <_Z13Error_Handlerv>:

//	std_msgs

/* UART Communication */
void Error_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003014:	b672      	cpsid	i
}
 8003016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003018:	e7fe      	b.n	8003018 <_Z13Error_Handlerv+0x8>
	...

0800301c <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8003020:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003022:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8003024:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800302c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003042:	220c      	movs	r2, #12
 8003044:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003060:	2200      	movs	r2, #0
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8003064:	481b      	ldr	r0, [pc, #108]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003066:	f009 f90d 	bl	800c284 <HAL_UART_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 800307a:	f7ff ffc9 	bl	8003010 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800307e:	2100      	movs	r1, #0
 8003080:	4814      	ldr	r0, [pc, #80]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003082:	f00b f981 	bl	800e388 <HAL_UARTEx_SetTxFifoThreshold>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 8003096:	f7ff ffbb 	bl	8003010 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800309a:	2100      	movs	r1, #0
 800309c:	480d      	ldr	r0, [pc, #52]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800309e:	f00b f9b1 	bl	800e404 <HAL_UARTEx_SetRxFifoThreshold>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 80030b2:	f7ff ffad 	bl	8003010 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80030b6:	4807      	ldr	r0, [pc, #28]	; (80030d4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030b8:	f00b f92d 	bl	800e316 <HAL_UARTEx_DisableFifoMode>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 80030cc:	f7ff ffa0 	bl	8003010 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	24000494 	.word	0x24000494
 80030d8:	40011c00 	.word	0x40011c00

080030dc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_UART_ErrorCallback+0x5c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d120      	bne.n	800312e <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 80030ec:	4913      	ldr	r1, [pc, #76]	; (800313c <HAL_UART_ErrorCallback+0x60>)
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 80030fa:	4911      	ldr	r1, [pc, #68]	; (8003140 <HAL_UART_ErrorCallback+0x64>)
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_UART_ErrorCallback+0x68>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8003116:	4808      	ldr	r0, [pc, #32]	; (8003138 <HAL_UART_ErrorCallback+0x5c>)
 8003118:	f009 f904 	bl	800c324 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 800311c:	f7ff ff7e 	bl	800301c <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 8003120:	4809      	ldr	r0, [pc, #36]	; (8003148 <HAL_UART_ErrorCallback+0x6c>)
 8003122:	f000 f95f 	bl	80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003126:	4603      	mov	r3, r0
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f885 	bl	8002238 <_ZN13STM32Hardware4initEv>
    }
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	24000494 	.word	0x24000494
 800313c:	24000f60 	.word	0x24000f60
 8003140:	24000f68 	.word	0x24000f68
 8003144:	24000f70 	.word	0x24000f70
 8003148:	24000618 	.word	0x24000618

0800314c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_UART_TxCpltCallback+0x20>)
 8003156:	f000 f945 	bl	80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800315a:	4603      	mov	r3, r0
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff f8b5 	bl	80022cc <_ZN13STM32Hardware5flushEv>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	24000618 	.word	0x24000618

08003170 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <HAL_UART_RxCpltCallback+0x20>)
 800317a:	f000 f933 	bl	80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800317e:	4603      	mov	r3, r0
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f864 	bl	800224e <_ZN13STM32Hardware10reset_rbufEv>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	24000618 	.word	0x24000618

08003194 <setup>:
void setup(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
    nh.initNode();
 8003198:	4806      	ldr	r0, [pc, #24]	; (80031b4 <setup+0x20>)
 800319a:	f000 f92f 	bl	80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 800319e:	4906      	ldr	r1, [pc, #24]	; (80031b8 <setup+0x24>)
 80031a0:	4804      	ldr	r0, [pc, #16]	; (80031b4 <setup+0x20>)
 80031a2:	f000 f948 	bl	8003436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80031a6:	4905      	ldr	r1, [pc, #20]	; (80031bc <setup+0x28>)
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <setup+0x20>)
 80031aa:	f000 f96f 	bl	800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	24000618 	.word	0x24000618
 80031b8:	24000fa8 	.word	0x24000fa8
 80031bc:	24000f94 	.word	0x24000f94

080031c0 <loop>:
void loop(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <loop+0x10>)
 80031c6:	f000 f991 	bl	80034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	24000618 	.word	0x24000618

080031d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d80d      	bhi.n	8003204 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	fa22 f103 	lsr.w	r1, r2, r3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	b2ca      	uxtb	r2, r1
 80031fa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e7ee      	b.n	80031e2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d811      	bhi.n	800324e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6839      	ldr	r1, [r7, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	440a      	add	r2, r1
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	4611      	mov	r1, r2
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	00d2      	lsls	r2, r2, #3
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3301      	adds	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e7ea      	b.n	8003224 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	0800eb20 	.word	0x0800eb20

0800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ffe8 	bl	800325c <_ZN3ros15NodeHandleBase_C1Ev>
 800328c:	4a3a      	ldr	r2, [pc, #232]	; (8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe ffb2 	bl	8002200 <_ZN13STM32HardwareC1Ev>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fc00 	bl	8001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b18      	cmp	r3, #24
 80032b8:	d80b      	bhi.n	80032d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e7f0      	b.n	80032b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b18      	cmp	r3, #24
 80032da:	d80a      	bhi.n	80032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032e4:	2100      	movs	r1, #0
 80032e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3301      	adds	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	e7f1      	b.n	80032d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fc:	d20a      	bcs.n	8003314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e7f0      	b.n	80032f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331e:	d20a      	bcs.n	8003336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3301      	adds	r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	e7f0      	b.n	8003318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	0800eac4 	.word	0x0800eac4

0800337c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	0800eb08 	.word	0x0800eb08

0800339c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ffe5 	bl	800337c <_ZN3ros11Subscriber_C1Ev>
 80033b2:	4a0b      	ldr	r2, [pc, #44]	; (80033e0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3310      	adds	r3, #16
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fd49 	bl	8002e54 <_ZN13geometry_msgs5TwistC1Ev>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]
  };
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	0800eaac 	.word	0x0800eaac

080033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
  }
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe ff15 	bl	8002238 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b18      	cmp	r3, #24
 8003448:	dc19      	bgt.n	800347e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	605a      	str	r2, [r3, #4]
        return true;
 8003472:	2301      	movs	r3, #1
 8003474:	e004      	b.n	8003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3301      	adds	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e7e2      	b.n	8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800347e:	2300      	movs	r3, #0
  }
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b18      	cmp	r3, #24
 800349e:	dc1e      	bgt.n	80034de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d111      	bne.n	80034d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	60da      	str	r2, [r3, #12]
        return true;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e004      	b.n	80034e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3301      	adds	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e7dd      	b.n	800349a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80034de:	2300      	movs	r3, #0
  }
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe ff89 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 80034fe:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800350e:	4293      	cmp	r3, r2
 8003510:	d903      	bls.n	800351a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d903      	bls.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800353e:	2b00      	cmp	r3, #0
 8003540:	d014      	beq.n	800356c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe ff62 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad2      	subs	r2, r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003558:	429a      	cmp	r2, r3
 800355a:	bf8c      	ite	hi
 800355c:	2301      	movhi	r3, #1
 800355e:	2300      	movls	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003566:	f06f 0301 	mvn.w	r3, #1
 800356a:	e194      	b.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fe7d 	bl	8002270 <_ZN13STM32Hardware4readEv>
 8003576:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f2c0 8174 	blt.w	8003868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003596:	2b07      	cmp	r3, #7
 8003598:	d11e      	bne.n	80035d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	b2d1      	uxtb	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	460a      	mov	r2, r1
 80035b2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1b4      	bne.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2208      	movs	r2, #8
 80035d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035d6:	e7af      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d128      	bne.n	8003634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2bff      	cmp	r3, #255	; 0xff
 80035e6:	d10d      	bne.n	8003604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f103 0214 	add.w	r2, r3, #20
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003602:	e799      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe ff01 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 800360e:	4602      	mov	r2, r0
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	bf8c      	ite	hi
 800361c:	2301      	movhi	r3, #1
 800361e:	2300      	movls	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d088      	beq.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800362e:	f06f 0301 	mvn.w	r3, #1
 8003632:	e130      	b.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800363a:	2b01      	cmp	r3, #1
 800363c:	d118      	bne.n	8003670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2bfe      	cmp	r3, #254	; 0xfe
 8003642:	d107      	bne.n	8003654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003652:	e771      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003662:	2b00      	cmp	r3, #0
 8003664:	f47f af68 	bne.w	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f918 	bl	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800366e:	e763      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003676:	2b02      	cmp	r3, #2
 8003678:	d113      	bne.n	80036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80036a0:	e74a      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d110      	bne.n	80036ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	441a      	add	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036cc:	e734      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d116      	bne.n	8003706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80036de:	425a      	negs	r2, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	bf58      	it	pl
 80036e6:	4253      	negpl	r3, r2
 80036e8:	2bff      	cmp	r3, #255	; 0xff
 80036ea:	d107      	bne.n	80036fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036fa:	e71d      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003704:	e718      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10f      	bne.n	8003730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800372e:	e703      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003736:	2b06      	cmp	r3, #6
 8003738:	d117      	bne.n	800376a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2207      	movs	r2, #7
 8003750:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f47f aeec 	bne.w	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2208      	movs	r2, #8
 8003764:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003768:	e6e6      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003770:	2b08      	cmp	r3, #8
 8003772:	f47f aee1 	bne.w	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003784:	425a      	negs	r2, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	bf58      	it	pl
 800378c:	4253      	negpl	r3, r2
 800378e:	2bff      	cmp	r3, #255	; 0xff
 8003790:	f47f aed2 	bne.w	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d110      	bne.n	80037c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f87d 	bl	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f898 	bl	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
 80037be:	e06a      	b.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037c6:	2b0a      	cmp	r3, #10
 80037c8:	d107      	bne.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f960 	bl	8003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80037d8:	e6ae      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d10e      	bne.n	8003802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fe fa91 	bl	8001d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003800:	e69a      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003808:	2b0b      	cmp	r3, #11
 800380a:	d104      	bne.n	8003816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003814:	e690      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800381c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f43f ae84 	beq.w	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003836:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003840:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800384a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003862:	4611      	mov	r1, r2
 8003864:	4798      	blx	r3
    while (true)
 8003866:	e667      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003868:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00f      	beq.n	8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003882:	4293      	cmp	r3, r2
 8003884:	d906      	bls.n	8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f809 	bl	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003894:	2300      	movs	r3, #0
  }
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fd9c 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f107 020c 	add.w	r2, r7, #12
 80038ba:	210a      	movs	r1, #10
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
    rt_time = hardware_.time();
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fda3 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80038da:	b590      	push	{r4, r7, lr}
 80038dc:	b08b      	sub	sp, #44	; 0x2c
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fe6e 	bl	80015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	2b18      	cmp	r3, #24
 80038f4:	dc63      	bgt.n	80039be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d056      	beq.n	80039b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	b29b      	uxth	r3, r3
 800391a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3308      	adds	r3, #8
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4608      	mov	r0, r1
 8003956:	4798      	blx	r3
 8003958:	4603      	mov	r3, r0
 800395a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4608      	mov	r0, r1
 8003984:	4798      	blx	r3
 8003986:	4603      	mov	r3, r0
 8003988:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800398a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fb70 	bl	800208a <_ZN3ros9Publisher15getEndpointTypeEv>
 80039aa:	4601      	mov	r1, r0
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	461a      	mov	r2, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	3301      	adds	r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
 80039bc:	e798      	b.n	80038f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	2b18      	cmp	r3, #24
 80039c6:	dc5f      	bgt.n	8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d053      	beq.n	8003a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4798      	blx	r3
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4608      	mov	r0, r1
 8003a40:	4798      	blx	r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681c      	ldr	r4, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4798      	blx	r3
 8003a74:	4601      	mov	r1, r0
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	3301      	adds	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	e79c      	b.n	80039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003a90:	bf00      	nop
 8003a92:	372c      	adds	r7, #44	; 0x2c
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}

08003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fc9e 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fcad 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003ac2:	f107 0308 	add.w	r3, r7, #8
 8003ac6:	6839      	ldr	r1, [r7, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fcfd 	bl	80014c8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4915      	ldr	r1, [pc, #84]	; (8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ad4:	fba1 1303 	umull	r1, r3, r1, r3
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	4413      	add	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003ade:	6939      	ldr	r1, [r7, #16]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ae4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aee:	fb00 f303 	mul.w	r3, r0, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	440b      	add	r3, r1
 8003afc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8a6 	bl	8003c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fc7d 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	10624dd3 	.word	0x10624dd3
 8003b2c:	000f4240 	.word	0x000f4240

08003b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b63      	cmp	r3, #99	; 0x63
 8003b40:	dd09      	ble.n	8003b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003b48:	f083 0301 	eor.w	r3, r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e079      	b.n	8003c4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003b62:	3207      	adds	r2, #7
 8003b64:	4611      	mov	r1, r2
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
 8003b6a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	22fe      	movs	r2, #254	; 0xfe
 8003b78:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003ba2:	4413      	add	r3, r2
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	b21b      	sxth	r3, r3
 8003bbe:	121b      	asrs	r3, r3, #8
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003bce:	2305      	movs	r3, #5
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3306      	adds	r3, #6
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	dc0d      	bgt.n	8003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4413      	add	r3, r2
 8003be2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e7ec      	b.n	8003bd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	3307      	adds	r3, #7
 8003bfc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	425a      	negs	r2, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	bf58      	it	pl
 8003c08:	4253      	negpl	r3, r2
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	6179      	str	r1, [r7, #20]
 8003c12:	43d2      	mvns	r2, r2
 8003c14:	b2d1      	uxtb	r1, r2
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c26:	dc0a      	bgt.n	8003c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1d18      	adds	r0, r3, #4
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7fe fba5 	bl	8002384 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e005      	b.n	8003c4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c3e:	4905      	ldr	r1, [pc, #20]	; (8003c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f849 	bl	8003cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	0800ea3c 	.word	0x0800ea3c

08003c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fbd2 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003c6c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4915      	ldr	r1, [pc, #84]	; (8003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c76:	fba1 1303 	umull	r1, r3, r1, r3
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c98:	fb00 f303 	mul.w	r3, r0, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	1aca      	subs	r2, r1, r3
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7fc fcb0 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	10624dd3 	.word	0x10624dd3
 8003cd0:	000f4240 	.word	0x000f4240
 8003cd4:	3b9aca00 	.word	0x3b9aca00

08003cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	2103      	movs	r1, #3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f804 	bl	8003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fe22 	bl	8001950 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
 8003d0e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f107 0214 	add.w	r2, r7, #20
 8003d1e:	2107      	movs	r1, #7
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	4798      	blx	r3
  }
 8003d24:	bf00      	nop
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_Z41__static_initialization_and_destruction_0ii>:
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d114      	bne.n	8003d66 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10f      	bne.n	8003d66 <_Z41__static_initialization_and_destruction_0ii+0x3a>
ros::NodeHandle nh;
 8003d46:	480a      	ldr	r0, [pc, #40]	; (8003d70 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003d48:	f7ff fa98 	bl	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Publisher pub("ins_vel", insVel, 1);
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	2301      	movs	r3, #1
 8003d52:	4909      	ldr	r1, [pc, #36]	; (8003d78 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003d54:	4809      	ldr	r0, [pc, #36]	; (8003d7c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003d56:	f7fe f96d 	bl	8002034 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003d5e:	4909      	ldr	r1, [pc, #36]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003d60:	4809      	ldr	r0, [pc, #36]	; (8003d88 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d62:	f7ff fb1b 	bl	800339c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	24000618 	.word	0x24000618
 8003d74:	24000f90 	.word	0x24000f90
 8003d78:	0800ea78 	.word	0x0800ea78
 8003d7c:	24000f94 	.word	0x24000f94
 8003d80:	08002f5d 	.word	0x08002f5d
 8003d84:	0800ea80 	.word	0x0800ea80
 8003d88:	24000fa8 	.word	0x24000fa8

08003d8c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3310      	adds	r3, #16
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff f89b 	bl	8002ed8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	3210      	adds	r2, #16
 8003daa:	4610      	mov	r0, r2
 8003dac:	4798      	blx	r3
  }
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3310      	adds	r3, #16
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f8a2 	bl	8002f24 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003de0:	4603      	mov	r3, r0
  }
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3310      	adds	r3, #16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f8a2 	bl	8002f40 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003dfc:	4603      	mov	r3, r0
  }
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <_GLOBAL__sub_I_nh>:
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f7ff ff7f 	bl	8003d2c <_Z41__static_initialization_and_destruction_0ii>
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <HAL_MspInit+0x3c>)
 8003e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <HAL_MspInit+0x3c>)
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_MspInit+0x3c>)
 8003e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003e54:	2200      	movs	r2, #0
 8003e56:	2100      	movs	r1, #0
 8003e58:	2005      	movs	r0, #5
 8003e5a:	f000 fff4 	bl	8004e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003e5e:	2005      	movs	r0, #5
 8003e60:	f001 f80b 	bl	8004e7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	58024400 	.word	0x58024400

08003e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e80:	d117      	bne.n	8003eb2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <HAL_TIM_Base_MspInit+0x84>)
 8003e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e88:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <HAL_TIM_Base_MspInit+0x84>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e92:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <HAL_TIM_Base_MspInit+0x84>)
 8003e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	201c      	movs	r0, #28
 8003ea6:	f000 ffce 	bl	8004e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003eaa:	201c      	movs	r0, #28
 8003eac:	f000 ffe5 	bl	8004e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003eb0:	e01b      	b.n	8003eea <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a10      	ldr	r2, [pc, #64]	; (8003ef8 <HAL_TIM_Base_MspInit+0x88>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d116      	bne.n	8003eea <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_TIM_Base_MspInit+0x84>)
 8003ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_TIM_Base_MspInit+0x84>)
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_TIM_Base_MspInit+0x84>)
 8003ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	2100      	movs	r1, #0
 8003ede:	2032      	movs	r0, #50	; 0x32
 8003ee0:	f000 ffb1 	bl	8004e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003ee4:	2032      	movs	r0, #50	; 0x32
 8003ee6:	f000 ffc8 	bl	8004e7a <HAL_NVIC_EnableIRQ>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	40000c00 	.word	0x40000c00

08003efc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b090      	sub	sp, #64	; 0x40
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a69      	ldr	r2, [pc, #420]	; (80040c0 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d12e      	bne.n	8003f7c <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f1e:	4b69      	ldr	r3, [pc, #420]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f24:	4a67      	ldr	r2, [pc, #412]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f26:	f043 0302 	orr.w	r3, r3, #2
 8003f2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f2e:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3c:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f42:	4a60      	ldr	r2, [pc, #384]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f4c:	4b5d      	ldr	r3, [pc, #372]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f5a:	23c0      	movs	r3, #192	; 0xc0
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	2300      	movs	r3, #0
 8003f68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f72:	4619      	mov	r1, r3
 8003f74:	4854      	ldr	r0, [pc, #336]	; (80040c8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003f76:	f003 ff99 	bl	8007eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8003f7a:	e09c      	b.n	80040b6 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a52      	ldr	r2, [pc, #328]	; (80040cc <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d12f      	bne.n	8003fe6 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f86:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f8c:	4a4d      	ldr	r2, [pc, #308]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f8e:	f043 0304 	orr.w	r3, r3, #4
 8003f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f96:	4b4b      	ldr	r3, [pc, #300]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa4:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003faa:	4a46      	ldr	r2, [pc, #280]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003fac:	f043 0308 	orr.w	r3, r3, #8
 8003fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fb4:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003fc2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fdc:	4619      	mov	r1, r3
 8003fde:	483c      	ldr	r0, [pc, #240]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003fe0:	f003 ff64 	bl	8007eac <HAL_GPIO_Init>
}
 8003fe4:	e067      	b.n	80040b6 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a3a      	ldr	r2, [pc, #232]	; (80040d4 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d12e      	bne.n	800404e <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003ff2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ff6:	4a33      	ldr	r2, [pc, #204]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004002:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800400e:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004014:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004016:	f043 0320 	orr.w	r3, r3, #32
 800401a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800401e:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800402c:	2303      	movs	r3, #3
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004038:	2300      	movs	r3, #0
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800403c:	230d      	movs	r3, #13
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004044:	4619      	mov	r1, r3
 8004046:	4824      	ldr	r0, [pc, #144]	; (80040d8 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004048:	f003 ff30 	bl	8007eac <HAL_GPIO_Init>
}
 800404c:	e033      	b.n	80040b6 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a22      	ldr	r2, [pc, #136]	; (80040dc <HAL_TIM_Encoder_MspInit+0x1e0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d12e      	bne.n	80040b6 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800405a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800405e:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004064:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004068:	4b16      	ldr	r3, [pc, #88]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800406a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004076:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800407c:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800407e:	f043 0320 	orr.w	r3, r3, #32
 8004082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004094:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a2:	2300      	movs	r3, #0
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80040a6:	230e      	movs	r3, #14
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ae:	4619      	mov	r1, r3
 80040b0:	4809      	ldr	r0, [pc, #36]	; (80040d8 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80040b2:	f003 fefb 	bl	8007eac <HAL_GPIO_Init>
}
 80040b6:	bf00      	nop
 80040b8:	3740      	adds	r7, #64	; 0x40
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40000400 	.word	0x40000400
 80040c4:	58024400 	.word	0x58024400
 80040c8:	58020000 	.word	0x58020000
 80040cc:	40000800 	.word	0x40000800
 80040d0:	58020c00 	.word	0x58020c00
 80040d4:	4000e000 	.word	0x4000e000
 80040d8:	58021400 	.word	0x58021400
 80040dc:	4000e400 	.word	0x4000e400

080040e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <HAL_TIM_PWM_MspInit+0x68>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10f      	bne.n	8004112 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040f2:	4b16      	ldr	r3, [pc, #88]	; (800414c <HAL_TIM_PWM_MspInit+0x6c>)
 80040f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <HAL_TIM_PWM_MspInit+0x6c>)
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_TIM_PWM_MspInit+0x6c>)
 8004104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004110:	e013      	b.n	800413a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a0e      	ldr	r2, [pc, #56]	; (8004150 <HAL_TIM_PWM_MspInit+0x70>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10e      	bne.n	800413a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_TIM_PWM_MspInit+0x6c>)
 800411e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_TIM_PWM_MspInit+0x6c>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_TIM_PWM_MspInit+0x6c>)
 800412e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010400 	.word	0x40010400
 800414c:	58024400 	.word	0x58024400
 8004150:	40014000 	.word	0x40014000

08004154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a35      	ldr	r2, [pc, #212]	; (8004248 <HAL_TIM_MspPostInit+0xf4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d120      	bne.n	80041b8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 8004178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800417c:	4a33      	ldr	r2, [pc, #204]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004186:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 8004188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004194:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a2:	2300      	movs	r3, #0
 80041a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80041a6:	2303      	movs	r3, #3
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	4619      	mov	r1, r3
 80041b0:	4827      	ldr	r0, [pc, #156]	; (8004250 <HAL_TIM_MspPostInit+0xfc>)
 80041b2:	f003 fe7b 	bl	8007eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80041b6:	e042      	b.n	800423e <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a25      	ldr	r2, [pc, #148]	; (8004254 <HAL_TIM_MspPostInit+0x100>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d13d      	bne.n	800423e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 80041c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c8:	4a20      	ldr	r2, [pc, #128]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 80041ca:	f043 0310 	orr.w	r3, r3, #16
 80041ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 80041d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 80041e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_TIM_MspPostInit+0xf8>)
 80041f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041fe:	2320      	movs	r3, #32
 8004200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800420e:	2304      	movs	r3, #4
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4619      	mov	r1, r3
 8004218:	480f      	ldr	r0, [pc, #60]	; (8004258 <HAL_TIM_MspPostInit+0x104>)
 800421a:	f003 fe47 	bl	8007eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800421e:	2308      	movs	r3, #8
 8004220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004222:	2302      	movs	r3, #2
 8004224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422a:	2300      	movs	r3, #0
 800422c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800422e:	2304      	movs	r3, #4
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4619      	mov	r1, r3
 8004238:	4808      	ldr	r0, [pc, #32]	; (800425c <HAL_TIM_MspPostInit+0x108>)
 800423a:	f003 fe37 	bl	8007eac <HAL_GPIO_Init>
}
 800423e:	bf00      	nop
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40010400 	.word	0x40010400
 800424c:	58024400 	.word	0x58024400
 8004250:	58020800 	.word	0x58020800
 8004254:	40014000 	.word	0x40014000
 8004258:	58021000 	.word	0x58021000
 800425c:	58020000 	.word	0x58020000

08004260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b0b6      	sub	sp, #216	; 0xd8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004278:	f107 0310 	add.w	r3, r7, #16
 800427c:	22b4      	movs	r2, #180	; 0xb4
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f00a f99f 	bl	800e5c4 <memset>
  if(huart->Instance==USART10)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a62      	ldr	r2, [pc, #392]	; (8004414 <HAL_UART_MspInit+0x1b4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	f040 80bc 	bne.w	800440a <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8004292:	2301      	movs	r3, #1
 8004294:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800429c:	f107 0310 	add.w	r3, r7, #16
 80042a0:	4618      	mov	r0, r3
 80042a2:	f005 f85f 	bl	8009364 <HAL_RCCEx_PeriphCLKConfig>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80042ac:	f7fd f876 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_UART_MspInit+0x1b8>)
 80042b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b6:	4a58      	ldr	r2, [pc, #352]	; (8004418 <HAL_UART_MspInit+0x1b8>)
 80042b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042c0:	4b55      	ldr	r3, [pc, #340]	; (8004418 <HAL_UART_MspInit+0x1b8>)
 80042c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ce:	4b52      	ldr	r3, [pc, #328]	; (8004418 <HAL_UART_MspInit+0x1b8>)
 80042d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d4:	4a50      	ldr	r2, [pc, #320]	; (8004418 <HAL_UART_MspInit+0x1b8>)
 80042d6:	f043 0310 	orr.w	r3, r3, #16
 80042da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042de:	4b4e      	ldr	r3, [pc, #312]	; (8004418 <HAL_UART_MspInit+0x1b8>)
 80042e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042ec:	2304      	movs	r3, #4
 80042ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f2:	2302      	movs	r3, #2
 80042f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004304:	2304      	movs	r3, #4
 8004306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800430a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800430e:	4619      	mov	r1, r3
 8004310:	4842      	ldr	r0, [pc, #264]	; (800441c <HAL_UART_MspInit+0x1bc>)
 8004312:	f003 fdcb 	bl	8007eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004316:	2308      	movs	r3, #8
 8004318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431c:	2302      	movs	r3, #2
 800431e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 800432e:	230b      	movs	r3, #11
 8004330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004334:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004338:	4619      	mov	r1, r3
 800433a:	4838      	ldr	r0, [pc, #224]	; (800441c <HAL_UART_MspInit+0x1bc>)
 800433c:	f003 fdb6 	bl	8007eac <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 8004340:	4b37      	ldr	r3, [pc, #220]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004342:	4a38      	ldr	r2, [pc, #224]	; (8004424 <HAL_UART_MspInit+0x1c4>)
 8004344:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004348:	2276      	movs	r2, #118	; 0x76
 800434a:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800434c:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004354:	2200      	movs	r2, #0
 8004356:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 800435a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800435e:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004360:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004362:	2200      	movs	r2, #0
 8004364:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004368:	2200      	movs	r2, #0
 800436a:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 800436c:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 800436e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004372:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004374:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800437a:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 800437e:	2200      	movs	r2, #0
 8004380:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 8004382:	4827      	ldr	r0, [pc, #156]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004384:	f000 fda2 	bl	8004ecc <HAL_DMA_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800438e:	f7fd f805 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a22      	ldr	r2, [pc, #136]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 8004396:	67da      	str	r2, [r3, #124]	; 0x7c
 8004398:	4a21      	ldr	r2, [pc, #132]	; (8004420 <HAL_UART_MspInit+0x1c0>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043a0:	4a22      	ldr	r2, [pc, #136]	; (800442c <HAL_UART_MspInit+0x1cc>)
 80043a2:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 80043a4:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043a6:	2277      	movs	r2, #119	; 0x77
 80043a8:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043aa:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043ac:	2240      	movs	r2, #64	; 0x40
 80043ae:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043bc:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 80043ca:	4b17      	ldr	r3, [pc, #92]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043d6:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043da:	2200      	movs	r2, #0
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 80043de:	4812      	ldr	r0, [pc, #72]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043e0:	f000 fd74 	bl	8004ecc <HAL_DMA_Init>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 80043ea:	f7fc ffd7 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043f2:	679a      	str	r2, [r3, #120]	; 0x78
 80043f4:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <HAL_UART_MspInit+0x1c8>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	209c      	movs	r0, #156	; 0x9c
 8004400:	f000 fd21 	bl	8004e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004404:	209c      	movs	r0, #156	; 0x9c
 8004406:	f000 fd38 	bl	8004e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 800440a:	bf00      	nop
 800440c:	37d8      	adds	r7, #216	; 0xd8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40011c00 	.word	0x40011c00
 8004418:	58024400 	.word	0x58024400
 800441c:	58021000 	.word	0x58021000
 8004420:	24000524 	.word	0x24000524
 8004424:	40020010 	.word	0x40020010
 8004428:	2400059c 	.word	0x2400059c
 800442c:	40020028 	.word	0x40020028

08004430 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0f      	ldr	r2, [pc, #60]	; (800447c <HAL_UART_MspDeInit+0x4c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d118      	bne.n	8004474 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_UART_MspDeInit+0x50>)
 8004444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004448:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <HAL_UART_MspDeInit+0x50>)
 800444a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 8004452:	210c      	movs	r1, #12
 8004454:	480b      	ldr	r0, [pc, #44]	; (8004484 <HAL_UART_MspDeInit+0x54>)
 8004456:	f003 fed1 	bl	80081fc <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445e:	4618      	mov	r0, r3
 8004460:	f001 f88e 	bl	8005580 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004468:	4618      	mov	r0, r3
 800446a:	f001 f889 	bl	8005580 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 800446e:	209c      	movs	r0, #156	; 0x9c
 8004470:	f000 fd11 	bl	8004e96 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40011c00 	.word	0x40011c00
 8004480:	58024400 	.word	0x58024400
 8004484:	58021000 	.word	0x58021000

08004488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800448c:	e7fe      	b.n	800448c <NMI_Handler+0x4>

0800448e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004492:	e7fe      	b.n	8004492 <HardFault_Handler+0x4>

08004494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004498:	e7fe      	b.n	8004498 <MemManage_Handler+0x4>

0800449a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800449e:	e7fe      	b.n	800449e <BusFault_Handler+0x4>

080044a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044a4:	e7fe      	b.n	80044a4 <UsageFault_Handler+0x4>

080044a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044d4:	f000 fb98 	bl	8004c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}

080044dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 80044f0:	4802      	ldr	r0, [pc, #8]	; (80044fc <DMA1_Stream0_IRQHandler+0x10>)
 80044f2:	f002 f9c9 	bl	8006888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	24000524 	.word	0x24000524

08004500 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004504:	4802      	ldr	r0, [pc, #8]	; (8004510 <DMA1_Stream1_IRQHandler+0x10>)
 8004506:	f002 f9bf 	bl	8006888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	2400059c 	.word	0x2400059c

08004514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004518:	4802      	ldr	r0, [pc, #8]	; (8004524 <TIM2_IRQHandler+0x10>)
 800451a:	f006 fdc5 	bl	800b0a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	24000234 	.word	0x24000234

08004528 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800452c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004530:	f003 ff7f 	bl	8008432 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}

08004538 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800453c:	4802      	ldr	r0, [pc, #8]	; (8004548 <TIM5_IRQHandler+0x10>)
 800453e:	f006 fdb3 	bl	800b0a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	24000318 	.word	0x24000318

0800454c <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004550:	4802      	ldr	r0, [pc, #8]	; (800455c <USART10_IRQHandler+0x10>)
 8004552:	f008 f80b 	bl	800c56c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	24000494 	.word	0x24000494

08004560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	return 1;
 8004564:	2301      	movs	r3, #1
}
 8004566:	4618      	mov	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <_kill>:

int _kill(int pid, int sig)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800457a:	f009 ffeb 	bl	800e554 <__errno>
 800457e:	4603      	mov	r3, r0
 8004580:	2216      	movs	r2, #22
 8004582:	601a      	str	r2, [r3, #0]
	return -1;
 8004584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <_exit>:

void _exit (int status)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004598:	f04f 31ff 	mov.w	r1, #4294967295
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ffe7 	bl	8004570 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045a2:	e7fe      	b.n	80045a2 <_exit+0x12>

080045a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <_sbrk+0x5c>)
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <_sbrk+0x60>)
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <_sbrk+0x64>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <_sbrk+0x64>)
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <_sbrk+0x68>)
 80045c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <_sbrk+0x64>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d207      	bcs.n	80045e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045d4:	f009 ffbe 	bl	800e554 <__errno>
 80045d8:	4603      	mov	r3, r0
 80045da:	220c      	movs	r2, #12
 80045dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	e009      	b.n	80045f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <_sbrk+0x64>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <_sbrk+0x64>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	4a05      	ldr	r2, [pc, #20]	; (8004608 <_sbrk+0x64>)
 80045f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	24050000 	.word	0x24050000
 8004604:	00000400 	.word	0x00000400
 8004608:	24001008 	.word	0x24001008
 800460c:	24001020 	.word	0x24001020

08004610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004614:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <SystemInit+0xd0>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	4a31      	ldr	r2, [pc, #196]	; (80046e0 <SystemInit+0xd0>)
 800461c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <SystemInit+0xd4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	2b06      	cmp	r3, #6
 800462e:	d807      	bhi.n	8004640 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <SystemInit+0xd4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 030f 	bic.w	r3, r3, #15
 8004638:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <SystemInit+0xd4>)
 800463a:	f043 0307 	orr.w	r3, r3, #7
 800463e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004640:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <SystemInit+0xd8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <SystemInit+0xd8>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800464c:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <SystemInit+0xd8>)
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <SystemInit+0xd8>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4924      	ldr	r1, [pc, #144]	; (80046e8 <SystemInit+0xd8>)
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <SystemInit+0xdc>)
 800465a:	4013      	ands	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <SystemInit+0xd4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800466a:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <SystemInit+0xd4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 030f 	bic.w	r3, r3, #15
 8004672:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <SystemInit+0xd4>)
 8004674:	f043 0307 	orr.w	r3, r3, #7
 8004678:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <SystemInit+0xd8>)
 800467c:	2200      	movs	r2, #0
 800467e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004680:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <SystemInit+0xd8>)
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <SystemInit+0xd8>)
 8004688:	2200      	movs	r2, #0
 800468a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800468c:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <SystemInit+0xd8>)
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <SystemInit+0xe0>)
 8004690:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <SystemInit+0xd8>)
 8004694:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <SystemInit+0xe4>)
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <SystemInit+0xd8>)
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <SystemInit+0xe8>)
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <SystemInit+0xd8>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80046a4:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <SystemInit+0xd8>)
 80046a6:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <SystemInit+0xe8>)
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <SystemInit+0xd8>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <SystemInit+0xd8>)
 80046b2:	4a11      	ldr	r2, [pc, #68]	; (80046f8 <SystemInit+0xe8>)
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <SystemInit+0xd8>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <SystemInit+0xd8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <SystemInit+0xd8>)
 80046c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <SystemInit+0xd8>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <SystemInit+0xec>)
 80046d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80046d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000ed00 	.word	0xe000ed00
 80046e4:	52002000 	.word	0x52002000
 80046e8:	58024400 	.word	0x58024400
 80046ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80046f0:	02020200 	.word	0x02020200
 80046f4:	01ff0000 	.word	0x01ff0000
 80046f8:	01010280 	.word	0x01010280
 80046fc:	52004000 	.word	0x52004000

08004700 <HAL_TIM_PeriodElapsedCallback>:
#include "timing.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PeriodElapsedCallback+0x16>
		interPub();
 8004712:	f7fe fc45 	bl	8002fa0 <interPub>
	}
	if (htim->Instance == TIM5) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4aad      	ldr	r2, [pc, #692]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	f040 81c9 	bne.w	8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3b4>
		Kpid[0].goalVel = Vy + Vx + (W * 0.152767);
 8004722:	4bac      	ldr	r3, [pc, #688]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004724:	ed93 6b00 	vldr	d6, [r3]
 8004728:	4bab      	ldr	r3, [pc, #684]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800472a:	ed93 7b00 	vldr	d7, [r3]
 800472e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004732:	4baa      	ldr	r3, [pc, #680]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004734:	ed93 7b00 	vldr	d7, [r3]
 8004738:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 80049b0 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 800473c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004740:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004744:	4ba6      	ldr	r3, [pc, #664]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004746:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * 0.152844);
 800474a:	4ba2      	ldr	r3, [pc, #648]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800474c:	ed93 6b00 	vldr	d6, [r3]
 8004750:	4ba1      	ldr	r3, [pc, #644]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004752:	ed93 7b00 	vldr	d7, [r3]
 8004756:	ee36 6b47 	vsub.f64	d6, d6, d7
 800475a:	4ba0      	ldr	r3, [pc, #640]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800475c:	ed93 7b00 	vldr	d7, [r3]
 8004760:	ed9f 5b95 	vldr	d5, [pc, #596]	; 80049b8 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8004764:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004768:	ee36 7b47 	vsub.f64	d7, d6, d7
 800476c:	4b9c      	ldr	r3, [pc, #624]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800476e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
		Kpid[2].goalVel = Vy + Vx - (W * 0.152998);
 8004772:	4b98      	ldr	r3, [pc, #608]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004774:	ed93 6b00 	vldr	d6, [r3]
 8004778:	4b97      	ldr	r3, [pc, #604]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800477a:	ed93 7b00 	vldr	d7, [r3]
 800477e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004782:	4b96      	ldr	r3, [pc, #600]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004784:	ed93 7b00 	vldr	d7, [r3]
 8004788:	ed9f 5b8d 	vldr	d5, [pc, #564]	; 80049c0 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800478c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004790:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004794:	4b92      	ldr	r3, [pc, #584]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004796:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
		Kpid[3].goalVel = Vy - Vx + (W * 0.154852);
 800479a:	4b8e      	ldr	r3, [pc, #568]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800479c:	ed93 6b00 	vldr	d6, [r3]
 80047a0:	4b8d      	ldr	r3, [pc, #564]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80047a2:	ed93 7b00 	vldr	d7, [r3]
 80047a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047aa:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80047ac:	ed93 7b00 	vldr	d7, [r3]
 80047b0:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80049c8 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80047b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80047b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047bc:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047be:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 80047c2:	4b88      	ldr	r3, [pc, #544]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	b21a      	sxth	r2, r3
 80047ca:	4b85      	ldr	r3, [pc, #532]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047cc:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 80047ce:	4b86      	ldr	r3, [pc, #536]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	425b      	negs	r3, r3
 80047d8:	b29b      	uxth	r3, r3
 80047da:	b21a      	sxth	r2, r3
 80047dc:	4b80      	ldr	r3, [pc, #512]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047de:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 80047e2:	4b82      	ldr	r3, [pc, #520]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	b21a      	sxth	r2, r3
 80047ea:	4b7d      	ldr	r3, [pc, #500]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047ec:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 80047f0:	4b7f      	ldr	r3, [pc, #508]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	b21a      	sxth	r2, r3
 80047f8:	4b79      	ldr	r3, [pc, #484]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047fa:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
		__HAL_TIM_SetCounter(&htim24, 0);
 80047fe:	4b7b      	ldr	r3, [pc, #492]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8004806:	4b77      	ldr	r3, [pc, #476]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 800480e:	4b78      	ldr	r3, [pc, #480]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8004816:	4b74      	ldr	r3, [pc, #464]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b03      	cmp	r3, #3
 8004826:	dc06      	bgt.n	8004836 <HAL_TIM_PeriodElapsedCallback+0x136>
			pidCtrl(i);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7fb ff29 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e7f5      	b.n	8004822 <HAL_TIM_PeriodElapsedCallback+0x122>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 8004836:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004838:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800483c:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004844:	ee17 2a90 	vmov	r2, s15
 8004848:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800484c:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8004850:	4b68      	ldr	r3, [pc, #416]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004858:	ee17 2a90 	vmov	r2, s15
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 800485e:	4b60      	ldr	r3, [pc, #384]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004860:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 8004864:	4b64      	ldr	r3, [pc, #400]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800486c:	ee17 2a90 	vmov	r2, s15
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8004872:	4b5b      	ldr	r3, [pc, #364]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004874:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8004878:	4b5f      	ldr	r3, [pc, #380]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004880:	ee17 2a90 	vmov	r2, s15
 8004884:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004886:	2200      	movs	r2, #0
 8004888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800488c:	485b      	ldr	r0, [pc, #364]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800488e:	f003 fdb7 	bl	8008400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004892:	2200      	movs	r2, #0
 8004894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004898:	4858      	ldr	r0, [pc, #352]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800489a:	f003 fdb1 	bl	8008400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800489e:	2200      	movs	r2, #0
 80048a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048a4:	4856      	ldr	r0, [pc, #344]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048a6:	f003 fdab 	bl	8008400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	4854      	ldr	r0, [pc, #336]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048b0:	f003 fda6 	bl	8008400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048ba:	4851      	ldr	r0, [pc, #324]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048bc:	f003 fda0 	bl	8008400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80048c0:	2200      	movs	r2, #0
 80048c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048c6:	484e      	ldr	r0, [pc, #312]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048c8:	f003 fd9a 	bl	8008400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80048cc:	2200      	movs	r2, #0
 80048ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048d2:	484b      	ldr	r0, [pc, #300]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048d4:	f003 fd94 	bl	8008400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80048d8:	2200      	movs	r2, #0
 80048da:	2180      	movs	r1, #128	; 0x80
 80048dc:	4848      	ldr	r0, [pc, #288]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048de:	f003 fd8f 	bl	8008400 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80048e4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80048e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	dd06      	ble.n	8004900 <HAL_TIM_PeriodElapsedCallback+0x200>
 80048f2:	2201      	movs	r2, #1
 80048f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048f8:	4840      	ldr	r0, [pc, #256]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80048fa:	f003 fd81 	bl	8008400 <HAL_GPIO_WritePin>
 80048fe:	e00d      	b.n	800491c <HAL_TIM_PeriodElapsedCallback+0x21c>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004900:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004902:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004906:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d505      	bpl.n	800491c <HAL_TIM_PeriodElapsedCallback+0x21c>
 8004910:	2201      	movs	r2, #1
 8004912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004916:	4839      	ldr	r0, [pc, #228]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004918:	f003 fd72 	bl	8008400 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800491e:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8004922:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492a:	dd06      	ble.n	800493a <HAL_TIM_PeriodElapsedCallback+0x23a>
 800492c:	2201      	movs	r2, #1
 800492e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004932:	4833      	ldr	r0, [pc, #204]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004934:	f003 fd64 	bl	8008400 <HAL_GPIO_WritePin>
 8004938:	e00c      	b.n	8004954 <HAL_TIM_PeriodElapsedCallback+0x254>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800493a:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800493c:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8004940:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	d504      	bpl.n	8004954 <HAL_TIM_PeriodElapsedCallback+0x254>
 800494a:	2201      	movs	r2, #1
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	482c      	ldr	r0, [pc, #176]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004950:	f003 fd56 	bl	8008400 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004956:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 800495a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	dd06      	ble.n	8004972 <HAL_TIM_PeriodElapsedCallback+0x272>
 8004964:	2201      	movs	r2, #1
 8004966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800496a:	4825      	ldr	r0, [pc, #148]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800496c:	f003 fd48 	bl	8008400 <HAL_GPIO_WritePin>
 8004970:	e00d      	b.n	800498e <HAL_TIM_PeriodElapsedCallback+0x28e>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004974:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004978:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800497c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004980:	d505      	bpl.n	800498e <HAL_TIM_PeriodElapsedCallback+0x28e>
 8004982:	2201      	movs	r2, #1
 8004984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004988:	481d      	ldr	r0, [pc, #116]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800498a:	f003 fd39 	bl	8008400 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004990:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004994:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	dd32      	ble.n	8004a04 <HAL_TIM_PeriodElapsedCallback+0x304>
 800499e:	2201      	movs	r2, #1
 80049a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049a4:	4816      	ldr	r0, [pc, #88]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80049a6:	f003 fd2b 	bl	8008400 <HAL_GPIO_WritePin>
 80049aa:	e038      	b.n	8004a1e <HAL_TIM_PeriodElapsedCallback+0x31e>
 80049ac:	f3af 8000 	nop.w
 80049b0:	7a743a64 	.word	0x7a743a64
 80049b4:	3fc38dde 	.word	0x3fc38dde
 80049b8:	66b1e5c1 	.word	0x66b1e5c1
 80049bc:	3fc39064 	.word	0x3fc39064
 80049c0:	3f2d3c79 	.word	0x3f2d3c79
 80049c4:	3fc39570 	.word	0x3fc39570
 80049c8:	b9dc2f40 	.word	0xb9dc2f40
 80049cc:	3fc3d230 	.word	0x3fc3d230
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	24000f68 	.word	0x24000f68
 80049d8:	24000f60 	.word	0x24000f60
 80049dc:	24000f70 	.word	0x24000f70
 80049e0:	24000000 	.word	0x24000000
 80049e4:	240003fc 	.word	0x240003fc
 80049e8:	240002cc 	.word	0x240002cc
 80049ec:	24000448 	.word	0x24000448
 80049f0:	24000280 	.word	0x24000280
 80049f4:	24000364 	.word	0x24000364
 80049f8:	240003b0 	.word	0x240003b0
 80049fc:	58020400 	.word	0x58020400
 8004a00:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004a04:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a06:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004a0a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d504      	bpl.n	8004a1e <HAL_TIM_PeriodElapsedCallback+0x31e>
 8004a14:	2201      	movs	r2, #1
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	4829      	ldr	r0, [pc, #164]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004a1a:	f003 fcf1 	bl	8008400 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004a1e:	4b27      	ldr	r3, [pc, #156]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a20:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004a24:	4b25      	ldr	r3, [pc, #148]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a26:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004a2a:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004a2e:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a30:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004a34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a3a:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004a3e:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004a42:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004a46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004a4c:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a52:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004a56:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a58:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004a5c:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a62:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004a66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a6c:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004a70:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004a74:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004a78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004a7e:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004a82:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a84:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a8a:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004a8e:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel );
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a94:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004a98:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a9e:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004aa2:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004aa6:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004aaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8004ab0:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	24000000 	.word	0x24000000
 8004ac0:	58021000 	.word	0x58021000
 8004ac4:	24000f80 	.word	0x24000f80
 8004ac8:	24000f78 	.word	0x24000f78
 8004acc:	24000f88 	.word	0x24000f88

08004ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ad4:	f7ff fd9c 	bl	8004610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ad8:	480c      	ldr	r0, [pc, #48]	; (8004b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ada:	490d      	ldr	r1, [pc, #52]	; (8004b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ae0:	e002      	b.n	8004ae8 <LoopCopyDataInit>

08004ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ae6:	3304      	adds	r3, #4

08004ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aec:	d3f9      	bcc.n	8004ae2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aee:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004af0:	4c0a      	ldr	r4, [pc, #40]	; (8004b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004af4:	e001      	b.n	8004afa <LoopFillZerobss>

08004af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004af8:	3204      	adds	r2, #4

08004afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004afc:	d3fb      	bcc.n	8004af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004afe:	f009 fd2f 	bl	800e560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b02:	f7fb ff1b 	bl	800093c <main>
  bx  lr
 8004b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b08:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004b0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004b10:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8004b14:	0800ebf8 	.word	0x0800ebf8
  ldr r2, =_sbss
 8004b18:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8004b1c:	24001020 	.word	0x24001020

08004b20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b20:	e7fe      	b.n	8004b20 <ADC3_IRQHandler>
	...

08004b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b2a:	2003      	movs	r0, #3
 8004b2c:	f000 f980 	bl	8004e30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b30:	f004 fa42 	bl	8008fb8 <HAL_RCC_GetSysClockFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_Init+0x68>)
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	4913      	ldr	r1, [pc, #76]	; (8004b90 <HAL_Init+0x6c>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <HAL_Init+0x68>)
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	4a0e      	ldr	r2, [pc, #56]	; (8004b90 <HAL_Init+0x6c>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
 8004b64:	4a0b      	ldr	r2, [pc, #44]	; (8004b94 <HAL_Init+0x70>)
 8004b66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b68:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <HAL_Init+0x74>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b6e:	200f      	movs	r0, #15
 8004b70:	f000 f814 	bl	8004b9c <HAL_InitTick>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e002      	b.n	8004b84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004b7e:	f7ff f957 	bl	8003e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	0800eba4 	.word	0x0800eba4
 8004b94:	240001a4 	.word	0x240001a4
 8004b98:	240001a0 	.word	0x240001a0

08004b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ba4:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_InitTick+0x60>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e021      	b.n	8004bf4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004bb0:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <HAL_InitTick+0x64>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <HAL_InitTick+0x60>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f973 	bl	8004eb2 <HAL_SYSTICK_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e00e      	b.n	8004bf4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b0f      	cmp	r3, #15
 8004bda:	d80a      	bhi.n	8004bf2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bdc:	2200      	movs	r2, #0
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	f000 f92f 	bl	8004e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004be8:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <HAL_InitTick+0x68>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	240001ac 	.word	0x240001ac
 8004c00:	240001a0 	.word	0x240001a0
 8004c04:	240001a8 	.word	0x240001a8

08004c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_IncTick+0x20>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_IncTick+0x24>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4413      	add	r3, r2
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_IncTick+0x24>)
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	240001ac 	.word	0x240001ac
 8004c2c:	2400100c 	.word	0x2400100c

08004c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return uwTick;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_GetTick+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2400100c 	.word	0x2400100c

08004c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <__NVIC_SetPriorityGrouping+0x40>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c64:	4013      	ands	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <__NVIC_SetPriorityGrouping+0x44>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <__NVIC_SetPriorityGrouping+0x40>)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	60d3      	str	r3, [r2, #12]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	e000ed00 	.word	0xe000ed00
 8004c8c:	05fa0000 	.word	0x05fa0000

08004c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	f003 0307 	and.w	r3, r3, #7
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	e000ed00 	.word	0xe000ed00

08004cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	db0b      	blt.n	8004cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	4907      	ldr	r1, [pc, #28]	; (8004ce4 <__NVIC_EnableIRQ+0x38>)
 8004cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2001      	movs	r0, #1
 8004cce:	fa00 f202 	lsl.w	r2, r0, r2
 8004cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	e000e100 	.word	0xe000e100

08004ce8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	db12      	blt.n	8004d20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	f003 021f 	and.w	r2, r3, #31
 8004d00:	490a      	ldr	r1, [pc, #40]	; (8004d2c <__NVIC_DisableIRQ+0x44>)
 8004d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2001      	movs	r0, #1
 8004d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0e:	3320      	adds	r3, #32
 8004d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d14:	f3bf 8f4f 	dsb	sy
}
 8004d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d1a:	f3bf 8f6f 	isb	sy
}
 8004d1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	e000e100 	.word	0xe000e100

08004d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	6039      	str	r1, [r7, #0]
 8004d3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	db0a      	blt.n	8004d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	490c      	ldr	r1, [pc, #48]	; (8004d7c <__NVIC_SetPriority+0x4c>)
 8004d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d4e:	0112      	lsls	r2, r2, #4
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	440b      	add	r3, r1
 8004d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d58:	e00a      	b.n	8004d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	4908      	ldr	r1, [pc, #32]	; (8004d80 <__NVIC_SetPriority+0x50>)
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	3b04      	subs	r3, #4
 8004d68:	0112      	lsls	r2, r2, #4
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	761a      	strb	r2, [r3, #24]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000e100 	.word	0xe000e100
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b089      	sub	sp, #36	; 0x24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f1c3 0307 	rsb	r3, r3, #7
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	bf28      	it	cs
 8004da2:	2304      	movcs	r3, #4
 8004da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3304      	adds	r3, #4
 8004daa:	2b06      	cmp	r3, #6
 8004dac:	d902      	bls.n	8004db4 <NVIC_EncodePriority+0x30>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3b03      	subs	r3, #3
 8004db2:	e000      	b.n	8004db6 <NVIC_EncodePriority+0x32>
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43da      	mvns	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd6:	43d9      	mvns	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ddc:	4313      	orrs	r3, r2
         );
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3724      	adds	r7, #36	; 0x24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dfc:	d301      	bcc.n	8004e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e00f      	b.n	8004e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <SysTick_Config+0x40>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e0a:	210f      	movs	r1, #15
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	f7ff ff8e 	bl	8004d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <SysTick_Config+0x40>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e1a:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <SysTick_Config+0x40>)
 8004e1c:	2207      	movs	r2, #7
 8004e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	e000e010 	.word	0xe000e010

08004e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff05 	bl	8004c48 <__NVIC_SetPriorityGrouping>
}
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e54:	f7ff ff1c 	bl	8004c90 <__NVIC_GetPriorityGrouping>
 8004e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	6978      	ldr	r0, [r7, #20]
 8004e60:	f7ff ff90 	bl	8004d84 <NVIC_EncodePriority>
 8004e64:	4602      	mov	r2, r0
 8004e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff ff5f 	bl	8004d30 <__NVIC_SetPriority>
}
 8004e72:	bf00      	nop
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	4603      	mov	r3, r0
 8004e82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff ff0f 	bl	8004cac <__NVIC_EnableIRQ>
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff ff1f 	bl	8004ce8 <__NVIC_DisableIRQ>
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff96 	bl	8004dec <SysTick_Config>
 8004ec0:	4603      	mov	r3, r0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ed4:	f7ff feac 	bl	8004c30 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e314      	b.n	800550e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a66      	ldr	r2, [pc, #408]	; (8005084 <HAL_DMA_Init+0x1b8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d04a      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a65      	ldr	r2, [pc, #404]	; (8005088 <HAL_DMA_Init+0x1bc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d045      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a63      	ldr	r2, [pc, #396]	; (800508c <HAL_DMA_Init+0x1c0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d040      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a62      	ldr	r2, [pc, #392]	; (8005090 <HAL_DMA_Init+0x1c4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d03b      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a60      	ldr	r2, [pc, #384]	; (8005094 <HAL_DMA_Init+0x1c8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d036      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5f      	ldr	r2, [pc, #380]	; (8005098 <HAL_DMA_Init+0x1cc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d031      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5d      	ldr	r2, [pc, #372]	; (800509c <HAL_DMA_Init+0x1d0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02c      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a5c      	ldr	r2, [pc, #368]	; (80050a0 <HAL_DMA_Init+0x1d4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d027      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a5a      	ldr	r2, [pc, #360]	; (80050a4 <HAL_DMA_Init+0x1d8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d022      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a59      	ldr	r2, [pc, #356]	; (80050a8 <HAL_DMA_Init+0x1dc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d01d      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a57      	ldr	r2, [pc, #348]	; (80050ac <HAL_DMA_Init+0x1e0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d018      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a56      	ldr	r2, [pc, #344]	; (80050b0 <HAL_DMA_Init+0x1e4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a54      	ldr	r2, [pc, #336]	; (80050b4 <HAL_DMA_Init+0x1e8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a53      	ldr	r2, [pc, #332]	; (80050b8 <HAL_DMA_Init+0x1ec>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a51      	ldr	r2, [pc, #324]	; (80050bc <HAL_DMA_Init+0x1f0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_DMA_Init+0xb8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a50      	ldr	r2, [pc, #320]	; (80050c0 <HAL_DMA_Init+0x1f4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <HAL_DMA_Init+0xbc>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_DMA_Init+0xbe>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 813c 	beq.w	8005208 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a37      	ldr	r2, [pc, #220]	; (8005084 <HAL_DMA_Init+0x1b8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d04a      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a36      	ldr	r2, [pc, #216]	; (8005088 <HAL_DMA_Init+0x1bc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d045      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a34      	ldr	r2, [pc, #208]	; (800508c <HAL_DMA_Init+0x1c0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d040      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a33      	ldr	r2, [pc, #204]	; (8005090 <HAL_DMA_Init+0x1c4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d03b      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a31      	ldr	r2, [pc, #196]	; (8005094 <HAL_DMA_Init+0x1c8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d036      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a30      	ldr	r2, [pc, #192]	; (8005098 <HAL_DMA_Init+0x1cc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d031      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	; (800509c <HAL_DMA_Init+0x1d0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d02c      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2d      	ldr	r2, [pc, #180]	; (80050a0 <HAL_DMA_Init+0x1d4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d027      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <HAL_DMA_Init+0x1d8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d022      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <HAL_DMA_Init+0x1dc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01d      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a28      	ldr	r2, [pc, #160]	; (80050ac <HAL_DMA_Init+0x1e0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d018      	beq.n	8005040 <HAL_DMA_Init+0x174>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <HAL_DMA_Init+0x1e4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d013      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_DMA_Init+0x1e8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00e      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <HAL_DMA_Init+0x1ec>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d009      	beq.n	8005040 <HAL_DMA_Init+0x174>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a22      	ldr	r2, [pc, #136]	; (80050bc <HAL_DMA_Init+0x1f0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <HAL_DMA_Init+0x174>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a21      	ldr	r2, [pc, #132]	; (80050c0 <HAL_DMA_Init+0x1f4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d108      	bne.n	8005052 <HAL_DMA_Init+0x186>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e007      	b.n	8005062 <HAL_DMA_Init+0x196>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005062:	e02f      	b.n	80050c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005064:	f7ff fde4 	bl	8004c30 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b05      	cmp	r3, #5
 8005070:	d928      	bls.n	80050c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2203      	movs	r2, #3
 800507c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e244      	b.n	800550e <HAL_DMA_Init+0x642>
 8005084:	40020010 	.word	0x40020010
 8005088:	40020028 	.word	0x40020028
 800508c:	40020040 	.word	0x40020040
 8005090:	40020058 	.word	0x40020058
 8005094:	40020070 	.word	0x40020070
 8005098:	40020088 	.word	0x40020088
 800509c:	400200a0 	.word	0x400200a0
 80050a0:	400200b8 	.word	0x400200b8
 80050a4:	40020410 	.word	0x40020410
 80050a8:	40020428 	.word	0x40020428
 80050ac:	40020440 	.word	0x40020440
 80050b0:	40020458 	.word	0x40020458
 80050b4:	40020470 	.word	0x40020470
 80050b8:	40020488 	.word	0x40020488
 80050bc:	400204a0 	.word	0x400204a0
 80050c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1c8      	bne.n	8005064 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4b84      	ldr	r3, [pc, #528]	; (80052f0 <HAL_DMA_Init+0x424>)
 80050de:	4013      	ands	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005102:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	2b04      	cmp	r3, #4
 8005116:	d107      	bne.n	8005128 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	4313      	orrs	r3, r2
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b28      	cmp	r3, #40	; 0x28
 800512e:	d903      	bls.n	8005138 <HAL_DMA_Init+0x26c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b2e      	cmp	r3, #46	; 0x2e
 8005136:	d91f      	bls.n	8005178 <HAL_DMA_Init+0x2ac>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b3e      	cmp	r3, #62	; 0x3e
 800513e:	d903      	bls.n	8005148 <HAL_DMA_Init+0x27c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b42      	cmp	r3, #66	; 0x42
 8005146:	d917      	bls.n	8005178 <HAL_DMA_Init+0x2ac>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b46      	cmp	r3, #70	; 0x46
 800514e:	d903      	bls.n	8005158 <HAL_DMA_Init+0x28c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b48      	cmp	r3, #72	; 0x48
 8005156:	d90f      	bls.n	8005178 <HAL_DMA_Init+0x2ac>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b4e      	cmp	r3, #78	; 0x4e
 800515e:	d903      	bls.n	8005168 <HAL_DMA_Init+0x29c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b52      	cmp	r3, #82	; 0x52
 8005166:	d907      	bls.n	8005178 <HAL_DMA_Init+0x2ac>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b73      	cmp	r3, #115	; 0x73
 800516e:	d905      	bls.n	800517c <HAL_DMA_Init+0x2b0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b77      	cmp	r3, #119	; 0x77
 8005176:	d801      	bhi.n	800517c <HAL_DMA_Init+0x2b0>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_DMA_Init+0x2b2>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005188:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0307 	bic.w	r3, r3, #7
 80051a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d117      	bne.n	80051e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00e      	beq.n	80051e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f002 fce6 	bl	8007b98 <DMA_CheckFifoParam>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2240      	movs	r2, #64	; 0x40
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e194      	b.n	800550e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f002 fc21 	bl	8007a34 <DMA_CalcBaseAndBitshift>
 80051f2:	4603      	mov	r3, r0
 80051f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	223f      	movs	r2, #63	; 0x3f
 8005200:	409a      	lsls	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	e0ca      	b.n	800539e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a39      	ldr	r2, [pc, #228]	; (80052f4 <HAL_DMA_Init+0x428>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d022      	beq.n	8005258 <HAL_DMA_Init+0x38c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a38      	ldr	r2, [pc, #224]	; (80052f8 <HAL_DMA_Init+0x42c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d01d      	beq.n	8005258 <HAL_DMA_Init+0x38c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a36      	ldr	r2, [pc, #216]	; (80052fc <HAL_DMA_Init+0x430>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d018      	beq.n	8005258 <HAL_DMA_Init+0x38c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a35      	ldr	r2, [pc, #212]	; (8005300 <HAL_DMA_Init+0x434>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <HAL_DMA_Init+0x38c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a33      	ldr	r2, [pc, #204]	; (8005304 <HAL_DMA_Init+0x438>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00e      	beq.n	8005258 <HAL_DMA_Init+0x38c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a32      	ldr	r2, [pc, #200]	; (8005308 <HAL_DMA_Init+0x43c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d009      	beq.n	8005258 <HAL_DMA_Init+0x38c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a30      	ldr	r2, [pc, #192]	; (800530c <HAL_DMA_Init+0x440>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <HAL_DMA_Init+0x38c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <HAL_DMA_Init+0x444>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <HAL_DMA_Init+0x390>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_DMA_Init+0x392>
 800525c:	2300      	movs	r3, #0
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8094 	beq.w	800538c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <HAL_DMA_Init+0x428>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d021      	beq.n	80052b2 <HAL_DMA_Init+0x3e6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <HAL_DMA_Init+0x42c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d01c      	beq.n	80052b2 <HAL_DMA_Init+0x3e6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_DMA_Init+0x430>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d017      	beq.n	80052b2 <HAL_DMA_Init+0x3e6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_DMA_Init+0x434>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d012      	beq.n	80052b2 <HAL_DMA_Init+0x3e6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <HAL_DMA_Init+0x438>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_DMA_Init+0x3e6>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_DMA_Init+0x43c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d008      	beq.n	80052b2 <HAL_DMA_Init+0x3e6>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a19      	ldr	r2, [pc, #100]	; (800530c <HAL_DMA_Init+0x440>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <HAL_DMA_Init+0x3e6>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_DMA_Init+0x444>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_DMA_Init+0x448>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d01d      	beq.n	8005318 <HAL_DMA_Init+0x44c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b80      	cmp	r3, #128	; 0x80
 80052e2:	d102      	bne.n	80052ea <HAL_DMA_Init+0x41e>
 80052e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052e8:	e017      	b.n	800531a <HAL_DMA_Init+0x44e>
 80052ea:	2300      	movs	r3, #0
 80052ec:	e015      	b.n	800531a <HAL_DMA_Init+0x44e>
 80052ee:	bf00      	nop
 80052f0:	fe10803f 	.word	0xfe10803f
 80052f4:	58025408 	.word	0x58025408
 80052f8:	5802541c 	.word	0x5802541c
 80052fc:	58025430 	.word	0x58025430
 8005300:	58025444 	.word	0x58025444
 8005304:	58025458 	.word	0x58025458
 8005308:	5802546c 	.word	0x5802546c
 800530c:	58025480 	.word	0x58025480
 8005310:	58025494 	.word	0x58025494
 8005314:	fffe000f 	.word	0xfffe000f
 8005318:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005330:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005348:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	4b6e      	ldr	r3, [pc, #440]	; (8005518 <HAL_DMA_Init+0x64c>)
 8005360:	4413      	add	r3, r2
 8005362:	4a6e      	ldr	r2, [pc, #440]	; (800551c <HAL_DMA_Init+0x650>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	009a      	lsls	r2, r3, #2
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f002 fb5f 	bl	8007a34 <DMA_CalcBaseAndBitshift>
 8005376:	4603      	mov	r3, r0
 8005378:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2201      	movs	r2, #1
 8005384:	409a      	lsls	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e008      	b.n	800539e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2203      	movs	r2, #3
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0b7      	b.n	800550e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a5f      	ldr	r2, [pc, #380]	; (8005520 <HAL_DMA_Init+0x654>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d072      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a5d      	ldr	r2, [pc, #372]	; (8005524 <HAL_DMA_Init+0x658>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d06d      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a5c      	ldr	r2, [pc, #368]	; (8005528 <HAL_DMA_Init+0x65c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d068      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5a      	ldr	r2, [pc, #360]	; (800552c <HAL_DMA_Init+0x660>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d063      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a59      	ldr	r2, [pc, #356]	; (8005530 <HAL_DMA_Init+0x664>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d05e      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a57      	ldr	r2, [pc, #348]	; (8005534 <HAL_DMA_Init+0x668>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d059      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a56      	ldr	r2, [pc, #344]	; (8005538 <HAL_DMA_Init+0x66c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d054      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a54      	ldr	r2, [pc, #336]	; (800553c <HAL_DMA_Init+0x670>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d04f      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a53      	ldr	r2, [pc, #332]	; (8005540 <HAL_DMA_Init+0x674>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d04a      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a51      	ldr	r2, [pc, #324]	; (8005544 <HAL_DMA_Init+0x678>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d045      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a50      	ldr	r2, [pc, #320]	; (8005548 <HAL_DMA_Init+0x67c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d040      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a4e      	ldr	r2, [pc, #312]	; (800554c <HAL_DMA_Init+0x680>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d03b      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a4d      	ldr	r2, [pc, #308]	; (8005550 <HAL_DMA_Init+0x684>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d036      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a4b      	ldr	r2, [pc, #300]	; (8005554 <HAL_DMA_Init+0x688>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d031      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a4a      	ldr	r2, [pc, #296]	; (8005558 <HAL_DMA_Init+0x68c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d02c      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a48      	ldr	r2, [pc, #288]	; (800555c <HAL_DMA_Init+0x690>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d027      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a47      	ldr	r2, [pc, #284]	; (8005560 <HAL_DMA_Init+0x694>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d022      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a45      	ldr	r2, [pc, #276]	; (8005564 <HAL_DMA_Init+0x698>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01d      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a44      	ldr	r2, [pc, #272]	; (8005568 <HAL_DMA_Init+0x69c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d018      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a42      	ldr	r2, [pc, #264]	; (800556c <HAL_DMA_Init+0x6a0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a41      	ldr	r2, [pc, #260]	; (8005570 <HAL_DMA_Init+0x6a4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a3f      	ldr	r2, [pc, #252]	; (8005574 <HAL_DMA_Init+0x6a8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <HAL_DMA_Init+0x6ac>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_DMA_Init+0x5c2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3c      	ldr	r2, [pc, #240]	; (800557c <HAL_DMA_Init+0x6b0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <HAL_DMA_Init+0x5c6>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <HAL_DMA_Init+0x5c8>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d032      	beq.n	80054fe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 fbf9 	bl	8007c90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d102      	bne.n	80054ac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d010      	beq.n	80054ec <HAL_DMA_Init+0x620>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d80c      	bhi.n	80054ec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f002 fc76 	bl	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	e008      	b.n	80054fe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	a7fdabf8 	.word	0xa7fdabf8
 800551c:	cccccccd 	.word	0xcccccccd
 8005520:	40020010 	.word	0x40020010
 8005524:	40020028 	.word	0x40020028
 8005528:	40020040 	.word	0x40020040
 800552c:	40020058 	.word	0x40020058
 8005530:	40020070 	.word	0x40020070
 8005534:	40020088 	.word	0x40020088
 8005538:	400200a0 	.word	0x400200a0
 800553c:	400200b8 	.word	0x400200b8
 8005540:	40020410 	.word	0x40020410
 8005544:	40020428 	.word	0x40020428
 8005548:	40020440 	.word	0x40020440
 800554c:	40020458 	.word	0x40020458
 8005550:	40020470 	.word	0x40020470
 8005554:	40020488 	.word	0x40020488
 8005558:	400204a0 	.word	0x400204a0
 800555c:	400204b8 	.word	0x400204b8
 8005560:	58025408 	.word	0x58025408
 8005564:	5802541c 	.word	0x5802541c
 8005568:	58025430 	.word	0x58025430
 800556c:	58025444 	.word	0x58025444
 8005570:	58025458 	.word	0x58025458
 8005574:	5802546c 	.word	0x5802546c
 8005578:	58025480 	.word	0x58025480
 800557c:	58025494 	.word	0x58025494

08005580 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e1a8      	b.n	80058e4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a82      	ldr	r2, [pc, #520]	; (80057a0 <HAL_DMA_DeInit+0x220>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d04a      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a80      	ldr	r2, [pc, #512]	; (80057a4 <HAL_DMA_DeInit+0x224>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d045      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a7f      	ldr	r2, [pc, #508]	; (80057a8 <HAL_DMA_DeInit+0x228>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d040      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a7d      	ldr	r2, [pc, #500]	; (80057ac <HAL_DMA_DeInit+0x22c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d03b      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7c      	ldr	r2, [pc, #496]	; (80057b0 <HAL_DMA_DeInit+0x230>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d036      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a7a      	ldr	r2, [pc, #488]	; (80057b4 <HAL_DMA_DeInit+0x234>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d031      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a79      	ldr	r2, [pc, #484]	; (80057b8 <HAL_DMA_DeInit+0x238>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d02c      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a77      	ldr	r2, [pc, #476]	; (80057bc <HAL_DMA_DeInit+0x23c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d027      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a76      	ldr	r2, [pc, #472]	; (80057c0 <HAL_DMA_DeInit+0x240>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d022      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a74      	ldr	r2, [pc, #464]	; (80057c4 <HAL_DMA_DeInit+0x244>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01d      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a73      	ldr	r2, [pc, #460]	; (80057c8 <HAL_DMA_DeInit+0x248>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d018      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a71      	ldr	r2, [pc, #452]	; (80057cc <HAL_DMA_DeInit+0x24c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a70      	ldr	r2, [pc, #448]	; (80057d0 <HAL_DMA_DeInit+0x250>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6e      	ldr	r2, [pc, #440]	; (80057d4 <HAL_DMA_DeInit+0x254>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6d      	ldr	r2, [pc, #436]	; (80057d8 <HAL_DMA_DeInit+0x258>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_DMA_DeInit+0xb2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a6b      	ldr	r2, [pc, #428]	; (80057dc <HAL_DMA_DeInit+0x25c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d108      	bne.n	8005644 <HAL_DMA_DeInit+0xc4>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e007      	b.n	8005654 <HAL_DMA_DeInit+0xd4>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a51      	ldr	r2, [pc, #324]	; (80057a0 <HAL_DMA_DeInit+0x220>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d04a      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a50      	ldr	r2, [pc, #320]	; (80057a4 <HAL_DMA_DeInit+0x224>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d045      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a4e      	ldr	r2, [pc, #312]	; (80057a8 <HAL_DMA_DeInit+0x228>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d040      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a4d      	ldr	r2, [pc, #308]	; (80057ac <HAL_DMA_DeInit+0x22c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d03b      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4b      	ldr	r2, [pc, #300]	; (80057b0 <HAL_DMA_DeInit+0x230>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d036      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4a      	ldr	r2, [pc, #296]	; (80057b4 <HAL_DMA_DeInit+0x234>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d031      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a48      	ldr	r2, [pc, #288]	; (80057b8 <HAL_DMA_DeInit+0x238>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d02c      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a47      	ldr	r2, [pc, #284]	; (80057bc <HAL_DMA_DeInit+0x23c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d027      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a45      	ldr	r2, [pc, #276]	; (80057c0 <HAL_DMA_DeInit+0x240>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d022      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a44      	ldr	r2, [pc, #272]	; (80057c4 <HAL_DMA_DeInit+0x244>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d01d      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a42      	ldr	r2, [pc, #264]	; (80057c8 <HAL_DMA_DeInit+0x248>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a41      	ldr	r2, [pc, #260]	; (80057cc <HAL_DMA_DeInit+0x24c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3f      	ldr	r2, [pc, #252]	; (80057d0 <HAL_DMA_DeInit+0x250>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3e      	ldr	r2, [pc, #248]	; (80057d4 <HAL_DMA_DeInit+0x254>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <HAL_DMA_DeInit+0x258>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_DMA_DeInit+0x174>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3b      	ldr	r2, [pc, #236]	; (80057dc <HAL_DMA_DeInit+0x25c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <HAL_DMA_DeInit+0x178>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_DMA_DeInit+0x17a>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d025      	beq.n	800574a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2221      	movs	r2, #33	; 0x21
 800572c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f002 f980 	bl	8007a34 <DMA_CalcBaseAndBitshift>
 8005734:	4603      	mov	r3, r0
 8005736:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	223f      	movs	r2, #63	; 0x3f
 8005742:	409a      	lsls	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	e081      	b.n	800584e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <HAL_DMA_DeInit+0x260>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d022      	beq.n	800579a <HAL_DMA_DeInit+0x21a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a22      	ldr	r2, [pc, #136]	; (80057e4 <HAL_DMA_DeInit+0x264>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01d      	beq.n	800579a <HAL_DMA_DeInit+0x21a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a21      	ldr	r2, [pc, #132]	; (80057e8 <HAL_DMA_DeInit+0x268>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d018      	beq.n	800579a <HAL_DMA_DeInit+0x21a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1f      	ldr	r2, [pc, #124]	; (80057ec <HAL_DMA_DeInit+0x26c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <HAL_DMA_DeInit+0x21a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1e      	ldr	r2, [pc, #120]	; (80057f0 <HAL_DMA_DeInit+0x270>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00e      	beq.n	800579a <HAL_DMA_DeInit+0x21a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <HAL_DMA_DeInit+0x274>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_DMA_DeInit+0x21a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <HAL_DMA_DeInit+0x278>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <HAL_DMA_DeInit+0x21a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a19      	ldr	r2, [pc, #100]	; (80057fc <HAL_DMA_DeInit+0x27c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d132      	bne.n	8005800 <HAL_DMA_DeInit+0x280>
 800579a:	2301      	movs	r3, #1
 800579c:	e031      	b.n	8005802 <HAL_DMA_DeInit+0x282>
 800579e:	bf00      	nop
 80057a0:	40020010 	.word	0x40020010
 80057a4:	40020028 	.word	0x40020028
 80057a8:	40020040 	.word	0x40020040
 80057ac:	40020058 	.word	0x40020058
 80057b0:	40020070 	.word	0x40020070
 80057b4:	40020088 	.word	0x40020088
 80057b8:	400200a0 	.word	0x400200a0
 80057bc:	400200b8 	.word	0x400200b8
 80057c0:	40020410 	.word	0x40020410
 80057c4:	40020428 	.word	0x40020428
 80057c8:	40020440 	.word	0x40020440
 80057cc:	40020458 	.word	0x40020458
 80057d0:	40020470 	.word	0x40020470
 80057d4:	40020488 	.word	0x40020488
 80057d8:	400204a0 	.word	0x400204a0
 80057dc:	400204b8 	.word	0x400204b8
 80057e0:	58025408 	.word	0x58025408
 80057e4:	5802541c 	.word	0x5802541c
 80057e8:	58025430 	.word	0x58025430
 80057ec:	58025444 	.word	0x58025444
 80057f0:	58025458 	.word	0x58025458
 80057f4:	5802546c 	.word	0x5802546c
 80057f8:	58025480 	.word	0x58025480
 80057fc:	58025494 	.word	0x58025494
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d021      	beq.n	800584a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2200      	movs	r2, #0
 800582c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f002 f900 	bl	8007a34 <DMA_CalcBaseAndBitshift>
 8005834:	4603      	mov	r3, r0
 8005836:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2201      	movs	r2, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	605a      	str	r2, [r3, #4]
 8005848:	e001      	b.n	800584e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e04a      	b.n	80058e4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f002 fa1e 	bl	8007c90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800586c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <HAL_DMA_DeInit+0x316>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b08      	cmp	r3, #8
 800587c:	d80b      	bhi.n	8005896 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f002 faa0 	bl	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005894:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e226      	b.n	8005d56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_DMA_Start_IT+0x2a>
 8005912:	2302      	movs	r3, #2
 8005914:	e21f      	b.n	8005d56 <HAL_DMA_Start_IT+0x46a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	f040 820a 	bne.w	8005d40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a68      	ldr	r2, [pc, #416]	; (8005ae0 <HAL_DMA_Start_IT+0x1f4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d04a      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a66      	ldr	r2, [pc, #408]	; (8005ae4 <HAL_DMA_Start_IT+0x1f8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d045      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a65      	ldr	r2, [pc, #404]	; (8005ae8 <HAL_DMA_Start_IT+0x1fc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d040      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a63      	ldr	r2, [pc, #396]	; (8005aec <HAL_DMA_Start_IT+0x200>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d03b      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a62      	ldr	r2, [pc, #392]	; (8005af0 <HAL_DMA_Start_IT+0x204>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d036      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a60      	ldr	r2, [pc, #384]	; (8005af4 <HAL_DMA_Start_IT+0x208>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d031      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5f      	ldr	r2, [pc, #380]	; (8005af8 <HAL_DMA_Start_IT+0x20c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d02c      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a5d      	ldr	r2, [pc, #372]	; (8005afc <HAL_DMA_Start_IT+0x210>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d027      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a5c      	ldr	r2, [pc, #368]	; (8005b00 <HAL_DMA_Start_IT+0x214>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d022      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5a      	ldr	r2, [pc, #360]	; (8005b04 <HAL_DMA_Start_IT+0x218>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01d      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a59      	ldr	r2, [pc, #356]	; (8005b08 <HAL_DMA_Start_IT+0x21c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d018      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a57      	ldr	r2, [pc, #348]	; (8005b0c <HAL_DMA_Start_IT+0x220>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a56      	ldr	r2, [pc, #344]	; (8005b10 <HAL_DMA_Start_IT+0x224>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a54      	ldr	r2, [pc, #336]	; (8005b14 <HAL_DMA_Start_IT+0x228>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a53      	ldr	r2, [pc, #332]	; (8005b18 <HAL_DMA_Start_IT+0x22c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_DMA_Start_IT+0xee>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a51      	ldr	r2, [pc, #324]	; (8005b1c <HAL_DMA_Start_IT+0x230>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d108      	bne.n	80059ec <HAL_DMA_Start_IT+0x100>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e007      	b.n	80059fc <HAL_DMA_Start_IT+0x110>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f001 fe6a 	bl	80076dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a34      	ldr	r2, [pc, #208]	; (8005ae0 <HAL_DMA_Start_IT+0x1f4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d04a      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <HAL_DMA_Start_IT+0x1f8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d045      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a31      	ldr	r2, [pc, #196]	; (8005ae8 <HAL_DMA_Start_IT+0x1fc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d040      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a30      	ldr	r2, [pc, #192]	; (8005aec <HAL_DMA_Start_IT+0x200>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d03b      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2e      	ldr	r2, [pc, #184]	; (8005af0 <HAL_DMA_Start_IT+0x204>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d036      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <HAL_DMA_Start_IT+0x208>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d031      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <HAL_DMA_Start_IT+0x20c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d02c      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <HAL_DMA_Start_IT+0x210>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d027      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <HAL_DMA_Start_IT+0x214>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d022      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <HAL_DMA_Start_IT+0x218>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d01d      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <HAL_DMA_Start_IT+0x21c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d018      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <HAL_DMA_Start_IT+0x220>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <HAL_DMA_Start_IT+0x224>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00e      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_DMA_Start_IT+0x228>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d009      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <HAL_DMA_Start_IT+0x22c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x1bc>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <HAL_DMA_Start_IT+0x230>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d101      	bne.n	8005aac <HAL_DMA_Start_IT+0x1c0>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_DMA_Start_IT+0x1c2>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d036      	beq.n	8005b20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f023 021e 	bic.w	r2, r3, #30
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0216 	orr.w	r2, r2, #22
 8005ac4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d03e      	beq.n	8005b4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0208 	orr.w	r2, r2, #8
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e035      	b.n	8005b4c <HAL_DMA_Start_IT+0x260>
 8005ae0:	40020010 	.word	0x40020010
 8005ae4:	40020028 	.word	0x40020028
 8005ae8:	40020040 	.word	0x40020040
 8005aec:	40020058 	.word	0x40020058
 8005af0:	40020070 	.word	0x40020070
 8005af4:	40020088 	.word	0x40020088
 8005af8:	400200a0 	.word	0x400200a0
 8005afc:	400200b8 	.word	0x400200b8
 8005b00:	40020410 	.word	0x40020410
 8005b04:	40020428 	.word	0x40020428
 8005b08:	40020440 	.word	0x40020440
 8005b0c:	40020458 	.word	0x40020458
 8005b10:	40020470 	.word	0x40020470
 8005b14:	40020488 	.word	0x40020488
 8005b18:	400204a0 	.word	0x400204a0
 8005b1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 020e 	bic.w	r2, r3, #14
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 020a 	orr.w	r2, r2, #10
 8005b32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0204 	orr.w	r2, r2, #4
 8005b4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a83      	ldr	r2, [pc, #524]	; (8005d60 <HAL_DMA_Start_IT+0x474>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d072      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a82      	ldr	r2, [pc, #520]	; (8005d64 <HAL_DMA_Start_IT+0x478>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d06d      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a80      	ldr	r2, [pc, #512]	; (8005d68 <HAL_DMA_Start_IT+0x47c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d068      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a7f      	ldr	r2, [pc, #508]	; (8005d6c <HAL_DMA_Start_IT+0x480>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d063      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a7d      	ldr	r2, [pc, #500]	; (8005d70 <HAL_DMA_Start_IT+0x484>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d05e      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a7c      	ldr	r2, [pc, #496]	; (8005d74 <HAL_DMA_Start_IT+0x488>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d059      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a7a      	ldr	r2, [pc, #488]	; (8005d78 <HAL_DMA_Start_IT+0x48c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d054      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a79      	ldr	r2, [pc, #484]	; (8005d7c <HAL_DMA_Start_IT+0x490>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d04f      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a77      	ldr	r2, [pc, #476]	; (8005d80 <HAL_DMA_Start_IT+0x494>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d04a      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a76      	ldr	r2, [pc, #472]	; (8005d84 <HAL_DMA_Start_IT+0x498>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d045      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a74      	ldr	r2, [pc, #464]	; (8005d88 <HAL_DMA_Start_IT+0x49c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d040      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a73      	ldr	r2, [pc, #460]	; (8005d8c <HAL_DMA_Start_IT+0x4a0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d03b      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a71      	ldr	r2, [pc, #452]	; (8005d90 <HAL_DMA_Start_IT+0x4a4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d036      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a70      	ldr	r2, [pc, #448]	; (8005d94 <HAL_DMA_Start_IT+0x4a8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d031      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a6e      	ldr	r2, [pc, #440]	; (8005d98 <HAL_DMA_Start_IT+0x4ac>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02c      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6d      	ldr	r2, [pc, #436]	; (8005d9c <HAL_DMA_Start_IT+0x4b0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d027      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6b      	ldr	r2, [pc, #428]	; (8005da0 <HAL_DMA_Start_IT+0x4b4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d022      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6a      	ldr	r2, [pc, #424]	; (8005da4 <HAL_DMA_Start_IT+0x4b8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d01d      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a68      	ldr	r2, [pc, #416]	; (8005da8 <HAL_DMA_Start_IT+0x4bc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d018      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a67      	ldr	r2, [pc, #412]	; (8005dac <HAL_DMA_Start_IT+0x4c0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a65      	ldr	r2, [pc, #404]	; (8005db0 <HAL_DMA_Start_IT+0x4c4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00e      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a64      	ldr	r2, [pc, #400]	; (8005db4 <HAL_DMA_Start_IT+0x4c8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a62      	ldr	r2, [pc, #392]	; (8005db8 <HAL_DMA_Start_IT+0x4cc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_DMA_Start_IT+0x350>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a61      	ldr	r2, [pc, #388]	; (8005dbc <HAL_DMA_Start_IT+0x4d0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d101      	bne.n	8005c40 <HAL_DMA_Start_IT+0x354>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <HAL_DMA_Start_IT+0x356>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01a      	beq.n	8005c7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a37      	ldr	r2, [pc, #220]	; (8005d60 <HAL_DMA_Start_IT+0x474>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d04a      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a36      	ldr	r2, [pc, #216]	; (8005d64 <HAL_DMA_Start_IT+0x478>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d045      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a34      	ldr	r2, [pc, #208]	; (8005d68 <HAL_DMA_Start_IT+0x47c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d040      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a33      	ldr	r2, [pc, #204]	; (8005d6c <HAL_DMA_Start_IT+0x480>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d03b      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <HAL_DMA_Start_IT+0x484>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d036      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a30      	ldr	r2, [pc, #192]	; (8005d74 <HAL_DMA_Start_IT+0x488>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d031      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a2e      	ldr	r2, [pc, #184]	; (8005d78 <HAL_DMA_Start_IT+0x48c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02c      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2d      	ldr	r2, [pc, #180]	; (8005d7c <HAL_DMA_Start_IT+0x490>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d027      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2b      	ldr	r2, [pc, #172]	; (8005d80 <HAL_DMA_Start_IT+0x494>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2a      	ldr	r2, [pc, #168]	; (8005d84 <HAL_DMA_Start_IT+0x498>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d01d      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <HAL_DMA_Start_IT+0x49c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <HAL_DMA_Start_IT+0x4a0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <HAL_DMA_Start_IT+0x4a4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <HAL_DMA_Start_IT+0x4a8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <HAL_DMA_Start_IT+0x4ac>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_DMA_Start_IT+0x430>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <HAL_DMA_Start_IT+0x4b0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <HAL_DMA_Start_IT+0x442>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e012      	b.n	8005d54 <HAL_DMA_Start_IT+0x468>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e009      	b.n	8005d54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40020010 	.word	0x40020010
 8005d64:	40020028 	.word	0x40020028
 8005d68:	40020040 	.word	0x40020040
 8005d6c:	40020058 	.word	0x40020058
 8005d70:	40020070 	.word	0x40020070
 8005d74:	40020088 	.word	0x40020088
 8005d78:	400200a0 	.word	0x400200a0
 8005d7c:	400200b8 	.word	0x400200b8
 8005d80:	40020410 	.word	0x40020410
 8005d84:	40020428 	.word	0x40020428
 8005d88:	40020440 	.word	0x40020440
 8005d8c:	40020458 	.word	0x40020458
 8005d90:	40020470 	.word	0x40020470
 8005d94:	40020488 	.word	0x40020488
 8005d98:	400204a0 	.word	0x400204a0
 8005d9c:	400204b8 	.word	0x400204b8
 8005da0:	58025408 	.word	0x58025408
 8005da4:	5802541c 	.word	0x5802541c
 8005da8:	58025430 	.word	0x58025430
 8005dac:	58025444 	.word	0x58025444
 8005db0:	58025458 	.word	0x58025458
 8005db4:	5802546c 	.word	0x5802546c
 8005db8:	58025480 	.word	0x58025480
 8005dbc:	58025494 	.word	0x58025494

08005dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005dc8:	f7fe ff32 	bl	8004c30 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e2dc      	b.n	8006392 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d008      	beq.n	8005df6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2280      	movs	r2, #128	; 0x80
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e2cd      	b.n	8006392 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a76      	ldr	r2, [pc, #472]	; (8005fd4 <HAL_DMA_Abort+0x214>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a74      	ldr	r2, [pc, #464]	; (8005fd8 <HAL_DMA_Abort+0x218>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a73      	ldr	r2, [pc, #460]	; (8005fdc <HAL_DMA_Abort+0x21c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a71      	ldr	r2, [pc, #452]	; (8005fe0 <HAL_DMA_Abort+0x220>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a70      	ldr	r2, [pc, #448]	; (8005fe4 <HAL_DMA_Abort+0x224>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a6e      	ldr	r2, [pc, #440]	; (8005fe8 <HAL_DMA_Abort+0x228>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a6d      	ldr	r2, [pc, #436]	; (8005fec <HAL_DMA_Abort+0x22c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6b      	ldr	r2, [pc, #428]	; (8005ff0 <HAL_DMA_Abort+0x230>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6a      	ldr	r2, [pc, #424]	; (8005ff4 <HAL_DMA_Abort+0x234>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a68      	ldr	r2, [pc, #416]	; (8005ff8 <HAL_DMA_Abort+0x238>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a67      	ldr	r2, [pc, #412]	; (8005ffc <HAL_DMA_Abort+0x23c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a65      	ldr	r2, [pc, #404]	; (8006000 <HAL_DMA_Abort+0x240>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a64      	ldr	r2, [pc, #400]	; (8006004 <HAL_DMA_Abort+0x244>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a62      	ldr	r2, [pc, #392]	; (8006008 <HAL_DMA_Abort+0x248>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a61      	ldr	r2, [pc, #388]	; (800600c <HAL_DMA_Abort+0x24c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_Abort+0xd6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5f      	ldr	r2, [pc, #380]	; (8006010 <HAL_DMA_Abort+0x250>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_DMA_Abort+0xda>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_DMA_Abort+0xdc>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 021e 	bic.w	r2, r2, #30
 8005eae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ebe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e00a      	b.n	8005ede <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 020e 	bic.w	r2, r2, #14
 8005ed6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3c      	ldr	r2, [pc, #240]	; (8005fd4 <HAL_DMA_Abort+0x214>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d072      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a3a      	ldr	r2, [pc, #232]	; (8005fd8 <HAL_DMA_Abort+0x218>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d06d      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a39      	ldr	r2, [pc, #228]	; (8005fdc <HAL_DMA_Abort+0x21c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d068      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a37      	ldr	r2, [pc, #220]	; (8005fe0 <HAL_DMA_Abort+0x220>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d063      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a36      	ldr	r2, [pc, #216]	; (8005fe4 <HAL_DMA_Abort+0x224>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d05e      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a34      	ldr	r2, [pc, #208]	; (8005fe8 <HAL_DMA_Abort+0x228>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d059      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a33      	ldr	r2, [pc, #204]	; (8005fec <HAL_DMA_Abort+0x22c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d054      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a31      	ldr	r2, [pc, #196]	; (8005ff0 <HAL_DMA_Abort+0x230>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04f      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a30      	ldr	r2, [pc, #192]	; (8005ff4 <HAL_DMA_Abort+0x234>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d04a      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2e      	ldr	r2, [pc, #184]	; (8005ff8 <HAL_DMA_Abort+0x238>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d045      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2d      	ldr	r2, [pc, #180]	; (8005ffc <HAL_DMA_Abort+0x23c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d040      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2b      	ldr	r2, [pc, #172]	; (8006000 <HAL_DMA_Abort+0x240>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d03b      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2a      	ldr	r2, [pc, #168]	; (8006004 <HAL_DMA_Abort+0x244>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d036      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a28      	ldr	r2, [pc, #160]	; (8006008 <HAL_DMA_Abort+0x248>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d031      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a27      	ldr	r2, [pc, #156]	; (800600c <HAL_DMA_Abort+0x24c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d02c      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a25      	ldr	r2, [pc, #148]	; (8006010 <HAL_DMA_Abort+0x250>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d027      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a24      	ldr	r2, [pc, #144]	; (8006014 <HAL_DMA_Abort+0x254>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d022      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a22      	ldr	r2, [pc, #136]	; (8006018 <HAL_DMA_Abort+0x258>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01d      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a21      	ldr	r2, [pc, #132]	; (800601c <HAL_DMA_Abort+0x25c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d018      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <HAL_DMA_Abort+0x260>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <HAL_DMA_Abort+0x264>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1c      	ldr	r2, [pc, #112]	; (8006028 <HAL_DMA_Abort+0x268>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1b      	ldr	r2, [pc, #108]	; (800602c <HAL_DMA_Abort+0x26c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_DMA_Abort+0x20e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a19      	ldr	r2, [pc, #100]	; (8006030 <HAL_DMA_Abort+0x270>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d132      	bne.n	8006034 <HAL_DMA_Abort+0x274>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e031      	b.n	8006036 <HAL_DMA_Abort+0x276>
 8005fd2:	bf00      	nop
 8005fd4:	40020010 	.word	0x40020010
 8005fd8:	40020028 	.word	0x40020028
 8005fdc:	40020040 	.word	0x40020040
 8005fe0:	40020058 	.word	0x40020058
 8005fe4:	40020070 	.word	0x40020070
 8005fe8:	40020088 	.word	0x40020088
 8005fec:	400200a0 	.word	0x400200a0
 8005ff0:	400200b8 	.word	0x400200b8
 8005ff4:	40020410 	.word	0x40020410
 8005ff8:	40020428 	.word	0x40020428
 8005ffc:	40020440 	.word	0x40020440
 8006000:	40020458 	.word	0x40020458
 8006004:	40020470 	.word	0x40020470
 8006008:	40020488 	.word	0x40020488
 800600c:	400204a0 	.word	0x400204a0
 8006010:	400204b8 	.word	0x400204b8
 8006014:	58025408 	.word	0x58025408
 8006018:	5802541c 	.word	0x5802541c
 800601c:	58025430 	.word	0x58025430
 8006020:	58025444 	.word	0x58025444
 8006024:	58025458 	.word	0x58025458
 8006028:	5802546c 	.word	0x5802546c
 800602c:	58025480 	.word	0x58025480
 8006030:	58025494 	.word	0x58025494
 8006034:	2300      	movs	r3, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006048:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a6d      	ldr	r2, [pc, #436]	; (8006204 <HAL_DMA_Abort+0x444>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d04a      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a6b      	ldr	r2, [pc, #428]	; (8006208 <HAL_DMA_Abort+0x448>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d045      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a6a      	ldr	r2, [pc, #424]	; (800620c <HAL_DMA_Abort+0x44c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d040      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a68      	ldr	r2, [pc, #416]	; (8006210 <HAL_DMA_Abort+0x450>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a67      	ldr	r2, [pc, #412]	; (8006214 <HAL_DMA_Abort+0x454>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d036      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a65      	ldr	r2, [pc, #404]	; (8006218 <HAL_DMA_Abort+0x458>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a64      	ldr	r2, [pc, #400]	; (800621c <HAL_DMA_Abort+0x45c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d02c      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a62      	ldr	r2, [pc, #392]	; (8006220 <HAL_DMA_Abort+0x460>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d027      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a61      	ldr	r2, [pc, #388]	; (8006224 <HAL_DMA_Abort+0x464>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a5f      	ldr	r2, [pc, #380]	; (8006228 <HAL_DMA_Abort+0x468>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a5e      	ldr	r2, [pc, #376]	; (800622c <HAL_DMA_Abort+0x46c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a5c      	ldr	r2, [pc, #368]	; (8006230 <HAL_DMA_Abort+0x470>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a5b      	ldr	r2, [pc, #364]	; (8006234 <HAL_DMA_Abort+0x474>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a59      	ldr	r2, [pc, #356]	; (8006238 <HAL_DMA_Abort+0x478>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a58      	ldr	r2, [pc, #352]	; (800623c <HAL_DMA_Abort+0x47c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_DMA_Abort+0x32a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a56      	ldr	r2, [pc, #344]	; (8006240 <HAL_DMA_Abort+0x480>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d108      	bne.n	80060fc <HAL_DMA_Abort+0x33c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e007      	b.n	800610c <HAL_DMA_Abort+0x34c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800610c:	e013      	b.n	8006136 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800610e:	f7fe fd8f 	bl	8004c30 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b05      	cmp	r3, #5
 800611a:	d90c      	bls.n	8006136 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2203      	movs	r2, #3
 8006126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e12d      	b.n	8006392 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a2f      	ldr	r2, [pc, #188]	; (8006204 <HAL_DMA_Abort+0x444>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d04a      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a2d      	ldr	r2, [pc, #180]	; (8006208 <HAL_DMA_Abort+0x448>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d045      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2c      	ldr	r2, [pc, #176]	; (800620c <HAL_DMA_Abort+0x44c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d040      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2a      	ldr	r2, [pc, #168]	; (8006210 <HAL_DMA_Abort+0x450>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d03b      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a29      	ldr	r2, [pc, #164]	; (8006214 <HAL_DMA_Abort+0x454>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d036      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <HAL_DMA_Abort+0x458>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d031      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a26      	ldr	r2, [pc, #152]	; (800621c <HAL_DMA_Abort+0x45c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d02c      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a24      	ldr	r2, [pc, #144]	; (8006220 <HAL_DMA_Abort+0x460>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d027      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a23      	ldr	r2, [pc, #140]	; (8006224 <HAL_DMA_Abort+0x464>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a21      	ldr	r2, [pc, #132]	; (8006228 <HAL_DMA_Abort+0x468>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a20      	ldr	r2, [pc, #128]	; (800622c <HAL_DMA_Abort+0x46c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <HAL_DMA_Abort+0x470>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <HAL_DMA_Abort+0x474>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_DMA_Abort+0x478>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1a      	ldr	r2, [pc, #104]	; (800623c <HAL_DMA_Abort+0x47c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_DMA_Abort+0x422>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_DMA_Abort+0x480>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d101      	bne.n	80061e6 <HAL_DMA_Abort+0x426>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <HAL_DMA_Abort+0x428>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d02b      	beq.n	8006244 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	223f      	movs	r2, #63	; 0x3f
 80061fc:	409a      	lsls	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	e02a      	b.n	800625a <HAL_DMA_Abort+0x49a>
 8006204:	40020010 	.word	0x40020010
 8006208:	40020028 	.word	0x40020028
 800620c:	40020040 	.word	0x40020040
 8006210:	40020058 	.word	0x40020058
 8006214:	40020070 	.word	0x40020070
 8006218:	40020088 	.word	0x40020088
 800621c:	400200a0 	.word	0x400200a0
 8006220:	400200b8 	.word	0x400200b8
 8006224:	40020410 	.word	0x40020410
 8006228:	40020428 	.word	0x40020428
 800622c:	40020440 	.word	0x40020440
 8006230:	40020458 	.word	0x40020458
 8006234:	40020470 	.word	0x40020470
 8006238:	40020488 	.word	0x40020488
 800623c:	400204a0 	.word	0x400204a0
 8006240:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006248:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2201      	movs	r2, #1
 8006254:	409a      	lsls	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a4f      	ldr	r2, [pc, #316]	; (800639c <HAL_DMA_Abort+0x5dc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d072      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a4d      	ldr	r2, [pc, #308]	; (80063a0 <HAL_DMA_Abort+0x5e0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d06d      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a4c      	ldr	r2, [pc, #304]	; (80063a4 <HAL_DMA_Abort+0x5e4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d068      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a4a      	ldr	r2, [pc, #296]	; (80063a8 <HAL_DMA_Abort+0x5e8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d063      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a49      	ldr	r2, [pc, #292]	; (80063ac <HAL_DMA_Abort+0x5ec>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d05e      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a47      	ldr	r2, [pc, #284]	; (80063b0 <HAL_DMA_Abort+0x5f0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d059      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a46      	ldr	r2, [pc, #280]	; (80063b4 <HAL_DMA_Abort+0x5f4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d054      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a44      	ldr	r2, [pc, #272]	; (80063b8 <HAL_DMA_Abort+0x5f8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d04f      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a43      	ldr	r2, [pc, #268]	; (80063bc <HAL_DMA_Abort+0x5fc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d04a      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a41      	ldr	r2, [pc, #260]	; (80063c0 <HAL_DMA_Abort+0x600>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d045      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a40      	ldr	r2, [pc, #256]	; (80063c4 <HAL_DMA_Abort+0x604>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d040      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3e      	ldr	r2, [pc, #248]	; (80063c8 <HAL_DMA_Abort+0x608>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d03b      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a3d      	ldr	r2, [pc, #244]	; (80063cc <HAL_DMA_Abort+0x60c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d036      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a3b      	ldr	r2, [pc, #236]	; (80063d0 <HAL_DMA_Abort+0x610>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d031      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3a      	ldr	r2, [pc, #232]	; (80063d4 <HAL_DMA_Abort+0x614>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d02c      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a38      	ldr	r2, [pc, #224]	; (80063d8 <HAL_DMA_Abort+0x618>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d027      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a37      	ldr	r2, [pc, #220]	; (80063dc <HAL_DMA_Abort+0x61c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d022      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a35      	ldr	r2, [pc, #212]	; (80063e0 <HAL_DMA_Abort+0x620>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01d      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a34      	ldr	r2, [pc, #208]	; (80063e4 <HAL_DMA_Abort+0x624>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d018      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a32      	ldr	r2, [pc, #200]	; (80063e8 <HAL_DMA_Abort+0x628>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a31      	ldr	r2, [pc, #196]	; (80063ec <HAL_DMA_Abort+0x62c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00e      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2f      	ldr	r2, [pc, #188]	; (80063f0 <HAL_DMA_Abort+0x630>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2e      	ldr	r2, [pc, #184]	; (80063f4 <HAL_DMA_Abort+0x634>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_DMA_Abort+0x58a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <HAL_DMA_Abort+0x638>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <HAL_DMA_Abort+0x58e>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <HAL_DMA_Abort+0x590>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800635c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006374:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800637e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40020010 	.word	0x40020010
 80063a0:	40020028 	.word	0x40020028
 80063a4:	40020040 	.word	0x40020040
 80063a8:	40020058 	.word	0x40020058
 80063ac:	40020070 	.word	0x40020070
 80063b0:	40020088 	.word	0x40020088
 80063b4:	400200a0 	.word	0x400200a0
 80063b8:	400200b8 	.word	0x400200b8
 80063bc:	40020410 	.word	0x40020410
 80063c0:	40020428 	.word	0x40020428
 80063c4:	40020440 	.word	0x40020440
 80063c8:	40020458 	.word	0x40020458
 80063cc:	40020470 	.word	0x40020470
 80063d0:	40020488 	.word	0x40020488
 80063d4:	400204a0 	.word	0x400204a0
 80063d8:	400204b8 	.word	0x400204b8
 80063dc:	58025408 	.word	0x58025408
 80063e0:	5802541c 	.word	0x5802541c
 80063e4:	58025430 	.word	0x58025430
 80063e8:	58025444 	.word	0x58025444
 80063ec:	58025458 	.word	0x58025458
 80063f0:	5802546c 	.word	0x5802546c
 80063f4:	58025480 	.word	0x58025480
 80063f8:	58025494 	.word	0x58025494

080063fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e237      	b.n	800687e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d004      	beq.n	8006424 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2280      	movs	r2, #128	; 0x80
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e22c      	b.n	800687e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a5c      	ldr	r2, [pc, #368]	; (800659c <HAL_DMA_Abort_IT+0x1a0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d04a      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a5b      	ldr	r2, [pc, #364]	; (80065a0 <HAL_DMA_Abort_IT+0x1a4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d045      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a59      	ldr	r2, [pc, #356]	; (80065a4 <HAL_DMA_Abort_IT+0x1a8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d040      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a58      	ldr	r2, [pc, #352]	; (80065a8 <HAL_DMA_Abort_IT+0x1ac>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d03b      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a56      	ldr	r2, [pc, #344]	; (80065ac <HAL_DMA_Abort_IT+0x1b0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d036      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a55      	ldr	r2, [pc, #340]	; (80065b0 <HAL_DMA_Abort_IT+0x1b4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d031      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a53      	ldr	r2, [pc, #332]	; (80065b4 <HAL_DMA_Abort_IT+0x1b8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d02c      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a52      	ldr	r2, [pc, #328]	; (80065b8 <HAL_DMA_Abort_IT+0x1bc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d027      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a50      	ldr	r2, [pc, #320]	; (80065bc <HAL_DMA_Abort_IT+0x1c0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d022      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a4f      	ldr	r2, [pc, #316]	; (80065c0 <HAL_DMA_Abort_IT+0x1c4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d01d      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a4d      	ldr	r2, [pc, #308]	; (80065c4 <HAL_DMA_Abort_IT+0x1c8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d018      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4c      	ldr	r2, [pc, #304]	; (80065c8 <HAL_DMA_Abort_IT+0x1cc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a4a      	ldr	r2, [pc, #296]	; (80065cc <HAL_DMA_Abort_IT+0x1d0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00e      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a49      	ldr	r2, [pc, #292]	; (80065d0 <HAL_DMA_Abort_IT+0x1d4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d009      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a47      	ldr	r2, [pc, #284]	; (80065d4 <HAL_DMA_Abort_IT+0x1d8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d004      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a46      	ldr	r2, [pc, #280]	; (80065d8 <HAL_DMA_Abort_IT+0x1dc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d101      	bne.n	80064c8 <HAL_DMA_Abort_IT+0xcc>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <HAL_DMA_Abort_IT+0xce>
 80064c8:	2300      	movs	r3, #0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8086 	beq.w	80065dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2204      	movs	r2, #4
 80064d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2f      	ldr	r2, [pc, #188]	; (800659c <HAL_DMA_Abort_IT+0x1a0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04a      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2e      	ldr	r2, [pc, #184]	; (80065a0 <HAL_DMA_Abort_IT+0x1a4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <HAL_DMA_Abort_IT+0x1a8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d040      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2b      	ldr	r2, [pc, #172]	; (80065a8 <HAL_DMA_Abort_IT+0x1ac>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d03b      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a29      	ldr	r2, [pc, #164]	; (80065ac <HAL_DMA_Abort_IT+0x1b0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a28      	ldr	r2, [pc, #160]	; (80065b0 <HAL_DMA_Abort_IT+0x1b4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d031      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <HAL_DMA_Abort_IT+0x1b8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <HAL_DMA_Abort_IT+0x1bc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d027      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a23      	ldr	r2, [pc, #140]	; (80065bc <HAL_DMA_Abort_IT+0x1c0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <HAL_DMA_Abort_IT+0x1c4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <HAL_DMA_Abort_IT+0x1c8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <HAL_DMA_Abort_IT+0x1cc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <HAL_DMA_Abort_IT+0x1d0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <HAL_DMA_Abort_IT+0x1d4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <HAL_DMA_Abort_IT+0x1d8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <HAL_DMA_Abort_IT+0x1dc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <HAL_DMA_Abort_IT+0x18e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e178      	b.n	800687c <HAL_DMA_Abort_IT+0x480>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e16f      	b.n	800687c <HAL_DMA_Abort_IT+0x480>
 800659c:	40020010 	.word	0x40020010
 80065a0:	40020028 	.word	0x40020028
 80065a4:	40020040 	.word	0x40020040
 80065a8:	40020058 	.word	0x40020058
 80065ac:	40020070 	.word	0x40020070
 80065b0:	40020088 	.word	0x40020088
 80065b4:	400200a0 	.word	0x400200a0
 80065b8:	400200b8 	.word	0x400200b8
 80065bc:	40020410 	.word	0x40020410
 80065c0:	40020428 	.word	0x40020428
 80065c4:	40020440 	.word	0x40020440
 80065c8:	40020458 	.word	0x40020458
 80065cc:	40020470 	.word	0x40020470
 80065d0:	40020488 	.word	0x40020488
 80065d4:	400204a0 	.word	0x400204a0
 80065d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 020e 	bic.w	r2, r2, #14
 80065ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a6c      	ldr	r2, [pc, #432]	; (80067a4 <HAL_DMA_Abort_IT+0x3a8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d04a      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a6b      	ldr	r2, [pc, #428]	; (80067a8 <HAL_DMA_Abort_IT+0x3ac>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d045      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a69      	ldr	r2, [pc, #420]	; (80067ac <HAL_DMA_Abort_IT+0x3b0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d040      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a68      	ldr	r2, [pc, #416]	; (80067b0 <HAL_DMA_Abort_IT+0x3b4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d03b      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a66      	ldr	r2, [pc, #408]	; (80067b4 <HAL_DMA_Abort_IT+0x3b8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d036      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a65      	ldr	r2, [pc, #404]	; (80067b8 <HAL_DMA_Abort_IT+0x3bc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d031      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a63      	ldr	r2, [pc, #396]	; (80067bc <HAL_DMA_Abort_IT+0x3c0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d02c      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a62      	ldr	r2, [pc, #392]	; (80067c0 <HAL_DMA_Abort_IT+0x3c4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d027      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a60      	ldr	r2, [pc, #384]	; (80067c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d022      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a5f      	ldr	r2, [pc, #380]	; (80067c8 <HAL_DMA_Abort_IT+0x3cc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d01d      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a5d      	ldr	r2, [pc, #372]	; (80067cc <HAL_DMA_Abort_IT+0x3d0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d018      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a5c      	ldr	r2, [pc, #368]	; (80067d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a5a      	ldr	r2, [pc, #360]	; (80067d4 <HAL_DMA_Abort_IT+0x3d8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a59      	ldr	r2, [pc, #356]	; (80067d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a57      	ldr	r2, [pc, #348]	; (80067dc <HAL_DMA_Abort_IT+0x3e0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a56      	ldr	r2, [pc, #344]	; (80067e0 <HAL_DMA_Abort_IT+0x3e4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d108      	bne.n	800669e <HAL_DMA_Abort_IT+0x2a2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e007      	b.n	80066ae <HAL_DMA_Abort_IT+0x2b2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a3c      	ldr	r2, [pc, #240]	; (80067a4 <HAL_DMA_Abort_IT+0x3a8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d072      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a3a      	ldr	r2, [pc, #232]	; (80067a8 <HAL_DMA_Abort_IT+0x3ac>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d06d      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a39      	ldr	r2, [pc, #228]	; (80067ac <HAL_DMA_Abort_IT+0x3b0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d068      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a37      	ldr	r2, [pc, #220]	; (80067b0 <HAL_DMA_Abort_IT+0x3b4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d063      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a36      	ldr	r2, [pc, #216]	; (80067b4 <HAL_DMA_Abort_IT+0x3b8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d05e      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a34      	ldr	r2, [pc, #208]	; (80067b8 <HAL_DMA_Abort_IT+0x3bc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d059      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a33      	ldr	r2, [pc, #204]	; (80067bc <HAL_DMA_Abort_IT+0x3c0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d054      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a31      	ldr	r2, [pc, #196]	; (80067c0 <HAL_DMA_Abort_IT+0x3c4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d04f      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a30      	ldr	r2, [pc, #192]	; (80067c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04a      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <HAL_DMA_Abort_IT+0x3cc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d045      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2d      	ldr	r2, [pc, #180]	; (80067cc <HAL_DMA_Abort_IT+0x3d0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d040      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2b      	ldr	r2, [pc, #172]	; (80067d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d03b      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <HAL_DMA_Abort_IT+0x3d8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d036      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d031      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a27      	ldr	r2, [pc, #156]	; (80067dc <HAL_DMA_Abort_IT+0x3e0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d02c      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <HAL_DMA_Abort_IT+0x3e4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d027      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <HAL_DMA_Abort_IT+0x3e8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <HAL_DMA_Abort_IT+0x3ec>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <HAL_DMA_Abort_IT+0x3f0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_DMA_Abort_IT+0x3f4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <HAL_DMA_Abort_IT+0x3f8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_DMA_Abort_IT+0x3fc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <HAL_DMA_Abort_IT+0x400>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a19      	ldr	r2, [pc, #100]	; (8006800 <HAL_DMA_Abort_IT+0x404>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d132      	bne.n	8006804 <HAL_DMA_Abort_IT+0x408>
 800679e:	2301      	movs	r3, #1
 80067a0:	e031      	b.n	8006806 <HAL_DMA_Abort_IT+0x40a>
 80067a2:	bf00      	nop
 80067a4:	40020010 	.word	0x40020010
 80067a8:	40020028 	.word	0x40020028
 80067ac:	40020040 	.word	0x40020040
 80067b0:	40020058 	.word	0x40020058
 80067b4:	40020070 	.word	0x40020070
 80067b8:	40020088 	.word	0x40020088
 80067bc:	400200a0 	.word	0x400200a0
 80067c0:	400200b8 	.word	0x400200b8
 80067c4:	40020410 	.word	0x40020410
 80067c8:	40020428 	.word	0x40020428
 80067cc:	40020440 	.word	0x40020440
 80067d0:	40020458 	.word	0x40020458
 80067d4:	40020470 	.word	0x40020470
 80067d8:	40020488 	.word	0x40020488
 80067dc:	400204a0 	.word	0x400204a0
 80067e0:	400204b8 	.word	0x400204b8
 80067e4:	58025408 	.word	0x58025408
 80067e8:	5802541c 	.word	0x5802541c
 80067ec:	58025430 	.word	0x58025430
 80067f0:	58025444 	.word	0x58025444
 80067f4:	58025458 	.word	0x58025458
 80067f8:	5802546c 	.word	0x5802546c
 80067fc:	58025480 	.word	0x58025480
 8006800:	58025494 	.word	0x58025494
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d028      	beq.n	800685c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006818:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2201      	movs	r2, #1
 800682a:	409a      	lsls	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006838:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00c      	beq.n	800685c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006850:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800685a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop

08006888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006894:	4b67      	ldr	r3, [pc, #412]	; (8006a34 <HAL_DMA_IRQHandler+0x1ac>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a67      	ldr	r2, [pc, #412]	; (8006a38 <HAL_DMA_IRQHandler+0x1b0>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	0a9b      	lsrs	r3, r3, #10
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a5f      	ldr	r2, [pc, #380]	; (8006a3c <HAL_DMA_IRQHandler+0x1b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d04a      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a5d      	ldr	r2, [pc, #372]	; (8006a40 <HAL_DMA_IRQHandler+0x1b8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d045      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a5c      	ldr	r2, [pc, #368]	; (8006a44 <HAL_DMA_IRQHandler+0x1bc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d040      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a5a      	ldr	r2, [pc, #360]	; (8006a48 <HAL_DMA_IRQHandler+0x1c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d03b      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a59      	ldr	r2, [pc, #356]	; (8006a4c <HAL_DMA_IRQHandler+0x1c4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d036      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a57      	ldr	r2, [pc, #348]	; (8006a50 <HAL_DMA_IRQHandler+0x1c8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d031      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a56      	ldr	r2, [pc, #344]	; (8006a54 <HAL_DMA_IRQHandler+0x1cc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d02c      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a54      	ldr	r2, [pc, #336]	; (8006a58 <HAL_DMA_IRQHandler+0x1d0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d027      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a53      	ldr	r2, [pc, #332]	; (8006a5c <HAL_DMA_IRQHandler+0x1d4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d022      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a51      	ldr	r2, [pc, #324]	; (8006a60 <HAL_DMA_IRQHandler+0x1d8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01d      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a50      	ldr	r2, [pc, #320]	; (8006a64 <HAL_DMA_IRQHandler+0x1dc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a4e      	ldr	r2, [pc, #312]	; (8006a68 <HAL_DMA_IRQHandler+0x1e0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4d      	ldr	r2, [pc, #308]	; (8006a6c <HAL_DMA_IRQHandler+0x1e4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a4b      	ldr	r2, [pc, #300]	; (8006a70 <HAL_DMA_IRQHandler+0x1e8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a4a      	ldr	r2, [pc, #296]	; (8006a74 <HAL_DMA_IRQHandler+0x1ec>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a48      	ldr	r2, [pc, #288]	; (8006a78 <HAL_DMA_IRQHandler+0x1f0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_DMA_IRQHandler+0xd6>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_DMA_IRQHandler+0xd8>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 842b 	beq.w	80071bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2208      	movs	r2, #8
 8006970:	409a      	lsls	r2, r3
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80a2 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a2e      	ldr	r2, [pc, #184]	; (8006a3c <HAL_DMA_IRQHandler+0x1b4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d04a      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a2d      	ldr	r2, [pc, #180]	; (8006a40 <HAL_DMA_IRQHandler+0x1b8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d045      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2b      	ldr	r2, [pc, #172]	; (8006a44 <HAL_DMA_IRQHandler+0x1bc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d040      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2a      	ldr	r2, [pc, #168]	; (8006a48 <HAL_DMA_IRQHandler+0x1c0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d03b      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a28      	ldr	r2, [pc, #160]	; (8006a4c <HAL_DMA_IRQHandler+0x1c4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d036      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a27      	ldr	r2, [pc, #156]	; (8006a50 <HAL_DMA_IRQHandler+0x1c8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d031      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a25      	ldr	r2, [pc, #148]	; (8006a54 <HAL_DMA_IRQHandler+0x1cc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d02c      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a24      	ldr	r2, [pc, #144]	; (8006a58 <HAL_DMA_IRQHandler+0x1d0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d027      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <HAL_DMA_IRQHandler+0x1d4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <HAL_DMA_IRQHandler+0x1d8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d01d      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_DMA_IRQHandler+0x1dc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1e      	ldr	r2, [pc, #120]	; (8006a68 <HAL_DMA_IRQHandler+0x1e0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <HAL_DMA_IRQHandler+0x1e4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1b      	ldr	r2, [pc, #108]	; (8006a70 <HAL_DMA_IRQHandler+0x1e8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a19      	ldr	r2, [pc, #100]	; (8006a74 <HAL_DMA_IRQHandler+0x1ec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <HAL_DMA_IRQHandler+0x1f0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d12f      	bne.n	8006a7c <HAL_DMA_IRQHandler+0x1f4>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e02e      	b.n	8006a90 <HAL_DMA_IRQHandler+0x208>
 8006a32:	bf00      	nop
 8006a34:	240001a0 	.word	0x240001a0
 8006a38:	1b4e81b5 	.word	0x1b4e81b5
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0204 	bic.w	r2, r2, #4
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2208      	movs	r2, #8
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	f043 0201 	orr.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d06e      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a69      	ldr	r2, [pc, #420]	; (8006c80 <HAL_DMA_IRQHandler+0x3f8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a67      	ldr	r2, [pc, #412]	; (8006c84 <HAL_DMA_IRQHandler+0x3fc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a66      	ldr	r2, [pc, #408]	; (8006c88 <HAL_DMA_IRQHandler+0x400>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a64      	ldr	r2, [pc, #400]	; (8006c8c <HAL_DMA_IRQHandler+0x404>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a63      	ldr	r2, [pc, #396]	; (8006c90 <HAL_DMA_IRQHandler+0x408>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a61      	ldr	r2, [pc, #388]	; (8006c94 <HAL_DMA_IRQHandler+0x40c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a60      	ldr	r2, [pc, #384]	; (8006c98 <HAL_DMA_IRQHandler+0x410>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5e      	ldr	r2, [pc, #376]	; (8006c9c <HAL_DMA_IRQHandler+0x414>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a5d      	ldr	r2, [pc, #372]	; (8006ca0 <HAL_DMA_IRQHandler+0x418>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a5b      	ldr	r2, [pc, #364]	; (8006ca4 <HAL_DMA_IRQHandler+0x41c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a5a      	ldr	r2, [pc, #360]	; (8006ca8 <HAL_DMA_IRQHandler+0x420>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a58      	ldr	r2, [pc, #352]	; (8006cac <HAL_DMA_IRQHandler+0x424>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a57      	ldr	r2, [pc, #348]	; (8006cb0 <HAL_DMA_IRQHandler+0x428>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a55      	ldr	r2, [pc, #340]	; (8006cb4 <HAL_DMA_IRQHandler+0x42c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a54      	ldr	r2, [pc, #336]	; (8006cb8 <HAL_DMA_IRQHandler+0x430>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a52      	ldr	r2, [pc, #328]	; (8006cbc <HAL_DMA_IRQHandler+0x434>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10a      	bne.n	8006b8c <HAL_DMA_IRQHandler+0x304>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e003      	b.n	8006b94 <HAL_DMA_IRQHandler+0x30c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00d      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bac:	f043 0202 	orr.w	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 808f 	beq.w	8006ce8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2c      	ldr	r2, [pc, #176]	; (8006c80 <HAL_DMA_IRQHandler+0x3f8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d04a      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <HAL_DMA_IRQHandler+0x3fc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d045      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <HAL_DMA_IRQHandler+0x400>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d040      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a27      	ldr	r2, [pc, #156]	; (8006c8c <HAL_DMA_IRQHandler+0x404>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d03b      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a26      	ldr	r2, [pc, #152]	; (8006c90 <HAL_DMA_IRQHandler+0x408>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d036      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a24      	ldr	r2, [pc, #144]	; (8006c94 <HAL_DMA_IRQHandler+0x40c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d031      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a23      	ldr	r2, [pc, #140]	; (8006c98 <HAL_DMA_IRQHandler+0x410>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d02c      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <HAL_DMA_IRQHandler+0x414>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d027      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <HAL_DMA_IRQHandler+0x418>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d022      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <HAL_DMA_IRQHandler+0x41c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01d      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <HAL_DMA_IRQHandler+0x420>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d018      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1b      	ldr	r2, [pc, #108]	; (8006cac <HAL_DMA_IRQHandler+0x424>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1a      	ldr	r2, [pc, #104]	; (8006cb0 <HAL_DMA_IRQHandler+0x428>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00e      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <HAL_DMA_IRQHandler+0x42c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <HAL_DMA_IRQHandler+0x430>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_DMA_IRQHandler+0x434>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d12a      	bne.n	8006cc0 <HAL_DMA_IRQHandler+0x438>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e023      	b.n	8006cc8 <HAL_DMA_IRQHandler+0x440>
 8006c80:	40020010 	.word	0x40020010
 8006c84:	40020028 	.word	0x40020028
 8006c88:	40020040 	.word	0x40020040
 8006c8c:	40020058 	.word	0x40020058
 8006c90:	40020070 	.word	0x40020070
 8006c94:	40020088 	.word	0x40020088
 8006c98:	400200a0 	.word	0x400200a0
 8006c9c:	400200b8 	.word	0x400200b8
 8006ca0:	40020410 	.word	0x40020410
 8006ca4:	40020428 	.word	0x40020428
 8006ca8:	40020440 	.word	0x40020440
 8006cac:	40020458 	.word	0x40020458
 8006cb0:	40020470 	.word	0x40020470
 8006cb4:	40020488 	.word	0x40020488
 8006cb8:	400204a0 	.word	0x400204a0
 8006cbc:	400204b8 	.word	0x400204b8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00d      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f043 0204 	orr.w	r2, r3, #4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80a6 	beq.w	8006e4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a85      	ldr	r2, [pc, #532]	; (8006f18 <HAL_DMA_IRQHandler+0x690>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d04a      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a83      	ldr	r2, [pc, #524]	; (8006f1c <HAL_DMA_IRQHandler+0x694>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d045      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a82      	ldr	r2, [pc, #520]	; (8006f20 <HAL_DMA_IRQHandler+0x698>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d040      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a80      	ldr	r2, [pc, #512]	; (8006f24 <HAL_DMA_IRQHandler+0x69c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d03b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a7f      	ldr	r2, [pc, #508]	; (8006f28 <HAL_DMA_IRQHandler+0x6a0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d036      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a7d      	ldr	r2, [pc, #500]	; (8006f2c <HAL_DMA_IRQHandler+0x6a4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d031      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7c      	ldr	r2, [pc, #496]	; (8006f30 <HAL_DMA_IRQHandler+0x6a8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d02c      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a7a      	ldr	r2, [pc, #488]	; (8006f34 <HAL_DMA_IRQHandler+0x6ac>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a79      	ldr	r2, [pc, #484]	; (8006f38 <HAL_DMA_IRQHandler+0x6b0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a77      	ldr	r2, [pc, #476]	; (8006f3c <HAL_DMA_IRQHandler+0x6b4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01d      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a76      	ldr	r2, [pc, #472]	; (8006f40 <HAL_DMA_IRQHandler+0x6b8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a74      	ldr	r2, [pc, #464]	; (8006f44 <HAL_DMA_IRQHandler+0x6bc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a73      	ldr	r2, [pc, #460]	; (8006f48 <HAL_DMA_IRQHandler+0x6c0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a71      	ldr	r2, [pc, #452]	; (8006f4c <HAL_DMA_IRQHandler+0x6c4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a70      	ldr	r2, [pc, #448]	; (8006f50 <HAL_DMA_IRQHandler+0x6c8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6e      	ldr	r2, [pc, #440]	; (8006f54 <HAL_DMA_IRQHandler+0x6cc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d10a      	bne.n	8006db4 <HAL_DMA_IRQHandler+0x52c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e009      	b.n	8006dc8 <HAL_DMA_IRQHandler+0x540>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d03e      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d018      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d108      	bne.n	8006e0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d024      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
 8006e08:	e01f      	b.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01b      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	e016      	b.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d107      	bne.n	8006e3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0208 	bic.w	r2, r2, #8
 8006e38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2220      	movs	r2, #32
 8006e54:	409a      	lsls	r2, r3
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8110 	beq.w	8007080 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <HAL_DMA_IRQHandler+0x690>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04a      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2b      	ldr	r2, [pc, #172]	; (8006f1c <HAL_DMA_IRQHandler+0x694>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d045      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <HAL_DMA_IRQHandler+0x698>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d040      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a28      	ldr	r2, [pc, #160]	; (8006f24 <HAL_DMA_IRQHandler+0x69c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d03b      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <HAL_DMA_IRQHandler+0x6a0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d036      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a25      	ldr	r2, [pc, #148]	; (8006f2c <HAL_DMA_IRQHandler+0x6a4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d031      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a23      	ldr	r2, [pc, #140]	; (8006f30 <HAL_DMA_IRQHandler+0x6a8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d02c      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a22      	ldr	r2, [pc, #136]	; (8006f34 <HAL_DMA_IRQHandler+0x6ac>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d027      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <HAL_DMA_IRQHandler+0x6b0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <HAL_DMA_IRQHandler+0x6b4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1d      	ldr	r2, [pc, #116]	; (8006f40 <HAL_DMA_IRQHandler+0x6b8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <HAL_DMA_IRQHandler+0x6bc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1a      	ldr	r2, [pc, #104]	; (8006f48 <HAL_DMA_IRQHandler+0x6c0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <HAL_DMA_IRQHandler+0x6c4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <HAL_DMA_IRQHandler+0x6c8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <HAL_DMA_IRQHandler+0x6cc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d12b      	bne.n	8006f58 <HAL_DMA_IRQHandler+0x6d0>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	2300      	moveq	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	e02a      	b.n	8006f6c <HAL_DMA_IRQHandler+0x6e4>
 8006f16:	bf00      	nop
 8006f18:	40020010 	.word	0x40020010
 8006f1c:	40020028 	.word	0x40020028
 8006f20:	40020040 	.word	0x40020040
 8006f24:	40020058 	.word	0x40020058
 8006f28:	40020070 	.word	0x40020070
 8006f2c:	40020088 	.word	0x40020088
 8006f30:	400200a0 	.word	0x400200a0
 8006f34:	400200b8 	.word	0x400200b8
 8006f38:	40020410 	.word	0x40020410
 8006f3c:	40020428 	.word	0x40020428
 8006f40:	40020440 	.word	0x40020440
 8006f44:	40020458 	.word	0x40020458
 8006f48:	40020470 	.word	0x40020470
 8006f4c:	40020488 	.word	0x40020488
 8006f50:	400204a0 	.word	0x400204a0
 8006f54:	400204b8 	.word	0x400204b8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8087 	beq.w	8007080 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d139      	bne.n	8007002 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0216 	bic.w	r2, r2, #22
 8006f9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <HAL_DMA_IRQHandler+0x736>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0208 	bic.w	r2, r2, #8
 8006fcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	223f      	movs	r2, #63	; 0x3f
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 834a 	beq.w	800768c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
          }
          return;
 8007000:	e344      	b.n	800768c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d108      	bne.n	8007030 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02c      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
 800702e:	e027      	b.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d023      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	e01e      	b.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10f      	bne.n	8007070 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0210 	bic.w	r2, r2, #16
 800705e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8306 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8088 	beq.w	80071a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2204      	movs	r2, #4
 800709c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a7a      	ldr	r2, [pc, #488]	; (8007290 <HAL_DMA_IRQHandler+0xa08>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d04a      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a79      	ldr	r2, [pc, #484]	; (8007294 <HAL_DMA_IRQHandler+0xa0c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d045      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a77      	ldr	r2, [pc, #476]	; (8007298 <HAL_DMA_IRQHandler+0xa10>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d040      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a76      	ldr	r2, [pc, #472]	; (800729c <HAL_DMA_IRQHandler+0xa14>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d03b      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a74      	ldr	r2, [pc, #464]	; (80072a0 <HAL_DMA_IRQHandler+0xa18>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d036      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a73      	ldr	r2, [pc, #460]	; (80072a4 <HAL_DMA_IRQHandler+0xa1c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d031      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a71      	ldr	r2, [pc, #452]	; (80072a8 <HAL_DMA_IRQHandler+0xa20>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d02c      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a70      	ldr	r2, [pc, #448]	; (80072ac <HAL_DMA_IRQHandler+0xa24>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d027      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a6e      	ldr	r2, [pc, #440]	; (80072b0 <HAL_DMA_IRQHandler+0xa28>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d022      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a6d      	ldr	r2, [pc, #436]	; (80072b4 <HAL_DMA_IRQHandler+0xa2c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d01d      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a6b      	ldr	r2, [pc, #428]	; (80072b8 <HAL_DMA_IRQHandler+0xa30>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d018      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a6a      	ldr	r2, [pc, #424]	; (80072bc <HAL_DMA_IRQHandler+0xa34>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a68      	ldr	r2, [pc, #416]	; (80072c0 <HAL_DMA_IRQHandler+0xa38>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00e      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a67      	ldr	r2, [pc, #412]	; (80072c4 <HAL_DMA_IRQHandler+0xa3c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a65      	ldr	r2, [pc, #404]	; (80072c8 <HAL_DMA_IRQHandler+0xa40>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a64      	ldr	r2, [pc, #400]	; (80072cc <HAL_DMA_IRQHandler+0xa44>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <HAL_DMA_IRQHandler+0x8ca>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e007      	b.n	8007162 <HAL_DMA_IRQHandler+0x8da>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716a:	429a      	cmp	r2, r3
 800716c:	d307      	bcc.n	800717e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f2      	bne.n	8007162 <HAL_DMA_IRQHandler+0x8da>
 800717c:	e000      	b.n	8007180 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800717e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2203      	movs	r2, #3
 8007192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007196:	e003      	b.n	80071a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8272 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	e26c      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a43      	ldr	r2, [pc, #268]	; (80072d0 <HAL_DMA_IRQHandler+0xa48>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d022      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a42      	ldr	r2, [pc, #264]	; (80072d4 <HAL_DMA_IRQHandler+0xa4c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d01d      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a40      	ldr	r2, [pc, #256]	; (80072d8 <HAL_DMA_IRQHandler+0xa50>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3f      	ldr	r2, [pc, #252]	; (80072dc <HAL_DMA_IRQHandler+0xa54>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a3d      	ldr	r2, [pc, #244]	; (80072e0 <HAL_DMA_IRQHandler+0xa58>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a3c      	ldr	r2, [pc, #240]	; (80072e4 <HAL_DMA_IRQHandler+0xa5c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3a      	ldr	r2, [pc, #232]	; (80072e8 <HAL_DMA_IRQHandler+0xa60>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a39      	ldr	r2, [pc, #228]	; (80072ec <HAL_DMA_IRQHandler+0xa64>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d101      	bne.n	8007210 <HAL_DMA_IRQHandler+0x988>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <HAL_DMA_IRQHandler+0x98a>
 8007210:	2300      	movs	r3, #0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 823f 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2204      	movs	r2, #4
 800722a:	409a      	lsls	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80cd 	beq.w	80073d0 <HAL_DMA_IRQHandler+0xb48>
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80c7 	beq.w	80073d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2204      	movs	r2, #4
 800724c:	409a      	lsls	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d049      	beq.n	80072f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8210 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007278:	e20a      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8206 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800728c:	e200      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
 800728e:	bf00      	nop
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	58025408 	.word	0x58025408
 80072d4:	5802541c 	.word	0x5802541c
 80072d8:	58025430 	.word	0x58025430
 80072dc:	58025444 	.word	0x58025444
 80072e0:	58025458 	.word	0x58025458
 80072e4:	5802546c 	.word	0x5802546c
 80072e8:	58025480 	.word	0x58025480
 80072ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d160      	bne.n	80073bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a7f      	ldr	r2, [pc, #508]	; (80074fc <HAL_DMA_IRQHandler+0xc74>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a7d      	ldr	r2, [pc, #500]	; (8007500 <HAL_DMA_IRQHandler+0xc78>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a7c      	ldr	r2, [pc, #496]	; (8007504 <HAL_DMA_IRQHandler+0xc7c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a7a      	ldr	r2, [pc, #488]	; (8007508 <HAL_DMA_IRQHandler+0xc80>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a79      	ldr	r2, [pc, #484]	; (800750c <HAL_DMA_IRQHandler+0xc84>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a77      	ldr	r2, [pc, #476]	; (8007510 <HAL_DMA_IRQHandler+0xc88>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a76      	ldr	r2, [pc, #472]	; (8007514 <HAL_DMA_IRQHandler+0xc8c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a74      	ldr	r2, [pc, #464]	; (8007518 <HAL_DMA_IRQHandler+0xc90>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a73      	ldr	r2, [pc, #460]	; (800751c <HAL_DMA_IRQHandler+0xc94>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a71      	ldr	r2, [pc, #452]	; (8007520 <HAL_DMA_IRQHandler+0xc98>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a70      	ldr	r2, [pc, #448]	; (8007524 <HAL_DMA_IRQHandler+0xc9c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a6e      	ldr	r2, [pc, #440]	; (8007528 <HAL_DMA_IRQHandler+0xca0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6d      	ldr	r2, [pc, #436]	; (800752c <HAL_DMA_IRQHandler+0xca4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a6b      	ldr	r2, [pc, #428]	; (8007530 <HAL_DMA_IRQHandler+0xca8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a6a      	ldr	r2, [pc, #424]	; (8007534 <HAL_DMA_IRQHandler+0xcac>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a68      	ldr	r2, [pc, #416]	; (8007538 <HAL_DMA_IRQHandler+0xcb0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d108      	bne.n	80073ac <HAL_DMA_IRQHandler+0xb24>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0208 	bic.w	r2, r2, #8
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e007      	b.n	80073bc <HAL_DMA_IRQHandler+0xb34>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0204 	bic.w	r2, r2, #4
 80073ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 8165 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073ce:	e15f      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2202      	movs	r2, #2
 80073da:	409a      	lsls	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80c5 	beq.w	8007570 <HAL_DMA_IRQHandler+0xce8>
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80bf 	beq.w	8007570 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	2202      	movs	r2, #2
 80073fc:	409a      	lsls	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d018      	beq.n	800743e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 813a 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007428:	e134      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8130 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800743c:	e12a      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 8089 	bne.w	800755c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a2b      	ldr	r2, [pc, #172]	; (80074fc <HAL_DMA_IRQHandler+0xc74>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d04a      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a29      	ldr	r2, [pc, #164]	; (8007500 <HAL_DMA_IRQHandler+0xc78>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d045      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a28      	ldr	r2, [pc, #160]	; (8007504 <HAL_DMA_IRQHandler+0xc7c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d040      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a26      	ldr	r2, [pc, #152]	; (8007508 <HAL_DMA_IRQHandler+0xc80>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d03b      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a25      	ldr	r2, [pc, #148]	; (800750c <HAL_DMA_IRQHandler+0xc84>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d036      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a23      	ldr	r2, [pc, #140]	; (8007510 <HAL_DMA_IRQHandler+0xc88>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d031      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a22      	ldr	r2, [pc, #136]	; (8007514 <HAL_DMA_IRQHandler+0xc8c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d02c      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a20      	ldr	r2, [pc, #128]	; (8007518 <HAL_DMA_IRQHandler+0xc90>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d027      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1f      	ldr	r2, [pc, #124]	; (800751c <HAL_DMA_IRQHandler+0xc94>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d022      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1d      	ldr	r2, [pc, #116]	; (8007520 <HAL_DMA_IRQHandler+0xc98>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01d      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <HAL_DMA_IRQHandler+0xc9c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d018      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <HAL_DMA_IRQHandler+0xca0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d013      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a19      	ldr	r2, [pc, #100]	; (800752c <HAL_DMA_IRQHandler+0xca4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00e      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a17      	ldr	r2, [pc, #92]	; (8007530 <HAL_DMA_IRQHandler+0xca8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d009      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a16      	ldr	r2, [pc, #88]	; (8007534 <HAL_DMA_IRQHandler+0xcac>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d004      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a14      	ldr	r2, [pc, #80]	; (8007538 <HAL_DMA_IRQHandler+0xcb0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d128      	bne.n	800753c <HAL_DMA_IRQHandler+0xcb4>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0214 	bic.w	r2, r2, #20
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e027      	b.n	800754c <HAL_DMA_IRQHandler+0xcc4>
 80074fc:	40020010 	.word	0x40020010
 8007500:	40020028 	.word	0x40020028
 8007504:	40020040 	.word	0x40020040
 8007508:	40020058 	.word	0x40020058
 800750c:	40020070 	.word	0x40020070
 8007510:	40020088 	.word	0x40020088
 8007514:	400200a0 	.word	0x400200a0
 8007518:	400200b8 	.word	0x400200b8
 800751c:	40020410 	.word	0x40020410
 8007520:	40020428 	.word	0x40020428
 8007524:	40020440 	.word	0x40020440
 8007528:	40020458 	.word	0x40020458
 800752c:	40020470 	.word	0x40020470
 8007530:	40020488 	.word	0x40020488
 8007534:	400204a0 	.word	0x400204a0
 8007538:	400204b8 	.word	0x400204b8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 020a 	bic.w	r2, r2, #10
 800754a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8097 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800756e:	e091      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	2208      	movs	r2, #8
 800757a:	409a      	lsls	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	4013      	ands	r3, r2
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 8088 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8082 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a41      	ldr	r2, [pc, #260]	; (800769c <HAL_DMA_IRQHandler+0xe14>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d04a      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a3f      	ldr	r2, [pc, #252]	; (80076a0 <HAL_DMA_IRQHandler+0xe18>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d045      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3e      	ldr	r2, [pc, #248]	; (80076a4 <HAL_DMA_IRQHandler+0xe1c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d040      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a3c      	ldr	r2, [pc, #240]	; (80076a8 <HAL_DMA_IRQHandler+0xe20>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d03b      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a3b      	ldr	r2, [pc, #236]	; (80076ac <HAL_DMA_IRQHandler+0xe24>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d036      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a39      	ldr	r2, [pc, #228]	; (80076b0 <HAL_DMA_IRQHandler+0xe28>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d031      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a38      	ldr	r2, [pc, #224]	; (80076b4 <HAL_DMA_IRQHandler+0xe2c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d02c      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a36      	ldr	r2, [pc, #216]	; (80076b8 <HAL_DMA_IRQHandler+0xe30>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a35      	ldr	r2, [pc, #212]	; (80076bc <HAL_DMA_IRQHandler+0xe34>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d022      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a33      	ldr	r2, [pc, #204]	; (80076c0 <HAL_DMA_IRQHandler+0xe38>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01d      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a32      	ldr	r2, [pc, #200]	; (80076c4 <HAL_DMA_IRQHandler+0xe3c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a30      	ldr	r2, [pc, #192]	; (80076c8 <HAL_DMA_IRQHandler+0xe40>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2f      	ldr	r2, [pc, #188]	; (80076cc <HAL_DMA_IRQHandler+0xe44>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2d      	ldr	r2, [pc, #180]	; (80076d0 <HAL_DMA_IRQHandler+0xe48>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2c      	ldr	r2, [pc, #176]	; (80076d4 <HAL_DMA_IRQHandler+0xe4c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a2a      	ldr	r2, [pc, #168]	; (80076d8 <HAL_DMA_IRQHandler+0xe50>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d108      	bne.n	8007644 <HAL_DMA_IRQHandler+0xdbc>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 021c 	bic.w	r2, r2, #28
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e007      	b.n	8007654 <HAL_DMA_IRQHandler+0xdcc>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 020e 	bic.w	r2, r2, #14
 8007652:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
 800768a:	e004      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800768c:	bf00      	nop
 800768e:	e002      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007694:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007696:	3728      	adds	r7, #40	; 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8

080076dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a7f      	ldr	r2, [pc, #508]	; (80078f8 <DMA_SetConfig+0x21c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d072      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a7d      	ldr	r2, [pc, #500]	; (80078fc <DMA_SetConfig+0x220>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d06d      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a7c      	ldr	r2, [pc, #496]	; (8007900 <DMA_SetConfig+0x224>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d068      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a7a      	ldr	r2, [pc, #488]	; (8007904 <DMA_SetConfig+0x228>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d063      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a79      	ldr	r2, [pc, #484]	; (8007908 <DMA_SetConfig+0x22c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d05e      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a77      	ldr	r2, [pc, #476]	; (800790c <DMA_SetConfig+0x230>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d059      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a76      	ldr	r2, [pc, #472]	; (8007910 <DMA_SetConfig+0x234>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d054      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a74      	ldr	r2, [pc, #464]	; (8007914 <DMA_SetConfig+0x238>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d04f      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a73      	ldr	r2, [pc, #460]	; (8007918 <DMA_SetConfig+0x23c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d04a      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a71      	ldr	r2, [pc, #452]	; (800791c <DMA_SetConfig+0x240>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d045      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a70      	ldr	r2, [pc, #448]	; (8007920 <DMA_SetConfig+0x244>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d040      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a6e      	ldr	r2, [pc, #440]	; (8007924 <DMA_SetConfig+0x248>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d03b      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a6d      	ldr	r2, [pc, #436]	; (8007928 <DMA_SetConfig+0x24c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d036      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a6b      	ldr	r2, [pc, #428]	; (800792c <DMA_SetConfig+0x250>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d031      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a6a      	ldr	r2, [pc, #424]	; (8007930 <DMA_SetConfig+0x254>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d02c      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a68      	ldr	r2, [pc, #416]	; (8007934 <DMA_SetConfig+0x258>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d027      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a67      	ldr	r2, [pc, #412]	; (8007938 <DMA_SetConfig+0x25c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d022      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a65      	ldr	r2, [pc, #404]	; (800793c <DMA_SetConfig+0x260>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01d      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a64      	ldr	r2, [pc, #400]	; (8007940 <DMA_SetConfig+0x264>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d018      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a62      	ldr	r2, [pc, #392]	; (8007944 <DMA_SetConfig+0x268>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a61      	ldr	r2, [pc, #388]	; (8007948 <DMA_SetConfig+0x26c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00e      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a5f      	ldr	r2, [pc, #380]	; (800794c <DMA_SetConfig+0x270>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a5e      	ldr	r2, [pc, #376]	; (8007950 <DMA_SetConfig+0x274>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a5c      	ldr	r2, [pc, #368]	; (8007954 <DMA_SetConfig+0x278>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d101      	bne.n	80077ea <DMA_SetConfig+0x10e>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <DMA_SetConfig+0x110>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800780a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a39      	ldr	r2, [pc, #228]	; (80078f8 <DMA_SetConfig+0x21c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d04a      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a38      	ldr	r2, [pc, #224]	; (80078fc <DMA_SetConfig+0x220>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d045      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a36      	ldr	r2, [pc, #216]	; (8007900 <DMA_SetConfig+0x224>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d040      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a35      	ldr	r2, [pc, #212]	; (8007904 <DMA_SetConfig+0x228>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d03b      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a33      	ldr	r2, [pc, #204]	; (8007908 <DMA_SetConfig+0x22c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d036      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a32      	ldr	r2, [pc, #200]	; (800790c <DMA_SetConfig+0x230>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d031      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a30      	ldr	r2, [pc, #192]	; (8007910 <DMA_SetConfig+0x234>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d02c      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2f      	ldr	r2, [pc, #188]	; (8007914 <DMA_SetConfig+0x238>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d027      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a2d      	ldr	r2, [pc, #180]	; (8007918 <DMA_SetConfig+0x23c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d022      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a2c      	ldr	r2, [pc, #176]	; (800791c <DMA_SetConfig+0x240>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d01d      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2a      	ldr	r2, [pc, #168]	; (8007920 <DMA_SetConfig+0x244>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d018      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a29      	ldr	r2, [pc, #164]	; (8007924 <DMA_SetConfig+0x248>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a27      	ldr	r2, [pc, #156]	; (8007928 <DMA_SetConfig+0x24c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00e      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a26      	ldr	r2, [pc, #152]	; (800792c <DMA_SetConfig+0x250>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d009      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a24      	ldr	r2, [pc, #144]	; (8007930 <DMA_SetConfig+0x254>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a23      	ldr	r2, [pc, #140]	; (8007934 <DMA_SetConfig+0x258>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d101      	bne.n	80078b0 <DMA_SetConfig+0x1d4>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <DMA_SetConfig+0x1d6>
 80078b0:	2300      	movs	r3, #0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d059      	beq.n	800796a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	223f      	movs	r2, #63	; 0x3f
 80078c0:	409a      	lsls	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2b40      	cmp	r3, #64	; 0x40
 80078e4:	d138      	bne.n	8007958 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078f6:	e086      	b.n	8007a06 <DMA_SetConfig+0x32a>
 80078f8:	40020010 	.word	0x40020010
 80078fc:	40020028 	.word	0x40020028
 8007900:	40020040 	.word	0x40020040
 8007904:	40020058 	.word	0x40020058
 8007908:	40020070 	.word	0x40020070
 800790c:	40020088 	.word	0x40020088
 8007910:	400200a0 	.word	0x400200a0
 8007914:	400200b8 	.word	0x400200b8
 8007918:	40020410 	.word	0x40020410
 800791c:	40020428 	.word	0x40020428
 8007920:	40020440 	.word	0x40020440
 8007924:	40020458 	.word	0x40020458
 8007928:	40020470 	.word	0x40020470
 800792c:	40020488 	.word	0x40020488
 8007930:	400204a0 	.word	0x400204a0
 8007934:	400204b8 	.word	0x400204b8
 8007938:	58025408 	.word	0x58025408
 800793c:	5802541c 	.word	0x5802541c
 8007940:	58025430 	.word	0x58025430
 8007944:	58025444 	.word	0x58025444
 8007948:	58025458 	.word	0x58025458
 800794c:	5802546c 	.word	0x5802546c
 8007950:	58025480 	.word	0x58025480
 8007954:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	60da      	str	r2, [r3, #12]
}
 8007968:	e04d      	b.n	8007a06 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <DMA_SetConfig+0x338>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d022      	beq.n	80079ba <DMA_SetConfig+0x2de>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <DMA_SetConfig+0x33c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d01d      	beq.n	80079ba <DMA_SetConfig+0x2de>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <DMA_SetConfig+0x340>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d018      	beq.n	80079ba <DMA_SetConfig+0x2de>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <DMA_SetConfig+0x344>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d013      	beq.n	80079ba <DMA_SetConfig+0x2de>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a23      	ldr	r2, [pc, #140]	; (8007a24 <DMA_SetConfig+0x348>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00e      	beq.n	80079ba <DMA_SetConfig+0x2de>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a21      	ldr	r2, [pc, #132]	; (8007a28 <DMA_SetConfig+0x34c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d009      	beq.n	80079ba <DMA_SetConfig+0x2de>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <DMA_SetConfig+0x350>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d004      	beq.n	80079ba <DMA_SetConfig+0x2de>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <DMA_SetConfig+0x354>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d101      	bne.n	80079be <DMA_SetConfig+0x2e2>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e000      	b.n	80079c0 <DMA_SetConfig+0x2e4>
 80079be:	2300      	movs	r3, #0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d020      	beq.n	8007a06 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c8:	f003 031f 	and.w	r3, r3, #31
 80079cc:	2201      	movs	r2, #1
 80079ce:	409a      	lsls	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d108      	bne.n	80079f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	60da      	str	r2, [r3, #12]
}
 80079f4:	e007      	b.n	8007a06 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	60da      	str	r2, [r3, #12]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	58025408 	.word	0x58025408
 8007a18:	5802541c 	.word	0x5802541c
 8007a1c:	58025430 	.word	0x58025430
 8007a20:	58025444 	.word	0x58025444
 8007a24:	58025458 	.word	0x58025458
 8007a28:	5802546c 	.word	0x5802546c
 8007a2c:	58025480 	.word	0x58025480
 8007a30:	58025494 	.word	0x58025494

08007a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a42      	ldr	r2, [pc, #264]	; (8007b4c <DMA_CalcBaseAndBitshift+0x118>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d04a      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a41      	ldr	r2, [pc, #260]	; (8007b50 <DMA_CalcBaseAndBitshift+0x11c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d045      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a3f      	ldr	r2, [pc, #252]	; (8007b54 <DMA_CalcBaseAndBitshift+0x120>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d040      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a3e      	ldr	r2, [pc, #248]	; (8007b58 <DMA_CalcBaseAndBitshift+0x124>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d03b      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a3c      	ldr	r2, [pc, #240]	; (8007b5c <DMA_CalcBaseAndBitshift+0x128>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d036      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a3b      	ldr	r2, [pc, #236]	; (8007b60 <DMA_CalcBaseAndBitshift+0x12c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d031      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a39      	ldr	r2, [pc, #228]	; (8007b64 <DMA_CalcBaseAndBitshift+0x130>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d02c      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a38      	ldr	r2, [pc, #224]	; (8007b68 <DMA_CalcBaseAndBitshift+0x134>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d027      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a36      	ldr	r2, [pc, #216]	; (8007b6c <DMA_CalcBaseAndBitshift+0x138>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d022      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a35      	ldr	r2, [pc, #212]	; (8007b70 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d01d      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a33      	ldr	r2, [pc, #204]	; (8007b74 <DMA_CalcBaseAndBitshift+0x140>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d018      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a32      	ldr	r2, [pc, #200]	; (8007b78 <DMA_CalcBaseAndBitshift+0x144>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d013      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a30      	ldr	r2, [pc, #192]	; (8007b7c <DMA_CalcBaseAndBitshift+0x148>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00e      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a2f      	ldr	r2, [pc, #188]	; (8007b80 <DMA_CalcBaseAndBitshift+0x14c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d009      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2d      	ldr	r2, [pc, #180]	; (8007b84 <DMA_CalcBaseAndBitshift+0x150>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2c      	ldr	r2, [pc, #176]	; (8007b88 <DMA_CalcBaseAndBitshift+0x154>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d101      	bne.n	8007ae0 <DMA_CalcBaseAndBitshift+0xac>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <DMA_CalcBaseAndBitshift+0xae>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d024      	beq.n	8007b30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	3b10      	subs	r3, #16
 8007aee:	4a27      	ldr	r2, [pc, #156]	; (8007b8c <DMA_CalcBaseAndBitshift+0x158>)
 8007af0:	fba2 2303 	umull	r2, r3, r2, r3
 8007af4:	091b      	lsrs	r3, r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	4a24      	ldr	r2, [pc, #144]	; (8007b90 <DMA_CalcBaseAndBitshift+0x15c>)
 8007b00:	5cd3      	ldrb	r3, [r2, r3]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d908      	bls.n	8007b20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	4b1f      	ldr	r3, [pc, #124]	; (8007b94 <DMA_CalcBaseAndBitshift+0x160>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8007b1e:	e00d      	b.n	8007b3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <DMA_CalcBaseAndBitshift+0x160>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8007b2e:	e005      	b.n	8007b3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40020010 	.word	0x40020010
 8007b50:	40020028 	.word	0x40020028
 8007b54:	40020040 	.word	0x40020040
 8007b58:	40020058 	.word	0x40020058
 8007b5c:	40020070 	.word	0x40020070
 8007b60:	40020088 	.word	0x40020088
 8007b64:	400200a0 	.word	0x400200a0
 8007b68:	400200b8 	.word	0x400200b8
 8007b6c:	40020410 	.word	0x40020410
 8007b70:	40020428 	.word	0x40020428
 8007b74:	40020440 	.word	0x40020440
 8007b78:	40020458 	.word	0x40020458
 8007b7c:	40020470 	.word	0x40020470
 8007b80:	40020488 	.word	0x40020488
 8007b84:	400204a0 	.word	0x400204a0
 8007b88:	400204b8 	.word	0x400204b8
 8007b8c:	aaaaaaab 	.word	0xaaaaaaab
 8007b90:	0800ebb4 	.word	0x0800ebb4
 8007b94:	fffffc00 	.word	0xfffffc00

08007b98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d120      	bne.n	8007bee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d858      	bhi.n	8007c66 <DMA_CheckFifoParam+0xce>
 8007bb4:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <DMA_CheckFifoParam+0x24>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bdf 	.word	0x08007bdf
 8007bc4:	08007bcd 	.word	0x08007bcd
 8007bc8:	08007c67 	.word	0x08007c67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d048      	beq.n	8007c6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bdc:	e045      	b.n	8007c6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007be6:	d142      	bne.n	8007c6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bec:	e03f      	b.n	8007c6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf6:	d123      	bne.n	8007c40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d838      	bhi.n	8007c72 <DMA_CheckFifoParam+0xda>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <DMA_CheckFifoParam+0x70>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c1f 	.word	0x08007c1f
 8007c10:	08007c19 	.word	0x08007c19
 8007c14:	08007c31 	.word	0x08007c31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8007c1c:	e030      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d025      	beq.n	8007c76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c2e:	e022      	b.n	8007c76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c38:	d11f      	bne.n	8007c7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c3e:	e01c      	b.n	8007c7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d902      	bls.n	8007c4e <DMA_CheckFifoParam+0xb6>
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d003      	beq.n	8007c54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007c4c:	e018      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
        break;
 8007c52:	e015      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
    break;
 8007c64:	e00b      	b.n	8007c7e <DMA_CheckFifoParam+0xe6>
        break;
 8007c66:	bf00      	nop
 8007c68:	e00a      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c6a:	bf00      	nop
 8007c6c:	e008      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c6e:	bf00      	nop
 8007c70:	e006      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c72:	bf00      	nop
 8007c74:	e004      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
    break;
 8007c7e:	bf00      	nop
    }
  }

  return status;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop

08007c90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a38      	ldr	r2, [pc, #224]	; (8007d84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d022      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a36      	ldr	r2, [pc, #216]	; (8007d88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d01d      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a35      	ldr	r2, [pc, #212]	; (8007d8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d018      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a33      	ldr	r2, [pc, #204]	; (8007d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a32      	ldr	r2, [pc, #200]	; (8007d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a30      	ldr	r2, [pc, #192]	; (8007d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a2f      	ldr	r2, [pc, #188]	; (8007d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a2d      	ldr	r2, [pc, #180]	; (8007da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d101      	bne.n	8007cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e000      	b.n	8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01a      	beq.n	8007d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	3b08      	subs	r3, #8
 8007d00:	4a28      	ldr	r2, [pc, #160]	; (8007da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a24      	ldr	r2, [pc, #144]	; (8007dac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007d1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	2201      	movs	r2, #1
 8007d26:	409a      	lsls	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007d2c:	e024      	b.n	8007d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	3b10      	subs	r3, #16
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007d38:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3c:	091b      	lsrs	r3, r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d806      	bhi.n	8007d56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d902      	bls.n	8007d56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3308      	adds	r3, #8
 8007d54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4b18      	ldr	r3, [pc, #96]	; (8007dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007d68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	2201      	movs	r2, #1
 8007d72:	409a      	lsls	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	58025408 	.word	0x58025408
 8007d88:	5802541c 	.word	0x5802541c
 8007d8c:	58025430 	.word	0x58025430
 8007d90:	58025444 	.word	0x58025444
 8007d94:	58025458 	.word	0x58025458
 8007d98:	5802546c 	.word	0x5802546c
 8007d9c:	58025480 	.word	0x58025480
 8007da0:	58025494 	.word	0x58025494
 8007da4:	cccccccd 	.word	0xcccccccd
 8007da8:	16009600 	.word	0x16009600
 8007dac:	58025880 	.word	0x58025880
 8007db0:	aaaaaaab 	.word	0xaaaaaaab
 8007db4:	400204b8 	.word	0x400204b8
 8007db8:	4002040f 	.word	0x4002040f
 8007dbc:	10008200 	.word	0x10008200
 8007dc0:	40020880 	.word	0x40020880

08007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d04a      	beq.n	8007e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d847      	bhi.n	8007e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a25      	ldr	r2, [pc, #148]	; (8007e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d022      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d01d      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a22      	ldr	r2, [pc, #136]	; (8007e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d018      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	; (8007e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00e      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1e      	ldr	r2, [pc, #120]	; (8007e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d009      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1c      	ldr	r2, [pc, #112]	; (8007e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1b      	ldr	r2, [pc, #108]	; (8007e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d101      	bne.n	8007e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007e34:	2300      	movs	r3, #0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4b17      	ldr	r3, [pc, #92]	; (8007e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	461a      	mov	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007e4c:	671a      	str	r2, [r3, #112]	; 0x70
 8007e4e:	e009      	b.n	8007e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007e62:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	2201      	movs	r2, #1
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	58025408 	.word	0x58025408
 8007e80:	5802541c 	.word	0x5802541c
 8007e84:	58025430 	.word	0x58025430
 8007e88:	58025444 	.word	0x58025444
 8007e8c:	58025458 	.word	0x58025458
 8007e90:	5802546c 	.word	0x5802546c
 8007e94:	58025480 	.word	0x58025480
 8007e98:	58025494 	.word	0x58025494
 8007e9c:	1600963f 	.word	0x1600963f
 8007ea0:	58025940 	.word	0x58025940
 8007ea4:	1000823f 	.word	0x1000823f
 8007ea8:	40020940 	.word	0x40020940

08007eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b089      	sub	sp, #36	; 0x24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007eba:	4b86      	ldr	r3, [pc, #536]	; (80080d4 <HAL_GPIO_Init+0x228>)
 8007ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ebe:	e18c      	b.n	80081da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ecc:	4013      	ands	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 817e 	beq.w	80081d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d005      	beq.n	8007ef0 <HAL_GPIO_Init+0x44>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d130      	bne.n	8007f52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	2203      	movs	r2, #3
 8007efc:	fa02 f303 	lsl.w	r3, r2, r3
 8007f00:	43db      	mvns	r3, r3
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	4013      	ands	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f26:	2201      	movs	r2, #1
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	091b      	lsrs	r3, r3, #4
 8007f3c:	f003 0201 	and.w	r2, r3, #1
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d017      	beq.n	8007f8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	2203      	movs	r2, #3
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	4013      	ands	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d123      	bne.n	8007fe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	08da      	lsrs	r2, r3, #3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3208      	adds	r2, #8
 8007fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	220f      	movs	r2, #15
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	43db      	mvns	r3, r3
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	08da      	lsrs	r2, r3, #3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3208      	adds	r2, #8
 8007fdc:	69b9      	ldr	r1, [r7, #24]
 8007fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	2203      	movs	r2, #3
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f003 0203 	and.w	r2, r3, #3
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4313      	orrs	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 80d8 	beq.w	80081d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008024:	4b2c      	ldr	r3, [pc, #176]	; (80080d8 <HAL_GPIO_Init+0x22c>)
 8008026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800802a:	4a2b      	ldr	r2, [pc, #172]	; (80080d8 <HAL_GPIO_Init+0x22c>)
 800802c:	f043 0302 	orr.w	r3, r3, #2
 8008030:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008034:	4b28      	ldr	r3, [pc, #160]	; (80080d8 <HAL_GPIO_Init+0x22c>)
 8008036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008042:	4a26      	ldr	r2, [pc, #152]	; (80080dc <HAL_GPIO_Init+0x230>)
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	089b      	lsrs	r3, r3, #2
 8008048:	3302      	adds	r3, #2
 800804a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800804e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	220f      	movs	r2, #15
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	4013      	ands	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <HAL_GPIO_Init+0x234>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d04a      	beq.n	8008104 <HAL_GPIO_Init+0x258>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1c      	ldr	r2, [pc, #112]	; (80080e4 <HAL_GPIO_Init+0x238>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d02b      	beq.n	80080ce <HAL_GPIO_Init+0x222>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <HAL_GPIO_Init+0x23c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d025      	beq.n	80080ca <HAL_GPIO_Init+0x21e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a1a      	ldr	r2, [pc, #104]	; (80080ec <HAL_GPIO_Init+0x240>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d01f      	beq.n	80080c6 <HAL_GPIO_Init+0x21a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a19      	ldr	r2, [pc, #100]	; (80080f0 <HAL_GPIO_Init+0x244>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d019      	beq.n	80080c2 <HAL_GPIO_Init+0x216>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a18      	ldr	r2, [pc, #96]	; (80080f4 <HAL_GPIO_Init+0x248>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <HAL_GPIO_Init+0x212>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <HAL_GPIO_Init+0x24c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00d      	beq.n	80080ba <HAL_GPIO_Init+0x20e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a16      	ldr	r2, [pc, #88]	; (80080fc <HAL_GPIO_Init+0x250>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d007      	beq.n	80080b6 <HAL_GPIO_Init+0x20a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a15      	ldr	r2, [pc, #84]	; (8008100 <HAL_GPIO_Init+0x254>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d101      	bne.n	80080b2 <HAL_GPIO_Init+0x206>
 80080ae:	2309      	movs	r3, #9
 80080b0:	e029      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080b2:	230a      	movs	r3, #10
 80080b4:	e027      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080b6:	2307      	movs	r3, #7
 80080b8:	e025      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080ba:	2306      	movs	r3, #6
 80080bc:	e023      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080be:	2305      	movs	r3, #5
 80080c0:	e021      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080c2:	2304      	movs	r3, #4
 80080c4:	e01f      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080c6:	2303      	movs	r3, #3
 80080c8:	e01d      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e01b      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e019      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080d2:	bf00      	nop
 80080d4:	58000080 	.word	0x58000080
 80080d8:	58024400 	.word	0x58024400
 80080dc:	58000400 	.word	0x58000400
 80080e0:	58020000 	.word	0x58020000
 80080e4:	58020400 	.word	0x58020400
 80080e8:	58020800 	.word	0x58020800
 80080ec:	58020c00 	.word	0x58020c00
 80080f0:	58021000 	.word	0x58021000
 80080f4:	58021400 	.word	0x58021400
 80080f8:	58021800 	.word	0x58021800
 80080fc:	58021c00 	.word	0x58021c00
 8008100:	58022400 	.word	0x58022400
 8008104:	2300      	movs	r3, #0
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	f002 0203 	and.w	r2, r2, #3
 800810c:	0092      	lsls	r2, r2, #2
 800810e:	4093      	lsls	r3, r2
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008116:	4938      	ldr	r1, [pc, #224]	; (80081f8 <HAL_GPIO_Init+0x34c>)
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	089b      	lsrs	r3, r3, #2
 800811c:	3302      	adds	r3, #2
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	43db      	mvns	r3, r3
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	4013      	ands	r3, r2
 8008134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800814a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	43db      	mvns	r3, r3
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	4013      	ands	r3, r2
 8008162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	43db      	mvns	r3, r3
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	4013      	ands	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	43db      	mvns	r3, r3
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	4013      	ands	r3, r2
 80081b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	fa22 f303 	lsr.w	r3, r2, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f47f ae6b 	bne.w	8007ec0 <HAL_GPIO_Init+0x14>
  }
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	3724      	adds	r7, #36	; 0x24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	58000400 	.word	0x58000400

080081fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800820a:	4b72      	ldr	r3, [pc, #456]	; (80083d4 <HAL_GPIO_DeInit+0x1d8>)
 800820c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800820e:	e0d3      	b.n	80083b8 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008210:	2201      	movs	r2, #1
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	4013      	ands	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80c6 	beq.w	80083b2 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008226:	4a6c      	ldr	r2, [pc, #432]	; (80083d8 <HAL_GPIO_DeInit+0x1dc>)
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	089b      	lsrs	r3, r3, #2
 800822c:	3302      	adds	r3, #2
 800822e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008232:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	220f      	movs	r2, #15
 800823e:	fa02 f303 	lsl.w	r3, r2, r3
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4013      	ands	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a64      	ldr	r2, [pc, #400]	; (80083dc <HAL_GPIO_DeInit+0x1e0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d031      	beq.n	80082b4 <HAL_GPIO_DeInit+0xb8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a63      	ldr	r2, [pc, #396]	; (80083e0 <HAL_GPIO_DeInit+0x1e4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d02b      	beq.n	80082b0 <HAL_GPIO_DeInit+0xb4>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a62      	ldr	r2, [pc, #392]	; (80083e4 <HAL_GPIO_DeInit+0x1e8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d025      	beq.n	80082ac <HAL_GPIO_DeInit+0xb0>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a61      	ldr	r2, [pc, #388]	; (80083e8 <HAL_GPIO_DeInit+0x1ec>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d01f      	beq.n	80082a8 <HAL_GPIO_DeInit+0xac>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a60      	ldr	r2, [pc, #384]	; (80083ec <HAL_GPIO_DeInit+0x1f0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d019      	beq.n	80082a4 <HAL_GPIO_DeInit+0xa8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a5f      	ldr	r2, [pc, #380]	; (80083f0 <HAL_GPIO_DeInit+0x1f4>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d013      	beq.n	80082a0 <HAL_GPIO_DeInit+0xa4>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a5e      	ldr	r2, [pc, #376]	; (80083f4 <HAL_GPIO_DeInit+0x1f8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00d      	beq.n	800829c <HAL_GPIO_DeInit+0xa0>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a5d      	ldr	r2, [pc, #372]	; (80083f8 <HAL_GPIO_DeInit+0x1fc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <HAL_GPIO_DeInit+0x9c>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a5c      	ldr	r2, [pc, #368]	; (80083fc <HAL_GPIO_DeInit+0x200>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d101      	bne.n	8008294 <HAL_GPIO_DeInit+0x98>
 8008290:	2309      	movs	r3, #9
 8008292:	e010      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 8008294:	230a      	movs	r3, #10
 8008296:	e00e      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 8008298:	2307      	movs	r3, #7
 800829a:	e00c      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 800829c:	2306      	movs	r3, #6
 800829e:	e00a      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 80082a0:	2305      	movs	r3, #5
 80082a2:	e008      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 80082a4:	2304      	movs	r3, #4
 80082a6:	e006      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 80082a8:	2303      	movs	r3, #3
 80082aa:	e004      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e002      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <HAL_GPIO_DeInit+0xba>
 80082b4:	2300      	movs	r3, #0
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	f002 0203 	and.w	r2, r2, #3
 80082bc:	0092      	lsls	r2, r2, #2
 80082be:	4093      	lsls	r3, r2
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d136      	bne.n	8008334 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	43db      	mvns	r3, r3
 80082ce:	401a      	ands	r2, r3
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	43db      	mvns	r3, r3
 80082dc:	401a      	ands	r2, r3
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80082e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	43db      	mvns	r3, r3
 80082ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082f0:	4013      	ands	r3, r2
 80082f2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80082f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	43db      	mvns	r3, r3
 80082fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008302:	4013      	ands	r3, r2
 8008304:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	220f      	movs	r2, #15
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008316:	4a30      	ldr	r2, [pc, #192]	; (80083d8 <HAL_GPIO_DeInit+0x1dc>)
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	089b      	lsrs	r3, r3, #2
 800831c:	3302      	adds	r3, #2
 800831e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	43da      	mvns	r2, r3
 8008326:	482c      	ldr	r0, [pc, #176]	; (80083d8 <HAL_GPIO_DeInit+0x1dc>)
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	089b      	lsrs	r3, r3, #2
 800832c:	400a      	ands	r2, r1
 800832e:	3302      	adds	r3, #2
 8008330:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	2103      	movs	r1, #3
 800833e:	fa01 f303 	lsl.w	r3, r1, r3
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	08da      	lsrs	r2, r3, #3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3208      	adds	r2, #8
 8008350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	220f      	movs	r2, #15
 800835e:	fa02 f303 	lsl.w	r3, r2, r3
 8008362:	43db      	mvns	r3, r3
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	08d2      	lsrs	r2, r2, #3
 8008368:	4019      	ands	r1, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3208      	adds	r2, #8
 800836e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	2103      	movs	r1, #3
 800837c:	fa01 f303 	lsl.w	r3, r1, r3
 8008380:	43db      	mvns	r3, r3
 8008382:	401a      	ands	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	2101      	movs	r1, #1
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	fa01 f303 	lsl.w	r3, r1, r3
 8008394:	43db      	mvns	r3, r3
 8008396:	401a      	ands	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	2103      	movs	r1, #3
 80083a6:	fa01 f303 	lsl.w	r3, r1, r3
 80083aa:	43db      	mvns	r3, r3
 80083ac:	401a      	ands	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	3301      	adds	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af25 	bne.w	8008210 <HAL_GPIO_DeInit+0x14>
  }
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	58000080 	.word	0x58000080
 80083d8:	58000400 	.word	0x58000400
 80083dc:	58020000 	.word	0x58020000
 80083e0:	58020400 	.word	0x58020400
 80083e4:	58020800 	.word	0x58020800
 80083e8:	58020c00 	.word	0x58020c00
 80083ec:	58021000 	.word	0x58021000
 80083f0:	58021400 	.word	0x58021400
 80083f4:	58021800 	.word	0x58021800
 80083f8:	58021c00 	.word	0x58021c00
 80083fc:	58022400 	.word	0x58022400

08008400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	807b      	strh	r3, [r7, #2]
 800840c:	4613      	mov	r3, r2
 800840e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008410:	787b      	ldrb	r3, [r7, #1]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008416:	887a      	ldrh	r2, [r7, #2]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800841c:	e003      	b.n	8008426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800841e:	887b      	ldrh	r3, [r7, #2]
 8008420:	041a      	lsls	r2, r3, #16
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	619a      	str	r2, [r3, #24]
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	4603      	mov	r3, r0
 800843a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800843c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008440:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800844c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008450:	88fb      	ldrh	r3, [r7, #6]
 8008452:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 f804 	bl	8008466 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	4603      	mov	r3, r0
 800846e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008484:	4b19      	ldr	r3, [pc, #100]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b04      	cmp	r3, #4
 800848e:	d00a      	beq.n	80084a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008490:	4b16      	ldr	r3, [pc, #88]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	429a      	cmp	r2, r3
 800849c:	d001      	beq.n	80084a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e01f      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e01d      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084a6:	4b11      	ldr	r3, [pc, #68]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f023 0207 	bic.w	r2, r3, #7
 80084ae:	490f      	ldr	r1, [pc, #60]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084b6:	f7fc fbbb 	bl	8004c30 <HAL_GetTick>
 80084ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084bc:	e009      	b.n	80084d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084be:	f7fc fbb7 	bl	8004c30 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084cc:	d901      	bls.n	80084d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e007      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084de:	d1ee      	bne.n	80084be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	58024800 	.word	0x58024800

080084f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08c      	sub	sp, #48	; 0x30
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e39d      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8087 	beq.w	800861e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008510:	4b88      	ldr	r3, [pc, #544]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800851a:	4b86      	ldr	r3, [pc, #536]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b10      	cmp	r3, #16
 8008524:	d007      	beq.n	8008536 <HAL_RCC_OscConfig+0x46>
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	2b18      	cmp	r3, #24
 800852a:	d110      	bne.n	800854e <HAL_RCC_OscConfig+0x5e>
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d10b      	bne.n	800854e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008536:	4b7f      	ldr	r3, [pc, #508]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d06c      	beq.n	800861c <HAL_RCC_OscConfig+0x12c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d168      	bne.n	800861c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e377      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008556:	d106      	bne.n	8008566 <HAL_RCC_OscConfig+0x76>
 8008558:	4b76      	ldr	r3, [pc, #472]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a75      	ldr	r2, [pc, #468]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 800855e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e02e      	b.n	80085c4 <HAL_RCC_OscConfig+0xd4>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10c      	bne.n	8008588 <HAL_RCC_OscConfig+0x98>
 800856e:	4b71      	ldr	r3, [pc, #452]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a70      	ldr	r2, [pc, #448]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	4b6e      	ldr	r3, [pc, #440]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a6d      	ldr	r2, [pc, #436]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	e01d      	b.n	80085c4 <HAL_RCC_OscConfig+0xd4>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008590:	d10c      	bne.n	80085ac <HAL_RCC_OscConfig+0xbc>
 8008592:	4b68      	ldr	r3, [pc, #416]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a67      	ldr	r2, [pc, #412]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	4b65      	ldr	r3, [pc, #404]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a64      	ldr	r2, [pc, #400]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80085a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e00b      	b.n	80085c4 <HAL_RCC_OscConfig+0xd4>
 80085ac:	4b61      	ldr	r3, [pc, #388]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a60      	ldr	r2, [pc, #384]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80085b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	4b5e      	ldr	r3, [pc, #376]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a5d      	ldr	r2, [pc, #372]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80085be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d013      	beq.n	80085f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085cc:	f7fc fb30 	bl	8004c30 <HAL_GetTick>
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085d4:	f7fc fb2c 	bl	8004c30 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b64      	cmp	r3, #100	; 0x64
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e32b      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085e6:	4b53      	ldr	r3, [pc, #332]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0f0      	beq.n	80085d4 <HAL_RCC_OscConfig+0xe4>
 80085f2:	e014      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f4:	f7fc fb1c 	bl	8004c30 <HAL_GetTick>
 80085f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085fa:	e008      	b.n	800860e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085fc:	f7fc fb18 	bl	8004c30 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b64      	cmp	r3, #100	; 0x64
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e317      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800860e:	4b49      	ldr	r3, [pc, #292]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1f0      	bne.n	80085fc <HAL_RCC_OscConfig+0x10c>
 800861a:	e000      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800861c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 808c 	beq.w	8008744 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800862c:	4b41      	ldr	r3, [pc, #260]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008634:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008636:	4b3f      	ldr	r3, [pc, #252]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <HAL_RCC_OscConfig+0x162>
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	2b18      	cmp	r3, #24
 8008646:	d137      	bne.n	80086b8 <HAL_RCC_OscConfig+0x1c8>
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d132      	bne.n	80086b8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008652:	4b38      	ldr	r3, [pc, #224]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0304 	and.w	r3, r3, #4
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_RCC_OscConfig+0x17a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e2e9      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800866a:	4b32      	ldr	r3, [pc, #200]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f023 0219 	bic.w	r2, r3, #25
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	492f      	ldr	r1, [pc, #188]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008678:	4313      	orrs	r3, r2
 800867a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800867c:	f7fc fad8 	bl	8004c30 <HAL_GetTick>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008684:	f7fc fad4 	bl	8004c30 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e2d3      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008696:	4b27      	ldr	r3, [pc, #156]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0f0      	beq.n	8008684 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086a2:	4b24      	ldr	r3, [pc, #144]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	061b      	lsls	r3, r3, #24
 80086b0:	4920      	ldr	r1, [pc, #128]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086b6:	e045      	b.n	8008744 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d026      	beq.n	800870e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086c0:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f023 0219 	bic.w	r2, r3, #25
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4919      	ldr	r1, [pc, #100]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d2:	f7fc faad 	bl	8004c30 <HAL_GetTick>
 80086d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d8:	e008      	b.n	80086ec <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086da:	f7fc faa9 	bl	8004c30 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d901      	bls.n	80086ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e2a8      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086ec:	4b11      	ldr	r3, [pc, #68]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0f0      	beq.n	80086da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	061b      	lsls	r3, r3, #24
 8008706:	490b      	ldr	r1, [pc, #44]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008708:	4313      	orrs	r3, r2
 800870a:	604b      	str	r3, [r1, #4]
 800870c:	e01a      	b.n	8008744 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800870e:	4b09      	ldr	r3, [pc, #36]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a08      	ldr	r2, [pc, #32]	; (8008734 <HAL_RCC_OscConfig+0x244>)
 8008714:	f023 0301 	bic.w	r3, r3, #1
 8008718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871a:	f7fc fa89 	bl	8004c30 <HAL_GetTick>
 800871e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008720:	e00a      	b.n	8008738 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008722:	f7fc fa85 	bl	8004c30 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d903      	bls.n	8008738 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e284      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
 8008734:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008738:	4b96      	ldr	r3, [pc, #600]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1ee      	bne.n	8008722 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d06a      	beq.n	8008826 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008750:	4b90      	ldr	r3, [pc, #576]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008758:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800875a:	4b8e      	ldr	r3, [pc, #568]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2b08      	cmp	r3, #8
 8008764:	d007      	beq.n	8008776 <HAL_RCC_OscConfig+0x286>
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b18      	cmp	r3, #24
 800876a:	d11b      	bne.n	80087a4 <HAL_RCC_OscConfig+0x2b4>
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b01      	cmp	r3, #1
 8008774:	d116      	bne.n	80087a4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008776:	4b87      	ldr	r3, [pc, #540]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <HAL_RCC_OscConfig+0x29e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d001      	beq.n	800878e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e257      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800878e:	4b81      	ldr	r3, [pc, #516]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	061b      	lsls	r3, r3, #24
 800879c:	497d      	ldr	r1, [pc, #500]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087a2:	e040      	b.n	8008826 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d023      	beq.n	80087f4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087ac:	4b79      	ldr	r3, [pc, #484]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a78      	ldr	r2, [pc, #480]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80087b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b8:	f7fc fa3a 	bl	8004c30 <HAL_GetTick>
 80087bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087c0:	f7fc fa36 	bl	8004c30 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e235      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087d2:	4b70      	ldr	r3, [pc, #448]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0f0      	beq.n	80087c0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087de:	4b6d      	ldr	r3, [pc, #436]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	061b      	lsls	r3, r3, #24
 80087ec:	4969      	ldr	r1, [pc, #420]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60cb      	str	r3, [r1, #12]
 80087f2:	e018      	b.n	8008826 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087f4:	4b67      	ldr	r3, [pc, #412]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a66      	ldr	r2, [pc, #408]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80087fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fc fa16 	bl	8004c30 <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008808:	f7fc fa12 	bl	8004c30 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e211      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800881a:	4b5e      	ldr	r3, [pc, #376]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d036      	beq.n	80088a0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d019      	beq.n	800886e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800883a:	4b56      	ldr	r3, [pc, #344]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800883c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883e:	4a55      	ldr	r2, [pc, #340]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008840:	f043 0301 	orr.w	r3, r3, #1
 8008844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008846:	f7fc f9f3 	bl	8004c30 <HAL_GetTick>
 800884a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800884c:	e008      	b.n	8008860 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800884e:	f7fc f9ef 	bl	8004c30 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e1ee      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008860:	4b4c      	ldr	r3, [pc, #304]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0f0      	beq.n	800884e <HAL_RCC_OscConfig+0x35e>
 800886c:	e018      	b.n	80088a0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800886e:	4b49      	ldr	r3, [pc, #292]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008872:	4a48      	ldr	r2, [pc, #288]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008874:	f023 0301 	bic.w	r3, r3, #1
 8008878:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800887a:	f7fc f9d9 	bl	8004c30 <HAL_GetTick>
 800887e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008880:	e008      	b.n	8008894 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008882:	f7fc f9d5 	bl	8004c30 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d901      	bls.n	8008894 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e1d4      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008894:	4b3f      	ldr	r3, [pc, #252]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f0      	bne.n	8008882 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0320 	and.w	r3, r3, #32
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d036      	beq.n	800891a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d019      	beq.n	80088e8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088b4:	4b37      	ldr	r3, [pc, #220]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a36      	ldr	r2, [pc, #216]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80088ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088c0:	f7fc f9b6 	bl	8004c30 <HAL_GetTick>
 80088c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088c8:	f7fc f9b2 	bl	8004c30 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e1b1      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088da:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0f0      	beq.n	80088c8 <HAL_RCC_OscConfig+0x3d8>
 80088e6:	e018      	b.n	800891a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088e8:	4b2a      	ldr	r3, [pc, #168]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a29      	ldr	r2, [pc, #164]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 80088ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088f4:	f7fc f99c 	bl	8004c30 <HAL_GetTick>
 80088f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088fc:	f7fc f998 	bl	8004c30 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e197      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800890e:	4b21      	ldr	r3, [pc, #132]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f0      	bne.n	80088fc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8086 	beq.w	8008a34 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008928:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <HAL_RCC_OscConfig+0x4a8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a1a      	ldr	r2, [pc, #104]	; (8008998 <HAL_RCC_OscConfig+0x4a8>)
 800892e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008934:	f7fc f97c 	bl	8004c30 <HAL_GetTick>
 8008938:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800893c:	f7fc f978 	bl	8004c30 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b64      	cmp	r3, #100	; 0x64
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e177      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <HAL_RCC_OscConfig+0x4a8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0f0      	beq.n	800893c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d106      	bne.n	8008970 <HAL_RCC_OscConfig+0x480>
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008966:	4a0b      	ldr	r2, [pc, #44]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	6713      	str	r3, [r2, #112]	; 0x70
 800896e:	e032      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e6>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d111      	bne.n	800899c <HAL_RCC_OscConfig+0x4ac>
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800897a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897c:	4a05      	ldr	r2, [pc, #20]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	6713      	str	r3, [r2, #112]	; 0x70
 8008984:	4b03      	ldr	r3, [pc, #12]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 8008986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008988:	4a02      	ldr	r2, [pc, #8]	; (8008994 <HAL_RCC_OscConfig+0x4a4>)
 800898a:	f023 0304 	bic.w	r3, r3, #4
 800898e:	6713      	str	r3, [r2, #112]	; 0x70
 8008990:	e021      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e6>
 8008992:	bf00      	nop
 8008994:	58024400 	.word	0x58024400
 8008998:	58024800 	.word	0x58024800
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2b05      	cmp	r3, #5
 80089a2:	d10c      	bne.n	80089be <HAL_RCC_OscConfig+0x4ce>
 80089a4:	4b83      	ldr	r3, [pc, #524]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	4a82      	ldr	r2, [pc, #520]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089aa:	f043 0304 	orr.w	r3, r3, #4
 80089ae:	6713      	str	r3, [r2, #112]	; 0x70
 80089b0:	4b80      	ldr	r3, [pc, #512]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b4:	4a7f      	ldr	r2, [pc, #508]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089b6:	f043 0301 	orr.w	r3, r3, #1
 80089ba:	6713      	str	r3, [r2, #112]	; 0x70
 80089bc:	e00b      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e6>
 80089be:	4b7d      	ldr	r3, [pc, #500]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	4a7c      	ldr	r2, [pc, #496]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089c4:	f023 0301 	bic.w	r3, r3, #1
 80089c8:	6713      	str	r3, [r2, #112]	; 0x70
 80089ca:	4b7a      	ldr	r3, [pc, #488]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ce:	4a79      	ldr	r2, [pc, #484]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089d0:	f023 0304 	bic.w	r3, r3, #4
 80089d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d015      	beq.n	8008a0a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089de:	f7fc f927 	bl	8004c30 <HAL_GetTick>
 80089e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e4:	e00a      	b.n	80089fc <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089e6:	f7fc f923 	bl	8004c30 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d901      	bls.n	80089fc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e120      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089fc:	4b6d      	ldr	r3, [pc, #436]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 80089fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0ee      	beq.n	80089e6 <HAL_RCC_OscConfig+0x4f6>
 8008a08:	e014      	b.n	8008a34 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0a:	f7fc f911 	bl	8004c30 <HAL_GetTick>
 8008a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a10:	e00a      	b.n	8008a28 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a12:	f7fc f90d 	bl	8004c30 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e10a      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a28:	4b62      	ldr	r3, [pc, #392]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2c:	f003 0302 	and.w	r3, r3, #2
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1ee      	bne.n	8008a12 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80ff 	beq.w	8008c3c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a3e:	4b5d      	ldr	r3, [pc, #372]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a46:	2b18      	cmp	r3, #24
 8008a48:	f000 80ba 	beq.w	8008bc0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	f040 8095 	bne.w	8008b80 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a56:	4b57      	ldr	r3, [pc, #348]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a56      	ldr	r2, [pc, #344]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a62:	f7fc f8e5 	bl	8004c30 <HAL_GetTick>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a68:	e008      	b.n	8008a7c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a6a:	f7fc f8e1 	bl	8004c30 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d901      	bls.n	8008a7c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e0e0      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a7c:	4b4d      	ldr	r3, [pc, #308]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1f0      	bne.n	8008a6a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a88:	4b4a      	ldr	r3, [pc, #296]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a8c:	4b4a      	ldr	r3, [pc, #296]	; (8008bb8 <HAL_RCC_OscConfig+0x6c8>)
 8008a8e:	4013      	ands	r3, r2
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a98:	0112      	lsls	r2, r2, #4
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	4945      	ldr	r1, [pc, #276]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	628b      	str	r3, [r1, #40]	; 0x28
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	025b      	lsls	r3, r3, #9
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	3b01      	subs	r3, #1
 8008abe:	041b      	lsls	r3, r3, #16
 8008ac0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aca:	3b01      	subs	r3, #1
 8008acc:	061b      	lsls	r3, r3, #24
 8008ace:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ad2:	4938      	ldr	r1, [pc, #224]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ad8:	4b36      	ldr	r3, [pc, #216]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	4a35      	ldr	r2, [pc, #212]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008ade:	f023 0301 	bic.w	r3, r3, #1
 8008ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ae4:	4b33      	ldr	r3, [pc, #204]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ae8:	4b34      	ldr	r3, [pc, #208]	; (8008bbc <HAL_RCC_OscConfig+0x6cc>)
 8008aea:	4013      	ands	r3, r2
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008af0:	00d2      	lsls	r2, r2, #3
 8008af2:	4930      	ldr	r1, [pc, #192]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008af8:	4b2e      	ldr	r3, [pc, #184]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	f023 020c 	bic.w	r2, r3, #12
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b04:	492b      	ldr	r1, [pc, #172]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b0a:	4b2a      	ldr	r3, [pc, #168]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	f023 0202 	bic.w	r2, r3, #2
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b16:	4927      	ldr	r1, [pc, #156]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b1c:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b20:	4a24      	ldr	r2, [pc, #144]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b28:	4b22      	ldr	r3, [pc, #136]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	4a21      	ldr	r2, [pc, #132]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b34:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	4a1e      	ldr	r2, [pc, #120]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b40:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	4a1b      	ldr	r2, [pc, #108]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b4c:	4b19      	ldr	r3, [pc, #100]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a18      	ldr	r2, [pc, #96]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b58:	f7fc f86a 	bl	8004c30 <HAL_GetTick>
 8008b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fc f866 	bl	8004c30 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e065      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b72:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0f0      	beq.n	8008b60 <HAL_RCC_OscConfig+0x670>
 8008b7e:	e05d      	b.n	8008c3c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b80:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a0b      	ldr	r2, [pc, #44]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8c:	f7fc f850 	bl	8004c30 <HAL_GetTick>
 8008b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b94:	f7fc f84c 	bl	8004c30 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e04b      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ba6:	4b03      	ldr	r3, [pc, #12]	; (8008bb4 <HAL_RCC_OscConfig+0x6c4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f0      	bne.n	8008b94 <HAL_RCC_OscConfig+0x6a4>
 8008bb2:	e043      	b.n	8008c3c <HAL_RCC_OscConfig+0x74c>
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	fffffc0c 	.word	0xfffffc0c
 8008bbc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008bc0:	4b21      	ldr	r3, [pc, #132]	; (8008c48 <HAL_RCC_OscConfig+0x758>)
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bc6:	4b20      	ldr	r3, [pc, #128]	; (8008c48 <HAL_RCC_OscConfig+0x758>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d031      	beq.n	8008c38 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f003 0203 	and.w	r2, r3, #3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d12a      	bne.n	8008c38 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	091b      	lsrs	r3, r3, #4
 8008be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d122      	bne.n	8008c38 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d11a      	bne.n	8008c38 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	0a5b      	lsrs	r3, r3, #9
 8008c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d111      	bne.n	8008c38 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	0c1b      	lsrs	r3, r3, #16
 8008c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d108      	bne.n	8008c38 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	0e1b      	lsrs	r3, r3, #24
 8008c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d001      	beq.n	8008c3c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e000      	b.n	8008c3e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3730      	adds	r7, #48	; 0x30
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	58024400 	.word	0x58024400

08008c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e19c      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c60:	4b8a      	ldr	r3, [pc, #552]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d910      	bls.n	8008c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c6e:	4b87      	ldr	r3, [pc, #540]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f023 020f 	bic.w	r2, r3, #15
 8008c76:	4985      	ldr	r1, [pc, #532]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c7e:	4b83      	ldr	r3, [pc, #524]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 030f 	and.w	r3, r3, #15
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d001      	beq.n	8008c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e184      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d010      	beq.n	8008cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	4b7b      	ldr	r3, [pc, #492]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d908      	bls.n	8008cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cac:	4b78      	ldr	r3, [pc, #480]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	4975      	ldr	r1, [pc, #468]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d010      	beq.n	8008cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695a      	ldr	r2, [r3, #20]
 8008cce:	4b70      	ldr	r3, [pc, #448]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d908      	bls.n	8008cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cda:	4b6d      	ldr	r3, [pc, #436]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	496a      	ldr	r1, [pc, #424]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0310 	and.w	r3, r3, #16
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699a      	ldr	r2, [r3, #24]
 8008cfc:	4b64      	ldr	r3, [pc, #400]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d908      	bls.n	8008d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d08:	4b61      	ldr	r3, [pc, #388]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	495e      	ldr	r1, [pc, #376]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d010      	beq.n	8008d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69da      	ldr	r2, [r3, #28]
 8008d2a:	4b59      	ldr	r3, [pc, #356]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d908      	bls.n	8008d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d36:	4b56      	ldr	r3, [pc, #344]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	4953      	ldr	r1, [pc, #332]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d010      	beq.n	8008d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	4b4d      	ldr	r3, [pc, #308]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d908      	bls.n	8008d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d64:	4b4a      	ldr	r3, [pc, #296]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f023 020f 	bic.w	r2, r3, #15
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	4947      	ldr	r1, [pc, #284]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d055      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d82:	4b43      	ldr	r3, [pc, #268]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	4940      	ldr	r1, [pc, #256]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d107      	bne.n	8008dac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d9c:	4b3c      	ldr	r3, [pc, #240]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d121      	bne.n	8008dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0f6      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d107      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008db4:	4b36      	ldr	r3, [pc, #216]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d115      	bne.n	8008dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0ea      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d107      	bne.n	8008ddc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dcc:	4b30      	ldr	r3, [pc, #192]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0de      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ddc:	4b2c      	ldr	r3, [pc, #176]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e0d6      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dec:	4b28      	ldr	r3, [pc, #160]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f023 0207 	bic.w	r2, r3, #7
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4925      	ldr	r1, [pc, #148]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dfe:	f7fb ff17 	bl	8004c30 <HAL_GetTick>
 8008e02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e04:	e00a      	b.n	8008e1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e06:	f7fb ff13 	bl	8004c30 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e0be      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1c:	4b1c      	ldr	r3, [pc, #112]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d1eb      	bne.n	8008e06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d010      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	4b14      	ldr	r3, [pc, #80]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d208      	bcs.n	8008e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e4a:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f023 020f 	bic.w	r2, r3, #15
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	490e      	ldr	r1, [pc, #56]	; (8008e90 <HAL_RCC_ClockConfig+0x244>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d214      	bcs.n	8008e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e6a:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f023 020f 	bic.w	r2, r3, #15
 8008e72:	4906      	ldr	r1, [pc, #24]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e7a:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <HAL_RCC_ClockConfig+0x240>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d005      	beq.n	8008e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e086      	b.n	8008f9a <HAL_RCC_ClockConfig+0x34e>
 8008e8c:	52002000 	.word	0x52002000
 8008e90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	4b3f      	ldr	r3, [pc, #252]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d208      	bcs.n	8008ec2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008eb0:	4b3c      	ldr	r3, [pc, #240]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	4939      	ldr	r1, [pc, #228]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695a      	ldr	r2, [r3, #20]
 8008ed2:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d208      	bcs.n	8008ef0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ede:	4b31      	ldr	r3, [pc, #196]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	492e      	ldr	r1, [pc, #184]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d010      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	699a      	ldr	r2, [r3, #24]
 8008f00:	4b28      	ldr	r3, [pc, #160]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d208      	bcs.n	8008f1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f0c:	4b25      	ldr	r3, [pc, #148]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	4922      	ldr	r1, [pc, #136]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d010      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69da      	ldr	r2, [r3, #28]
 8008f2e:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d208      	bcs.n	8008f4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	4917      	ldr	r1, [pc, #92]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f4c:	f000 f834 	bl	8008fb8 <HAL_RCC_GetSysClockFreq>
 8008f50:	4602      	mov	r2, r0
 8008f52:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	f003 030f 	and.w	r3, r3, #15
 8008f5c:	4912      	ldr	r1, [pc, #72]	; (8008fa8 <HAL_RCC_ClockConfig+0x35c>)
 8008f5e:	5ccb      	ldrb	r3, [r1, r3]
 8008f60:	f003 031f 	and.w	r3, r3, #31
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f6a:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <HAL_RCC_ClockConfig+0x358>)
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	4a0d      	ldr	r2, [pc, #52]	; (8008fa8 <HAL_RCC_ClockConfig+0x35c>)
 8008f74:	5cd3      	ldrb	r3, [r2, r3]
 8008f76:	f003 031f 	and.w	r3, r3, #31
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f80:	4a0a      	ldr	r2, [pc, #40]	; (8008fac <HAL_RCC_ClockConfig+0x360>)
 8008f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f84:	4a0a      	ldr	r2, [pc, #40]	; (8008fb0 <HAL_RCC_ClockConfig+0x364>)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f8a:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <HAL_RCC_ClockConfig+0x368>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fb fe04 	bl	8004b9c <HAL_InitTick>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	0800eba4 	.word	0x0800eba4
 8008fac:	240001a4 	.word	0x240001a4
 8008fb0:	240001a0 	.word	0x240001a0
 8008fb4:	240001a8 	.word	0x240001a8

08008fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b089      	sub	sp, #36	; 0x24
 8008fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fbe:	4bb3      	ldr	r3, [pc, #716]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fc6:	2b18      	cmp	r3, #24
 8008fc8:	f200 8155 	bhi.w	8009276 <HAL_RCC_GetSysClockFreq+0x2be>
 8008fcc:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08009039 	.word	0x08009039
 8008fd8:	08009277 	.word	0x08009277
 8008fdc:	08009277 	.word	0x08009277
 8008fe0:	08009277 	.word	0x08009277
 8008fe4:	08009277 	.word	0x08009277
 8008fe8:	08009277 	.word	0x08009277
 8008fec:	08009277 	.word	0x08009277
 8008ff0:	08009277 	.word	0x08009277
 8008ff4:	0800905f 	.word	0x0800905f
 8008ff8:	08009277 	.word	0x08009277
 8008ffc:	08009277 	.word	0x08009277
 8009000:	08009277 	.word	0x08009277
 8009004:	08009277 	.word	0x08009277
 8009008:	08009277 	.word	0x08009277
 800900c:	08009277 	.word	0x08009277
 8009010:	08009277 	.word	0x08009277
 8009014:	08009065 	.word	0x08009065
 8009018:	08009277 	.word	0x08009277
 800901c:	08009277 	.word	0x08009277
 8009020:	08009277 	.word	0x08009277
 8009024:	08009277 	.word	0x08009277
 8009028:	08009277 	.word	0x08009277
 800902c:	08009277 	.word	0x08009277
 8009030:	08009277 	.word	0x08009277
 8009034:	0800906b 	.word	0x0800906b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009038:	4b94      	ldr	r3, [pc, #592]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0320 	and.w	r3, r3, #32
 8009040:	2b00      	cmp	r3, #0
 8009042:	d009      	beq.n	8009058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009044:	4b91      	ldr	r3, [pc, #580]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	08db      	lsrs	r3, r3, #3
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	4a90      	ldr	r2, [pc, #576]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009050:	fa22 f303 	lsr.w	r3, r2, r3
 8009054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009056:	e111      	b.n	800927c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009058:	4b8d      	ldr	r3, [pc, #564]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800905a:	61bb      	str	r3, [r7, #24]
    break;
 800905c:	e10e      	b.n	800927c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800905e:	4b8d      	ldr	r3, [pc, #564]	; (8009294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009060:	61bb      	str	r3, [r7, #24]
    break;
 8009062:	e10b      	b.n	800927c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009064:	4b8c      	ldr	r3, [pc, #560]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009066:	61bb      	str	r3, [r7, #24]
    break;
 8009068:	e108      	b.n	800927c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800906a:	4b88      	ldr	r3, [pc, #544]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009074:	4b85      	ldr	r3, [pc, #532]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800907e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009080:	4b82      	ldr	r3, [pc, #520]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800908a:	4b80      	ldr	r3, [pc, #512]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	08db      	lsrs	r3, r3, #3
 8009090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	fb02 f303 	mul.w	r3, r2, r3
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80e1 	beq.w	8009270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	f000 8083 	beq.w	80091bc <HAL_RCC_GetSysClockFreq+0x204>
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	f200 80a1 	bhi.w	8009200 <HAL_RCC_GetSysClockFreq+0x248>
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <HAL_RCC_GetSysClockFreq+0x114>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d056      	beq.n	8009178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80090ca:	e099      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090cc:	4b6f      	ldr	r3, [pc, #444]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d02d      	beq.n	8009134 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090d8:	4b6c      	ldr	r3, [pc, #432]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	08db      	lsrs	r3, r3, #3
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	4a6b      	ldr	r2, [pc, #428]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090e4:	fa22 f303 	lsr.w	r3, r2, r3
 80090e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	ee07 3a90 	vmov	s15, r3
 80090f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b62      	ldr	r3, [pc, #392]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a02 	vldr	s12, [r7, #8]
 8009116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800929c <HAL_RCC_GetSysClockFreq+0x2e4>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009132:	e087      	b.n	8009244 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80092a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b51      	ldr	r3, [pc, #324]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a02 	vldr	s12, [r7, #8]
 800915a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800929c <HAL_RCC_GetSysClockFreq+0x2e4>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009176:	e065      	b.n	8009244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a48 	vldr	s13, [pc, #288]	; 80092a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b40      	ldr	r3, [pc, #256]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a02 	vldr	s12, [r7, #8]
 800919e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800929c <HAL_RCC_GetSysClockFreq+0x2e4>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ba:	e043      	b.n	8009244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b2f      	ldr	r3, [pc, #188]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091de:	ed97 6a02 	vldr	s12, [r7, #8]
 80091e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800929c <HAL_RCC_GetSysClockFreq+0x2e4>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091fe:	e021      	b.n	8009244 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80092a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800920e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009212:	4b1e      	ldr	r3, [pc, #120]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009222:	ed97 6a02 	vldr	s12, [r7, #8]
 8009226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800929c <HAL_RCC_GetSysClockFreq+0x2e4>
 800922a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800922e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800923e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009242:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009248:	0a5b      	lsrs	r3, r3, #9
 800924a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800924e:	3301      	adds	r3, #1
 8009250:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800925c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009268:	ee17 3a90 	vmov	r3, s15
 800926c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800926e:	e005      	b.n	800927c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	61bb      	str	r3, [r7, #24]
    break;
 8009274:	e002      	b.n	800927c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009276:	4b07      	ldr	r3, [pc, #28]	; (8009294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009278:	61bb      	str	r3, [r7, #24]
    break;
 800927a:	bf00      	nop
  }

  return sysclockfreq;
 800927c:	69bb      	ldr	r3, [r7, #24]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3724      	adds	r7, #36	; 0x24
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	58024400 	.word	0x58024400
 8009290:	03d09000 	.word	0x03d09000
 8009294:	003d0900 	.word	0x003d0900
 8009298:	007a1200 	.word	0x007a1200
 800929c:	46000000 	.word	0x46000000
 80092a0:	4c742400 	.word	0x4c742400
 80092a4:	4a742400 	.word	0x4a742400
 80092a8:	4af42400 	.word	0x4af42400

080092ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092b2:	f7ff fe81 	bl	8008fb8 <HAL_RCC_GetSysClockFreq>
 80092b6:	4602      	mov	r2, r0
 80092b8:	4b10      	ldr	r3, [pc, #64]	; (80092fc <HAL_RCC_GetHCLKFreq+0x50>)
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	0a1b      	lsrs	r3, r3, #8
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	490f      	ldr	r1, [pc, #60]	; (8009300 <HAL_RCC_GetHCLKFreq+0x54>)
 80092c4:	5ccb      	ldrb	r3, [r1, r3]
 80092c6:	f003 031f 	and.w	r3, r3, #31
 80092ca:	fa22 f303 	lsr.w	r3, r2, r3
 80092ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <HAL_RCC_GetHCLKFreq+0x50>)
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	4a09      	ldr	r2, [pc, #36]	; (8009300 <HAL_RCC_GetHCLKFreq+0x54>)
 80092da:	5cd3      	ldrb	r3, [r2, r3]
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	fa22 f303 	lsr.w	r3, r2, r3
 80092e6:	4a07      	ldr	r2, [pc, #28]	; (8009304 <HAL_RCC_GetHCLKFreq+0x58>)
 80092e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092ea:	4a07      	ldr	r2, [pc, #28]	; (8009308 <HAL_RCC_GetHCLKFreq+0x5c>)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092f0:	4b04      	ldr	r3, [pc, #16]	; (8009304 <HAL_RCC_GetHCLKFreq+0x58>)
 80092f2:	681b      	ldr	r3, [r3, #0]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	58024400 	.word	0x58024400
 8009300:	0800eba4 	.word	0x0800eba4
 8009304:	240001a4 	.word	0x240001a4
 8009308:	240001a0 	.word	0x240001a0

0800930c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009310:	f7ff ffcc 	bl	80092ac <HAL_RCC_GetHCLKFreq>
 8009314:	4602      	mov	r2, r0
 8009316:	4b06      	ldr	r3, [pc, #24]	; (8009330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	091b      	lsrs	r3, r3, #4
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	4904      	ldr	r1, [pc, #16]	; (8009334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009322:	5ccb      	ldrb	r3, [r1, r3]
 8009324:	f003 031f 	and.w	r3, r3, #31
 8009328:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800932c:	4618      	mov	r0, r3
 800932e:	bd80      	pop	{r7, pc}
 8009330:	58024400 	.word	0x58024400
 8009334:	0800eba4 	.word	0x0800eba4

08009338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800933c:	f7ff ffb6 	bl	80092ac <HAL_RCC_GetHCLKFreq>
 8009340:	4602      	mov	r2, r0
 8009342:	4b06      	ldr	r3, [pc, #24]	; (800935c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	0a1b      	lsrs	r3, r3, #8
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	4904      	ldr	r1, [pc, #16]	; (8009360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800934e:	5ccb      	ldrb	r3, [r1, r3]
 8009350:	f003 031f 	and.w	r3, r3, #31
 8009354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009358:	4618      	mov	r0, r3
 800935a:	bd80      	pop	{r7, pc}
 800935c:	58024400 	.word	0x58024400
 8009360:	0800eba4 	.word	0x0800eba4

08009364 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800936c:	2300      	movs	r3, #0
 800936e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009370:	2300      	movs	r3, #0
 8009372:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d03f      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009388:	d02a      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800938a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800938e:	d824      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009394:	d018      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800939a:	d81e      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80093a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093a4:	d007      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80093a6:	e018      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a8:	4ba4      	ldr	r3, [pc, #656]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	4aa3      	ldr	r2, [pc, #652]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093b4:	e015      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3304      	adds	r3, #4
 80093ba:	2102      	movs	r1, #2
 80093bc:	4618      	mov	r0, r3
 80093be:	f001 f989 	bl	800a6d4 <RCCEx_PLL2_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093c6:	e00c      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3324      	adds	r3, #36	; 0x24
 80093cc:	2102      	movs	r1, #2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 fa32 	bl	800a838 <RCCEx_PLL3_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093d8:	e003      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
      break;
 80093de:	e000      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80093e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093e8:	4b94      	ldr	r3, [pc, #592]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f4:	4991      	ldr	r1, [pc, #580]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	650b      	str	r3, [r1, #80]	; 0x50
 80093fa:	e001      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009408:	2b00      	cmp	r3, #0
 800940a:	d03d      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009410:	2b04      	cmp	r3, #4
 8009412:	d826      	bhi.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009414:	a201      	add	r2, pc, #4	; (adr r2, 800941c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009431 	.word	0x08009431
 8009420:	0800943f 	.word	0x0800943f
 8009424:	08009451 	.word	0x08009451
 8009428:	08009469 	.word	0x08009469
 800942c:	08009469 	.word	0x08009469
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009430:	4b82      	ldr	r3, [pc, #520]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a81      	ldr	r2, [pc, #516]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800943a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800943c:	e015      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3304      	adds	r3, #4
 8009442:	2100      	movs	r1, #0
 8009444:	4618      	mov	r0, r3
 8009446:	f001 f945 	bl	800a6d4 <RCCEx_PLL2_Config>
 800944a:	4603      	mov	r3, r0
 800944c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800944e:	e00c      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3324      	adds	r3, #36	; 0x24
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f001 f9ee 	bl	800a838 <RCCEx_PLL3_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009460:	e003      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	75fb      	strb	r3, [r7, #23]
      break;
 8009466:	e000      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009470:	4b72      	ldr	r3, [pc, #456]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	f023 0207 	bic.w	r2, r3, #7
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947c:	496f      	ldr	r1, [pc, #444]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800947e:	4313      	orrs	r3, r2
 8009480:	650b      	str	r3, [r1, #80]	; 0x50
 8009482:	e001      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009490:	2b00      	cmp	r3, #0
 8009492:	d051      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800949a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800949e:	d036      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80094a0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80094a4:	d830      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094aa:	d032      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80094ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094b0:	d82a      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094b6:	d02e      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80094b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094bc:	d824      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c2:	d018      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80094c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c8:	d81e      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80094ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094d2:	d007      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80094d4:	e018      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d6:	4b59      	ldr	r3, [pc, #356]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	4a58      	ldr	r2, [pc, #352]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094e2:	e019      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3304      	adds	r3, #4
 80094e8:	2100      	movs	r1, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f001 f8f2 	bl	800a6d4 <RCCEx_PLL2_Config>
 80094f0:	4603      	mov	r3, r0
 80094f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094f4:	e010      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3324      	adds	r3, #36	; 0x24
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 f99b 	bl	800a838 <RCCEx_PLL3_Config>
 8009502:	4603      	mov	r3, r0
 8009504:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009506:	e007      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	75fb      	strb	r3, [r7, #23]
      break;
 800950c:	e004      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800950e:	bf00      	nop
 8009510:	e002      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800951e:	4b47      	ldr	r3, [pc, #284]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009522:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800952c:	4943      	ldr	r1, [pc, #268]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800952e:	4313      	orrs	r3, r2
 8009530:	658b      	str	r3, [r1, #88]	; 0x58
 8009532:	e001      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009540:	2b00      	cmp	r3, #0
 8009542:	d051      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800954a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800954e:	d036      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009550:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009554:	d830      	bhi.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800955a:	d032      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800955c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009560:	d82a      	bhi.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009566:	d02e      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800956c:	d824      	bhi.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800956e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009572:	d018      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009578:	d81e      	bhi.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800957e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009582:	d007      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009584:	e018      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009586:	4b2d      	ldr	r3, [pc, #180]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	4a2c      	ldr	r2, [pc, #176]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800958c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009592:	e019      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	2100      	movs	r1, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f001 f89a 	bl	800a6d4 <RCCEx_PLL2_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80095a4:	e010      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3324      	adds	r3, #36	; 0x24
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 f943 	bl	800a838 <RCCEx_PLL3_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095b6:	e007      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
      break;
 80095bc:	e004      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095be:	bf00      	nop
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095ce:	4b1b      	ldr	r3, [pc, #108]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095dc:	4917      	ldr	r1, [pc, #92]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	658b      	str	r3, [r1, #88]	; 0x58
 80095e2:	e001      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d035      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f8:	2b30      	cmp	r3, #48	; 0x30
 80095fa:	d01c      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80095fc:	2b30      	cmp	r3, #48	; 0x30
 80095fe:	d817      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009600:	2b20      	cmp	r3, #32
 8009602:	d00c      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009604:	2b20      	cmp	r3, #32
 8009606:	d813      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d019      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800960c:	2b10      	cmp	r3, #16
 800960e:	d10f      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	4a09      	ldr	r2, [pc, #36]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800961a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800961c:	e011      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3304      	adds	r3, #4
 8009622:	2102      	movs	r1, #2
 8009624:	4618      	mov	r0, r3
 8009626:	f001 f855 	bl	800a6d4 <RCCEx_PLL2_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800962e:	e008      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	75fb      	strb	r3, [r7, #23]
      break;
 8009634:	e005      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009636:	bf00      	nop
 8009638:	e003      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800963a:	bf00      	nop
 800963c:	58024400 	.word	0x58024400
      break;
 8009640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009648:	4ba3      	ldr	r3, [pc, #652]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800964a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009654:	49a0      	ldr	r1, [pc, #640]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009656:	4313      	orrs	r3, r2
 8009658:	64cb      	str	r3, [r1, #76]	; 0x4c
 800965a:	e001      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d047      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009674:	d030      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800967a:	d82a      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800967c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009680:	d02c      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009686:	d824      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800968c:	d018      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800968e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009692:	d81e      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969c:	d007      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800969e:	e018      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a0:	4b8d      	ldr	r3, [pc, #564]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	4a8c      	ldr	r2, [pc, #560]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096ac:	e017      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3304      	adds	r3, #4
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 f80d 	bl	800a6d4 <RCCEx_PLL2_Config>
 80096ba:	4603      	mov	r3, r0
 80096bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096be:	e00e      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3324      	adds	r3, #36	; 0x24
 80096c4:	2100      	movs	r1, #0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f001 f8b6 	bl	800a838 <RCCEx_PLL3_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096d0:	e005      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	75fb      	strb	r3, [r7, #23]
      break;
 80096d6:	e002      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80096d8:	bf00      	nop
 80096da:	e000      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80096dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d109      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096e4:	4b7c      	ldr	r3, [pc, #496]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f0:	4979      	ldr	r1, [pc, #484]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	650b      	str	r3, [r1, #80]	; 0x50
 80096f6:	e001      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d049      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800970c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009710:	d02e      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009716:	d828      	bhi.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800971c:	d02a      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800971e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009722:	d822      	bhi.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009724:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009728:	d026      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800972a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800972e:	d81c      	bhi.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009734:	d010      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800973a:	d816      	bhi.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01d      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009744:	d111      	bne.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3304      	adds	r3, #4
 800974a:	2101      	movs	r1, #1
 800974c:	4618      	mov	r0, r3
 800974e:	f000 ffc1 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009756:	e012      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3324      	adds	r3, #36	; 0x24
 800975c:	2101      	movs	r1, #1
 800975e:	4618      	mov	r0, r3
 8009760:	f001 f86a 	bl	800a838 <RCCEx_PLL3_Config>
 8009764:	4603      	mov	r3, r0
 8009766:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009768:	e009      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	75fb      	strb	r3, [r7, #23]
      break;
 800976e:	e006      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009770:	bf00      	nop
 8009772:	e004      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009774:	bf00      	nop
 8009776:	e002      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009778:	bf00      	nop
 800977a:	e000      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800977c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d109      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009784:	4b54      	ldr	r3, [pc, #336]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009788:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009790:	4951      	ldr	r1, [pc, #324]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009792:	4313      	orrs	r3, r2
 8009794:	650b      	str	r3, [r1, #80]	; 0x50
 8009796:	e001      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d04b      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b2:	d02e      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80097b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b8:	d828      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097be:	d02a      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80097c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c4:	d822      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097ca:	d026      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80097cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097d0:	d81c      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d6:	d010      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x496>
 80097d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097dc:	d816      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d01d      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80097e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097e6:	d111      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3304      	adds	r3, #4
 80097ec:	2101      	movs	r1, #1
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 ff70 	bl	800a6d4 <RCCEx_PLL2_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097f8:	e012      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	3324      	adds	r3, #36	; 0x24
 80097fe:	2101      	movs	r1, #1
 8009800:	4618      	mov	r0, r3
 8009802:	f001 f819 	bl	800a838 <RCCEx_PLL3_Config>
 8009806:	4603      	mov	r3, r0
 8009808:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800980a:	e009      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	75fb      	strb	r3, [r7, #23]
      break;
 8009810:	e006      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009812:	bf00      	nop
 8009814:	e004      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009816:	bf00      	nop
 8009818:	e002      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800981a:	bf00      	nop
 800981c:	e000      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800981e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10a      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009826:	4b2c      	ldr	r3, [pc, #176]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009834:	4928      	ldr	r1, [pc, #160]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009836:	4313      	orrs	r3, r2
 8009838:	658b      	str	r3, [r1, #88]	; 0x58
 800983a:	e001      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d02f      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009854:	d00e      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800985a:	d814      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d015      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009864:	d10f      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009866:	4b1c      	ldr	r3, [pc, #112]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	4a1b      	ldr	r2, [pc, #108]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800986c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009872:	e00c      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3304      	adds	r3, #4
 8009878:	2101      	movs	r1, #1
 800987a:	4618      	mov	r0, r3
 800987c:	f000 ff2a 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009880:	4603      	mov	r3, r0
 8009882:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009884:	e003      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]
      break;
 800988a:	e000      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800988c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009894:	4b10      	ldr	r3, [pc, #64]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009898:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a0:	490d      	ldr	r1, [pc, #52]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	650b      	str	r3, [r1, #80]	; 0x50
 80098a6:	e001      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
 80098aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d034      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d81d      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80098c0:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80098c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c6:	bf00      	nop
 80098c8:	08009903 	.word	0x08009903
 80098cc:	080098dd 	.word	0x080098dd
 80098d0:	080098eb 	.word	0x080098eb
 80098d4:	08009903 	.word	0x08009903
 80098d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098dc:	4bb1      	ldr	r3, [pc, #708]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4ab0      	ldr	r2, [pc, #704]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098e8:	e00c      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3304      	adds	r3, #4
 80098ee:	2102      	movs	r1, #2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 feef 	bl	800a6d4 <RCCEx_PLL2_Config>
 80098f6:	4603      	mov	r3, r0
 80098f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098fa:	e003      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009900:	e000      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d109      	bne.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800990a:	4ba6      	ldr	r3, [pc, #664]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800990c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990e:	f023 0203 	bic.w	r2, r3, #3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009916:	49a3      	ldr	r1, [pc, #652]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009918:	4313      	orrs	r3, r2
 800991a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800991c:	e001      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8086 	beq.w	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009930:	4b9d      	ldr	r3, [pc, #628]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a9c      	ldr	r2, [pc, #624]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800993a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800993c:	f7fb f978 	bl	8004c30 <HAL_GetTick>
 8009940:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009942:	e009      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009944:	f7fb f974 	bl	8004c30 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b64      	cmp	r3, #100	; 0x64
 8009950:	d902      	bls.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	75fb      	strb	r3, [r7, #23]
        break;
 8009956:	e005      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009958:	4b93      	ldr	r3, [pc, #588]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0ef      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d166      	bne.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800996a:	4b8e      	ldr	r3, [pc, #568]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800996c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009974:	4053      	eors	r3, r2
 8009976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997a:	2b00      	cmp	r3, #0
 800997c:	d013      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800997e:	4b89      	ldr	r3, [pc, #548]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009986:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009988:	4b86      	ldr	r3, [pc, #536]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	4a85      	ldr	r2, [pc, #532]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800998e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009992:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009994:	4b83      	ldr	r3, [pc, #524]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009998:	4a82      	ldr	r2, [pc, #520]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800999a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800999e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80099a0:	4a80      	ldr	r2, [pc, #512]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b0:	d115      	bne.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b2:	f7fb f93d 	bl	8004c30 <HAL_GetTick>
 80099b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b8:	e00b      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099ba:	f7fb f939 	bl	8004c30 <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d902      	bls.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	75fb      	strb	r3, [r7, #23]
            break;
 80099d0:	e005      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099d2:	4b74      	ldr	r3, [pc, #464]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0ed      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d126      	bne.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099f2:	d10d      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80099f4:	4b6b      	ldr	r3, [pc, #428]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a02:	0919      	lsrs	r1, r3, #4
 8009a04:	4b69      	ldr	r3, [pc, #420]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009a06:	400b      	ands	r3, r1
 8009a08:	4966      	ldr	r1, [pc, #408]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	610b      	str	r3, [r1, #16]
 8009a0e:	e005      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009a10:	4b64      	ldr	r3, [pc, #400]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	4a63      	ldr	r2, [pc, #396]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a1a:	6113      	str	r3, [r2, #16]
 8009a1c:	4b61      	ldr	r3, [pc, #388]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a2a:	495e      	ldr	r1, [pc, #376]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	670b      	str	r3, [r1, #112]	; 0x70
 8009a30:	e004      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
 8009a34:	75bb      	strb	r3, [r7, #22]
 8009a36:	e001      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d07e      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4c:	2b28      	cmp	r3, #40	; 0x28
 8009a4e:	d867      	bhi.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009b27 	.word	0x08009b27
 8009a5c:	08009b21 	.word	0x08009b21
 8009a60:	08009b21 	.word	0x08009b21
 8009a64:	08009b21 	.word	0x08009b21
 8009a68:	08009b21 	.word	0x08009b21
 8009a6c:	08009b21 	.word	0x08009b21
 8009a70:	08009b21 	.word	0x08009b21
 8009a74:	08009b21 	.word	0x08009b21
 8009a78:	08009afd 	.word	0x08009afd
 8009a7c:	08009b21 	.word	0x08009b21
 8009a80:	08009b21 	.word	0x08009b21
 8009a84:	08009b21 	.word	0x08009b21
 8009a88:	08009b21 	.word	0x08009b21
 8009a8c:	08009b21 	.word	0x08009b21
 8009a90:	08009b21 	.word	0x08009b21
 8009a94:	08009b21 	.word	0x08009b21
 8009a98:	08009b0f 	.word	0x08009b0f
 8009a9c:	08009b21 	.word	0x08009b21
 8009aa0:	08009b21 	.word	0x08009b21
 8009aa4:	08009b21 	.word	0x08009b21
 8009aa8:	08009b21 	.word	0x08009b21
 8009aac:	08009b21 	.word	0x08009b21
 8009ab0:	08009b21 	.word	0x08009b21
 8009ab4:	08009b21 	.word	0x08009b21
 8009ab8:	08009b27 	.word	0x08009b27
 8009abc:	08009b21 	.word	0x08009b21
 8009ac0:	08009b21 	.word	0x08009b21
 8009ac4:	08009b21 	.word	0x08009b21
 8009ac8:	08009b21 	.word	0x08009b21
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009b21 	.word	0x08009b21
 8009ad4:	08009b21 	.word	0x08009b21
 8009ad8:	08009b27 	.word	0x08009b27
 8009adc:	08009b21 	.word	0x08009b21
 8009ae0:	08009b21 	.word	0x08009b21
 8009ae4:	08009b21 	.word	0x08009b21
 8009ae8:	08009b21 	.word	0x08009b21
 8009aec:	08009b21 	.word	0x08009b21
 8009af0:	08009b21 	.word	0x08009b21
 8009af4:	08009b21 	.word	0x08009b21
 8009af8:	08009b27 	.word	0x08009b27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3304      	adds	r3, #4
 8009b00:	2101      	movs	r1, #1
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fde6 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b0c:	e00c      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	3324      	adds	r3, #36	; 0x24
 8009b12:	2101      	movs	r1, #1
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fe8f 	bl	800a838 <RCCEx_PLL3_Config>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b1e:	e003      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	75fb      	strb	r3, [r7, #23]
      break;
 8009b24:	e000      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d109      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b3a:	491a      	ldr	r1, [pc, #104]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	654b      	str	r3, [r1, #84]	; 0x54
 8009b40:	e001      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d03e      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	d820      	bhi.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009b5a:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009bb1 	.word	0x08009bb1
 8009b64:	08009b79 	.word	0x08009b79
 8009b68:	08009b8b 	.word	0x08009b8b
 8009b6c:	08009bb1 	.word	0x08009bb1
 8009b70:	08009bb1 	.word	0x08009bb1
 8009b74:	08009bb1 	.word	0x08009bb1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fda8 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b88:	e013      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3324      	adds	r3, #36	; 0x24
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fe51 	bl	800a838 <RCCEx_PLL3_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b9a:	e00a      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba0:	e007      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009ba2:	bf00      	nop
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	58024800 	.word	0x58024800
 8009bac:	00ffffcf 	.word	0x00ffffcf
      break;
 8009bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bb8:	4b9f      	ldr	r3, [pc, #636]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbc:	f023 0207 	bic.w	r2, r3, #7
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc4:	499c      	ldr	r1, [pc, #624]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	654b      	str	r3, [r1, #84]	; 0x54
 8009bca:	e001      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d039      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	d820      	bhi.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c2f 	.word	0x08009c2f
 8009bf0:	08009c05 	.word	0x08009c05
 8009bf4:	08009c17 	.word	0x08009c17
 8009bf8:	08009c2f 	.word	0x08009c2f
 8009bfc:	08009c2f 	.word	0x08009c2f
 8009c00:	08009c2f 	.word	0x08009c2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3304      	adds	r3, #4
 8009c08:	2101      	movs	r1, #1
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fd62 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009c10:	4603      	mov	r3, r0
 8009c12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c14:	e00c      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3324      	adds	r3, #36	; 0x24
 8009c1a:	2101      	movs	r1, #1
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 fe0b 	bl	800a838 <RCCEx_PLL3_Config>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c26:	e003      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c2c:	e000      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10a      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c36:	4b80      	ldr	r3, [pc, #512]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c3a:	f023 0207 	bic.w	r2, r3, #7
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c44:	497c      	ldr	r1, [pc, #496]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	658b      	str	r3, [r1, #88]	; 0x58
 8009c4a:	e001      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d04b      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c66:	d02e      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c6c:	d828      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c72:	d02a      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c78:	d822      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c7e:	d026      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c84:	d81c      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c8a:	d010      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c90:	d816      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d01d      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c9a:	d111      	bne.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fd16 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cac:	e012      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3324      	adds	r3, #36	; 0x24
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fdbf 	bl	800a838 <RCCEx_PLL3_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cbe:	e009      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e004      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cca:	bf00      	nop
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cda:	4b57      	ldr	r3, [pc, #348]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce8:	4953      	ldr	r1, [pc, #332]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	654b      	str	r3, [r1, #84]	; 0x54
 8009cee:	e001      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d04b      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d0a:	d02e      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009d0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d10:	d828      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d16:	d02a      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d1c:	d822      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d22:	d026      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d28:	d81c      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d2e:	d010      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d34:	d816      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01d      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d3e:	d111      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3304      	adds	r3, #4
 8009d44:	2100      	movs	r1, #0
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fcc4 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d50:	e012      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3324      	adds	r3, #36	; 0x24
 8009d56:	2102      	movs	r1, #2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fd6d 	bl	800a838 <RCCEx_PLL3_Config>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d62:	e009      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	75fb      	strb	r3, [r7, #23]
      break;
 8009d68:	e006      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d6a:	bf00      	nop
 8009d6c:	e004      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d6e:	bf00      	nop
 8009d70:	e002      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d72:	bf00      	nop
 8009d74:	e000      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8c:	492a      	ldr	r1, [pc, #168]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	658b      	str	r3, [r1, #88]	; 0x58
 8009d92:	e001      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d04d      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009daa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009dae:	d02e      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009db0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009db4:	d828      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dba:	d02a      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dc0:	d822      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009dc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dc6:	d026      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009dc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dcc:	d81c      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd2:	d010      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd8:	d816      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01d      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de2:	d111      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3304      	adds	r3, #4
 8009de8:	2100      	movs	r1, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fc72 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009df4:	e012      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3324      	adds	r3, #36	; 0x24
 8009dfa:	2102      	movs	r1, #2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 fd1b 	bl	800a838 <RCCEx_PLL3_Config>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e06:	e009      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e0c:	e006      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e004      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e12:	bf00      	nop
 8009e14:	e002      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e16:	bf00      	nop
 8009e18:	e000      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10c      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e22:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e30:	4901      	ldr	r1, [pc, #4]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	658b      	str	r3, [r1, #88]	; 0x58
 8009e36:	e003      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d018      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e54:	d10a      	bne.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3324      	adds	r3, #36	; 0x24
 8009e5a:	2102      	movs	r1, #2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 fceb 	bl	800a838 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009e6c:	4b8a      	ldr	r3, [pc, #552]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e78:	4987      	ldr	r1, [pc, #540]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0310 	and.w	r3, r3, #16
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d01a      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e94:	d10a      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3324      	adds	r3, #36	; 0x24
 8009e9a:	2102      	movs	r1, #2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fccb 	bl	800a838 <RCCEx_PLL3_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009eac:	4b7a      	ldr	r3, [pc, #488]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eba:	4977      	ldr	r1, [pc, #476]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d034      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ed6:	d01d      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009edc:	d817      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee6:	d009      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009ee8:	e011      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3304      	adds	r3, #4
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fbef 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009efa:	e00c      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3324      	adds	r3, #36	; 0x24
 8009f00:	2102      	movs	r1, #2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fc98 	bl	800a838 <RCCEx_PLL3_Config>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f0c:	e003      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	75fb      	strb	r3, [r7, #23]
      break;
 8009f12:	e000      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f1c:	4b5e      	ldr	r3, [pc, #376]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f2a:	495b      	ldr	r1, [pc, #364]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	658b      	str	r3, [r1, #88]	; 0x58
 8009f30:	e001      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d033      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f4c:	d01c      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f52:	d816      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f58:	d003      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f5e:	d007      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009f60:	e00f      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f62:	4b4d      	ldr	r3, [pc, #308]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f66:	4a4c      	ldr	r2, [pc, #304]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f6e:	e00c      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3324      	adds	r3, #36	; 0x24
 8009f74:	2101      	movs	r1, #1
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fc5e 	bl	800a838 <RCCEx_PLL3_Config>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f80:	e003      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	75fb      	strb	r3, [r7, #23]
      break;
 8009f86:	e000      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f90:	4b41      	ldr	r3, [pc, #260]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f9e:	493e      	ldr	r1, [pc, #248]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	654b      	str	r3, [r1, #84]	; 0x54
 8009fa4:	e001      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d029      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc2:	d007      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009fc4:	e00f      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc6:	4b34      	ldr	r3, [pc, #208]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fca:	4a33      	ldr	r2, [pc, #204]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fd2:	e00b      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	2102      	movs	r1, #2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fb7a 	bl	800a6d4 <RCCEx_PLL2_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fe4:	e002      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d109      	bne.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ff2:	4b29      	ldr	r3, [pc, #164]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffe:	4926      	ldr	r1, [pc, #152]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a000:	4313      	orrs	r3, r2
 800a002:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a004:	e001      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3324      	adds	r3, #36	; 0x24
 800a01a:	2102      	movs	r1, #2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fc0b 	bl	800a838 <RCCEx_PLL3_Config>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d033      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a03c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a040:	d017      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a046:	d811      	bhi.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04c:	d013      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a04e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a052:	d80b      	bhi.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a054:	2b00      	cmp	r3, #0
 800a056:	d010      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a05c:	d106      	bne.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a05e:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	4a0d      	ldr	r2, [pc, #52]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a06a:	e007      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	75fb      	strb	r3, [r7, #23]
      break;
 800a070:	e004      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a072:	bf00      	nop
 800a074:	e002      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a076:	bf00      	nop
 800a078:	e000      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a07a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10c      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a082:	4b05      	ldr	r3, [pc, #20]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a086:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a08e:	4902      	ldr	r1, [pc, #8]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a090:	4313      	orrs	r3, r2
 800a092:	654b      	str	r3, [r1, #84]	; 0x54
 800a094:	e004      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a096:	bf00      	nop
 800a098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d008      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0ac:	4b29      	ldr	r3, [pc, #164]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b8:	4926      	ldr	r1, [pc, #152]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d008      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0ca:	4b22      	ldr	r3, [pc, #136]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0d6:	491f      	ldr	r1, [pc, #124]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00d      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0e8:	4b1a      	ldr	r3, [pc, #104]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	4a19      	ldr	r2, [pc, #100]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0f2:	6113      	str	r3, [r2, #16]
 800a0f4:	4b17      	ldr	r3, [pc, #92]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0f6:	691a      	ldr	r2, [r3, #16]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0fe:	4915      	ldr	r1, [pc, #84]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a100:	4313      	orrs	r3, r2
 800a102:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	da08      	bge.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a10c:	4b11      	ldr	r3, [pc, #68]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a110:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a118:	490e      	ldr	r1, [pc, #56]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a12a:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a138:	4906      	ldr	r1, [pc, #24]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a13e:	7dbb      	ldrb	r3, [r7, #22]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	e000      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	58024400 	.word	0x58024400

0800a158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a15c:	f7ff f8a6 	bl	80092ac <HAL_RCC_GetHCLKFreq>
 800a160:	4602      	mov	r2, r0
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	091b      	lsrs	r3, r3, #4
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	4904      	ldr	r1, [pc, #16]	; (800a180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a16e:	5ccb      	ldrb	r3, [r1, r3]
 800a170:	f003 031f 	and.w	r3, r3, #31
 800a174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a178:	4618      	mov	r0, r3
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	58024400 	.word	0x58024400
 800a180:	0800eba4 	.word	0x0800eba4

0800a184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a184:	b480      	push	{r7}
 800a186:	b089      	sub	sp, #36	; 0x24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a18c:	4ba1      	ldr	r3, [pc, #644]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a190:	f003 0303 	and.w	r3, r3, #3
 800a194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a196:	4b9f      	ldr	r3, [pc, #636]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	0b1b      	lsrs	r3, r3, #12
 800a19c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a1a2:	4b9c      	ldr	r3, [pc, #624]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a6:	091b      	lsrs	r3, r3, #4
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a1ae:	4b99      	ldr	r3, [pc, #612]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b2:	08db      	lsrs	r3, r3, #3
 800a1b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	fb02 f303 	mul.w	r3, r2, r3
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 8111 	beq.w	800a3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	f000 8083 	beq.w	800a2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	f200 80a1 	bhi.w	800a324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d003      	beq.n	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d056      	beq.n	800a29c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a1ee:	e099      	b.n	800a324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1f0:	4b88      	ldr	r3, [pc, #544]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0320 	and.w	r3, r3, #32
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d02d      	beq.n	800a258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1fc:	4b85      	ldr	r3, [pc, #532]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	08db      	lsrs	r3, r3, #3
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	4a84      	ldr	r2, [pc, #528]	; (800a418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a208:	fa22 f303 	lsr.w	r3, r2, r3
 800a20c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	ee07 3a90 	vmov	s15, r3
 800a214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a226:	4b7b      	ldr	r3, [pc, #492]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a236:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a252:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a256:	e087      	b.n	800a368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26a:	4b6a      	ldr	r3, [pc, #424]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a28a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a29a:	e065      	b.n	800a368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ae:	4b59      	ldr	r3, [pc, #356]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2de:	e043      	b.n	800a368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f2:	4b48      	ldr	r3, [pc, #288]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a302:	ed97 6a03 	vldr	s12, [r7, #12]
 800a306:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a322:	e021      	b.n	800a368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a336:	4b37      	ldr	r3, [pc, #220]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a346:	ed97 6a03 	vldr	s12, [r7, #12]
 800a34a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a368:	4b2a      	ldr	r3, [pc, #168]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36c:	0a5b      	lsrs	r3, r3, #9
 800a36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a37e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a382:	edd7 6a07 	vldr	s13, [r7, #28]
 800a386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a38e:	ee17 2a90 	vmov	r2, s15
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a396:	4b1f      	ldr	r3, [pc, #124]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39a:	0c1b      	lsrs	r3, r3, #16
 800a39c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a0:	ee07 3a90 	vmov	s15, r3
 800a3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3bc:	ee17 2a90 	vmov	r2, s15
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a3c4:	4b13      	ldr	r3, [pc, #76]	; (800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	0e1b      	lsrs	r3, r3, #24
 800a3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ea:	ee17 2a90 	vmov	r2, s15
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a3f2:	e008      	b.n	800a406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	609a      	str	r2, [r3, #8]
}
 800a406:	bf00      	nop
 800a408:	3724      	adds	r7, #36	; 0x24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	58024400 	.word	0x58024400
 800a418:	03d09000 	.word	0x03d09000
 800a41c:	46000000 	.word	0x46000000
 800a420:	4c742400 	.word	0x4c742400
 800a424:	4a742400 	.word	0x4a742400
 800a428:	4af42400 	.word	0x4af42400

0800a42c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b089      	sub	sp, #36	; 0x24
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a434:	4ba1      	ldr	r3, [pc, #644]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a43e:	4b9f      	ldr	r3, [pc, #636]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	0d1b      	lsrs	r3, r3, #20
 800a444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a44a:	4b9c      	ldr	r3, [pc, #624]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44e:	0a1b      	lsrs	r3, r3, #8
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a456:	4b99      	ldr	r3, [pc, #612]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45a:	08db      	lsrs	r3, r3, #3
 800a45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	fb02 f303 	mul.w	r3, r2, r3
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8111 	beq.w	800a69c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	f000 8083 	beq.w	800a588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	2b02      	cmp	r3, #2
 800a486:	f200 80a1 	bhi.w	800a5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d056      	beq.n	800a544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a496:	e099      	b.n	800a5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a498:	4b88      	ldr	r3, [pc, #544]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0320 	and.w	r3, r3, #32
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d02d      	beq.n	800a500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4a4:	4b85      	ldr	r3, [pc, #532]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	08db      	lsrs	r3, r3, #3
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	4a84      	ldr	r2, [pc, #528]	; (800a6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ce:	4b7b      	ldr	r3, [pc, #492]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a4fe:	e087      	b.n	800a610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a512:	4b6a      	ldr	r3, [pc, #424]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a522:	ed97 6a03 	vldr	s12, [r7, #12]
 800a526:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a542:	e065      	b.n	800a610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a556:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a566:	ed97 6a03 	vldr	s12, [r7, #12]
 800a56a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a586:	e043      	b.n	800a610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59a:	4b48      	ldr	r3, [pc, #288]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5ca:	e021      	b.n	800a610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5de:	4b37      	ldr	r3, [pc, #220]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a60e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a610:	4b2a      	ldr	r3, [pc, #168]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	0a5b      	lsrs	r3, r3, #9
 800a616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a62a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a636:	ee17 2a90 	vmov	r2, s15
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a63e:	4b1f      	ldr	r3, [pc, #124]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	0c1b      	lsrs	r3, r3, #16
 800a644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a648:	ee07 3a90 	vmov	s15, r3
 800a64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a658:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a664:	ee17 2a90 	vmov	r2, s15
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a66c:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	0e1b      	lsrs	r3, r3, #24
 800a672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a686:	edd7 6a07 	vldr	s13, [r7, #28]
 800a68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a69a:	e008      	b.n	800a6ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	609a      	str	r2, [r3, #8]
}
 800a6ae:	bf00      	nop
 800a6b0:	3724      	adds	r7, #36	; 0x24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	58024400 	.word	0x58024400
 800a6c0:	03d09000 	.word	0x03d09000
 800a6c4:	46000000 	.word	0x46000000
 800a6c8:	4c742400 	.word	0x4c742400
 800a6cc:	4a742400 	.word	0x4a742400
 800a6d0:	4af42400 	.word	0x4af42400

0800a6d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6e2:	4b53      	ldr	r3, [pc, #332]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d101      	bne.n	800a6f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e099      	b.n	800a826 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a6f2:	4b4f      	ldr	r3, [pc, #316]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a4e      	ldr	r2, [pc, #312]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a6f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6fe:	f7fa fa97 	bl	8004c30 <HAL_GetTick>
 800a702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a704:	e008      	b.n	800a718 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a706:	f7fa fa93 	bl	8004c30 <HAL_GetTick>
 800a70a:	4602      	mov	r2, r0
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	2b02      	cmp	r3, #2
 800a712:	d901      	bls.n	800a718 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a714:	2303      	movs	r3, #3
 800a716:	e086      	b.n	800a826 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a718:	4b45      	ldr	r3, [pc, #276]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1f0      	bne.n	800a706 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a724:	4b42      	ldr	r3, [pc, #264]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a728:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	031b      	lsls	r3, r3, #12
 800a732:	493f      	ldr	r1, [pc, #252]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a734:	4313      	orrs	r3, r2
 800a736:	628b      	str	r3, [r1, #40]	; 0x28
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	3b01      	subs	r3, #1
 800a748:	025b      	lsls	r3, r3, #9
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	431a      	orrs	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	3b01      	subs	r3, #1
 800a754:	041b      	lsls	r3, r3, #16
 800a756:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a75a:	431a      	orrs	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	3b01      	subs	r3, #1
 800a762:	061b      	lsls	r3, r3, #24
 800a764:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a768:	4931      	ldr	r1, [pc, #196]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a76e:	4b30      	ldr	r3, [pc, #192]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	492d      	ldr	r1, [pc, #180]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a780:	4b2b      	ldr	r3, [pc, #172]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f023 0220 	bic.w	r2, r3, #32
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	4928      	ldr	r1, [pc, #160]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a78e:	4313      	orrs	r3, r2
 800a790:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a792:	4b27      	ldr	r3, [pc, #156]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	4a26      	ldr	r2, [pc, #152]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a798:	f023 0310 	bic.w	r3, r3, #16
 800a79c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a79e:	4b24      	ldr	r3, [pc, #144]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7a2:	4b24      	ldr	r3, [pc, #144]	; (800a834 <RCCEx_PLL2_Config+0x160>)
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	69d2      	ldr	r2, [r2, #28]
 800a7aa:	00d2      	lsls	r2, r2, #3
 800a7ac:	4920      	ldr	r1, [pc, #128]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7b2:	4b1f      	ldr	r3, [pc, #124]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7b8:	f043 0310 	orr.w	r3, r3, #16
 800a7bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7c4:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	4a19      	ldr	r2, [pc, #100]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7d0:	e00f      	b.n	800a7f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d106      	bne.n	800a7e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7d8:	4b15      	ldr	r3, [pc, #84]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	4a14      	ldr	r2, [pc, #80]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7e4:	e005      	b.n	800a7f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7e6:	4b12      	ldr	r3, [pc, #72]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	4a11      	ldr	r2, [pc, #68]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a7f2:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a0e      	ldr	r2, [pc, #56]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a7f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7fe:	f7fa fa17 	bl	8004c30 <HAL_GetTick>
 800a802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a804:	e008      	b.n	800a818 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a806:	f7fa fa13 	bl	8004c30 <HAL_GetTick>
 800a80a:	4602      	mov	r2, r0
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	2b02      	cmp	r3, #2
 800a812:	d901      	bls.n	800a818 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e006      	b.n	800a826 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <RCCEx_PLL2_Config+0x15c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0f0      	beq.n	800a806 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	58024400 	.word	0x58024400
 800a834:	ffff0007 	.word	0xffff0007

0800a838 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a846:	4b53      	ldr	r3, [pc, #332]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d101      	bne.n	800a856 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e099      	b.n	800a98a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a856:	4b4f      	ldr	r3, [pc, #316]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a4e      	ldr	r2, [pc, #312]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a85c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a862:	f7fa f9e5 	bl	8004c30 <HAL_GetTick>
 800a866:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a868:	e008      	b.n	800a87c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a86a:	f7fa f9e1 	bl	8004c30 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d901      	bls.n	800a87c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e086      	b.n	800a98a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a87c:	4b45      	ldr	r3, [pc, #276]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1f0      	bne.n	800a86a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a888:	4b42      	ldr	r3, [pc, #264]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	051b      	lsls	r3, r3, #20
 800a896:	493f      	ldr	r1, [pc, #252]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	628b      	str	r3, [r1, #40]	; 0x28
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	025b      	lsls	r3, r3, #9
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	041b      	lsls	r3, r3, #16
 800a8ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8be:	431a      	orrs	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	061b      	lsls	r3, r3, #24
 800a8c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8cc:	4931      	ldr	r1, [pc, #196]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8d2:	4b30      	ldr	r3, [pc, #192]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	492d      	ldr	r1, [pc, #180]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8e4:	4b2b      	ldr	r3, [pc, #172]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	4928      	ldr	r1, [pc, #160]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a8f6:	4b27      	ldr	r3, [pc, #156]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	4a26      	ldr	r2, [pc, #152]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a900:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a902:	4b24      	ldr	r3, [pc, #144]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a906:	4b24      	ldr	r3, [pc, #144]	; (800a998 <RCCEx_PLL3_Config+0x160>)
 800a908:	4013      	ands	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	69d2      	ldr	r2, [r2, #28]
 800a90e:	00d2      	lsls	r2, r2, #3
 800a910:	4920      	ldr	r1, [pc, #128]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a912:	4313      	orrs	r3, r2
 800a914:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a916:	4b1f      	ldr	r3, [pc, #124]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91a:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a91c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d106      	bne.n	800a936 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a928:	4b1a      	ldr	r3, [pc, #104]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	4a19      	ldr	r2, [pc, #100]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a92e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a932:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a934:	e00f      	b.n	800a956 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d106      	bne.n	800a94a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a93c:	4b15      	ldr	r3, [pc, #84]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a940:	4a14      	ldr	r2, [pc, #80]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a942:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a946:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a948:	e005      	b.n	800a956 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a94a:	4b12      	ldr	r3, [pc, #72]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94e:	4a11      	ldr	r2, [pc, #68]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a954:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a956:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a0e      	ldr	r2, [pc, #56]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a95c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a962:	f7fa f965 	bl	8004c30 <HAL_GetTick>
 800a966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a968:	e008      	b.n	800a97c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a96a:	f7fa f961 	bl	8004c30 <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	2b02      	cmp	r3, #2
 800a976:	d901      	bls.n	800a97c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e006      	b.n	800a98a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <RCCEx_PLL3_Config+0x15c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d0f0      	beq.n	800a96a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	58024400 	.word	0x58024400
 800a998:	ffff0007 	.word	0xffff0007

0800a99c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e049      	b.n	800aa42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f9 fa54 	bl	8003e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f000 feb8 	bl	800b750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d001      	beq.n	800aa64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e05e      	b.n	800ab22 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2202      	movs	r2, #2
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f042 0201 	orr.w	r2, r2, #1
 800aa7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a2b      	ldr	r2, [pc, #172]	; (800ab30 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d02c      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa8e:	d027      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a27      	ldr	r2, [pc, #156]	; (800ab34 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d022      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a26      	ldr	r2, [pc, #152]	; (800ab38 <HAL_TIM_Base_Start_IT+0xec>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d01d      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a24      	ldr	r2, [pc, #144]	; (800ab3c <HAL_TIM_Base_Start_IT+0xf0>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d018      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a23      	ldr	r2, [pc, #140]	; (800ab40 <HAL_TIM_Base_Start_IT+0xf4>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d013      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a21      	ldr	r2, [pc, #132]	; (800ab44 <HAL_TIM_Base_Start_IT+0xf8>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00e      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a20      	ldr	r2, [pc, #128]	; (800ab48 <HAL_TIM_Base_Start_IT+0xfc>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d009      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a1e      	ldr	r2, [pc, #120]	; (800ab4c <HAL_TIM_Base_Start_IT+0x100>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d004      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x94>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a1d      	ldr	r2, [pc, #116]	; (800ab50 <HAL_TIM_Base_Start_IT+0x104>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d115      	bne.n	800ab0c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689a      	ldr	r2, [r3, #8]
 800aae6:	4b1b      	ldr	r3, [pc, #108]	; (800ab54 <HAL_TIM_Base_Start_IT+0x108>)
 800aae8:	4013      	ands	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b06      	cmp	r3, #6
 800aaf0:	d015      	beq.n	800ab1e <HAL_TIM_Base_Start_IT+0xd2>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf8:	d011      	beq.n	800ab1e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f042 0201 	orr.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0a:	e008      	b.n	800ab1e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0201 	orr.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	e000      	b.n	800ab20 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40010000 	.word	0x40010000
 800ab34:	40000400 	.word	0x40000400
 800ab38:	40000800 	.word	0x40000800
 800ab3c:	40000c00 	.word	0x40000c00
 800ab40:	40010400 	.word	0x40010400
 800ab44:	40001800 	.word	0x40001800
 800ab48:	40014000 	.word	0x40014000
 800ab4c:	4000e000 	.word	0x4000e000
 800ab50:	4000e400 	.word	0x4000e400
 800ab54:	00010007 	.word	0x00010007

0800ab58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d101      	bne.n	800ab6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e049      	b.n	800abfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7f9 faae 	bl	80040e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2202      	movs	r2, #2
 800ab88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	3304      	adds	r3, #4
 800ab94:	4619      	mov	r1, r3
 800ab96:	4610      	mov	r0, r2
 800ab98:	f000 fdda 	bl	800b750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
	...

0800ac08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d109      	bne.n	800ac2c <HAL_TIM_PWM_Start+0x24>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	bf14      	ite	ne
 800ac24:	2301      	movne	r3, #1
 800ac26:	2300      	moveq	r3, #0
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	e03c      	b.n	800aca6 <HAL_TIM_PWM_Start+0x9e>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d109      	bne.n	800ac46 <HAL_TIM_PWM_Start+0x3e>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	bf14      	ite	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	2300      	moveq	r3, #0
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	e02f      	b.n	800aca6 <HAL_TIM_PWM_Start+0x9e>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b08      	cmp	r3, #8
 800ac4a:	d109      	bne.n	800ac60 <HAL_TIM_PWM_Start+0x58>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	e022      	b.n	800aca6 <HAL_TIM_PWM_Start+0x9e>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b0c      	cmp	r3, #12
 800ac64:	d109      	bne.n	800ac7a <HAL_TIM_PWM_Start+0x72>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	bf14      	ite	ne
 800ac72:	2301      	movne	r3, #1
 800ac74:	2300      	moveq	r3, #0
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	e015      	b.n	800aca6 <HAL_TIM_PWM_Start+0x9e>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d109      	bne.n	800ac94 <HAL_TIM_PWM_Start+0x8c>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	bf14      	ite	ne
 800ac8c:	2301      	movne	r3, #1
 800ac8e:	2300      	moveq	r3, #0
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	e008      	b.n	800aca6 <HAL_TIM_PWM_Start+0x9e>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	bf14      	ite	ne
 800aca0:	2301      	movne	r3, #1
 800aca2:	2300      	moveq	r3, #0
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e0ab      	b.n	800ae06 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d104      	bne.n	800acbe <HAL_TIM_PWM_Start+0xb6>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acbc:	e023      	b.n	800ad06 <HAL_TIM_PWM_Start+0xfe>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d104      	bne.n	800acce <HAL_TIM_PWM_Start+0xc6>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800accc:	e01b      	b.n	800ad06 <HAL_TIM_PWM_Start+0xfe>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	d104      	bne.n	800acde <HAL_TIM_PWM_Start+0xd6>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acdc:	e013      	b.n	800ad06 <HAL_TIM_PWM_Start+0xfe>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b0c      	cmp	r3, #12
 800ace2:	d104      	bne.n	800acee <HAL_TIM_PWM_Start+0xe6>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acec:	e00b      	b.n	800ad06 <HAL_TIM_PWM_Start+0xfe>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d104      	bne.n	800acfe <HAL_TIM_PWM_Start+0xf6>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acfc:	e003      	b.n	800ad06 <HAL_TIM_PWM_Start+0xfe>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2202      	movs	r2, #2
 800ad02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f001 f938 	bl	800bf84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a3d      	ldr	r2, [pc, #244]	; (800ae10 <HAL_TIM_PWM_Start+0x208>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d013      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x13e>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a3c      	ldr	r2, [pc, #240]	; (800ae14 <HAL_TIM_PWM_Start+0x20c>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00e      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x13e>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a3a      	ldr	r2, [pc, #232]	; (800ae18 <HAL_TIM_PWM_Start+0x210>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d009      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x13e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a39      	ldr	r2, [pc, #228]	; (800ae1c <HAL_TIM_PWM_Start+0x214>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d004      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x13e>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a37      	ldr	r2, [pc, #220]	; (800ae20 <HAL_TIM_PWM_Start+0x218>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d101      	bne.n	800ad4a <HAL_TIM_PWM_Start+0x142>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e000      	b.n	800ad4c <HAL_TIM_PWM_Start+0x144>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d007      	beq.n	800ad60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a2a      	ldr	r2, [pc, #168]	; (800ae10 <HAL_TIM_PWM_Start+0x208>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d02c      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad72:	d027      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a2a      	ldr	r2, [pc, #168]	; (800ae24 <HAL_TIM_PWM_Start+0x21c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d022      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a29      	ldr	r2, [pc, #164]	; (800ae28 <HAL_TIM_PWM_Start+0x220>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d01d      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a27      	ldr	r2, [pc, #156]	; (800ae2c <HAL_TIM_PWM_Start+0x224>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d018      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a1f      	ldr	r2, [pc, #124]	; (800ae14 <HAL_TIM_PWM_Start+0x20c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a23      	ldr	r2, [pc, #140]	; (800ae30 <HAL_TIM_PWM_Start+0x228>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00e      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a1b      	ldr	r2, [pc, #108]	; (800ae18 <HAL_TIM_PWM_Start+0x210>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d009      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a1f      	ldr	r2, [pc, #124]	; (800ae34 <HAL_TIM_PWM_Start+0x22c>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d004      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1bc>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a1e      	ldr	r2, [pc, #120]	; (800ae38 <HAL_TIM_PWM_Start+0x230>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d115      	bne.n	800adf0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	4b1c      	ldr	r3, [pc, #112]	; (800ae3c <HAL_TIM_PWM_Start+0x234>)
 800adcc:	4013      	ands	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b06      	cmp	r3, #6
 800add4:	d015      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x1fa>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800addc:	d011      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f042 0201 	orr.w	r2, r2, #1
 800adec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adee:	e008      	b.n	800ae02 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f042 0201 	orr.w	r2, r2, #1
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e000      	b.n	800ae04 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	40010000 	.word	0x40010000
 800ae14:	40010400 	.word	0x40010400
 800ae18:	40014000 	.word	0x40014000
 800ae1c:	40014400 	.word	0x40014400
 800ae20:	40014800 	.word	0x40014800
 800ae24:	40000400 	.word	0x40000400
 800ae28:	40000800 	.word	0x40000800
 800ae2c:	40000c00 	.word	0x40000c00
 800ae30:	40001800 	.word	0x40001800
 800ae34:	4000e000 	.word	0x4000e000
 800ae38:	4000e400 	.word	0x4000e400
 800ae3c:	00010007 	.word	0x00010007

0800ae40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e08f      	b.n	800af74 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7f9 f847 	bl	8003efc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6899      	ldr	r1, [r3, #8]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	4b3e      	ldr	r3, [pc, #248]	; (800af7c <HAL_TIM_Encoder_Init+0x13c>)
 800ae82:	400b      	ands	r3, r1
 800ae84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4610      	mov	r0, r2
 800ae92:	f000 fc5d 	bl	800b750 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	4b31      	ldr	r3, [pc, #196]	; (800af80 <HAL_TIM_Encoder_Init+0x140>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	021b      	lsls	r3, r3, #8
 800aeca:	4313      	orrs	r3, r2
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	4313      	orrs	r3, r2
 800aed0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	4b2b      	ldr	r3, [pc, #172]	; (800af84 <HAL_TIM_Encoder_Init+0x144>)
 800aed6:	4013      	ands	r3, r2
 800aed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	4b2a      	ldr	r3, [pc, #168]	; (800af88 <HAL_TIM_Encoder_Init+0x148>)
 800aede:	4013      	ands	r3, r2
 800aee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	4313      	orrs	r3, r2
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	011a      	lsls	r2, r3, #4
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	031b      	lsls	r3, r3, #12
 800af00:	4313      	orrs	r3, r2
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	4313      	orrs	r3, r2
 800af06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800af0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800af16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	4313      	orrs	r3, r2
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4313      	orrs	r3, r2
 800af28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	fffebff8 	.word	0xfffebff8
 800af80:	fffffcfc 	.word	0xfffffcfc
 800af84:	fffff3f3 	.word	0xfffff3f3
 800af88:	ffff0f0f 	.word	0xffff0f0f

0800af8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800afa4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d110      	bne.n	800afde <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d102      	bne.n	800afc8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800afc2:	7b7b      	ldrb	r3, [r7, #13]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d001      	beq.n	800afcc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e069      	b.n	800b0a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afdc:	e031      	b.n	800b042 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d110      	bne.n	800b006 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d102      	bne.n	800aff0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800afea:	7b3b      	ldrb	r3, [r7, #12]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d001      	beq.n	800aff4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e055      	b.n	800b0a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b004:	e01d      	b.n	800b042 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d108      	bne.n	800b01e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d105      	bne.n	800b01e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b012:	7b7b      	ldrb	r3, [r7, #13]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d102      	bne.n	800b01e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b018:	7b3b      	ldrb	r3, [r7, #12]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d001      	beq.n	800b022 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e03e      	b.n	800b0a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2202      	movs	r2, #2
 800b02e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2202      	movs	r2, #2
 800b036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2202      	movs	r2, #2
 800b03e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d003      	beq.n	800b050 <HAL_TIM_Encoder_Start+0xc4>
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b04      	cmp	r3, #4
 800b04c:	d008      	beq.n	800b060 <HAL_TIM_Encoder_Start+0xd4>
 800b04e:	e00f      	b.n	800b070 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2201      	movs	r2, #1
 800b056:	2100      	movs	r1, #0
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 ff93 	bl	800bf84 <TIM_CCxChannelCmd>
      break;
 800b05e:	e016      	b.n	800b08e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2201      	movs	r2, #1
 800b066:	2104      	movs	r1, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 ff8b 	bl	800bf84 <TIM_CCxChannelCmd>
      break;
 800b06e:	e00e      	b.n	800b08e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2201      	movs	r2, #1
 800b076:	2100      	movs	r1, #0
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 ff83 	bl	800bf84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2201      	movs	r2, #1
 800b084:	2104      	movs	r1, #4
 800b086:	4618      	mov	r0, r3
 800b088:	f000 ff7c 	bl	800bf84 <TIM_CCxChannelCmd>
      break;
 800b08c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f042 0201 	orr.w	r2, r2, #1
 800b09c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f003 0302 	and.w	r3, r3, #2
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d122      	bne.n	800b104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d11b      	bne.n	800b104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f06f 0202 	mvn.w	r2, #2
 800b0d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fb12 	bl	800b714 <HAL_TIM_IC_CaptureCallback>
 800b0f0:	e005      	b.n	800b0fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fb04 	bl	800b700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb15 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f003 0304 	and.w	r3, r3, #4
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d122      	bne.n	800b158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d11b      	bne.n	800b158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f06f 0204 	mvn.w	r2, #4
 800b128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2202      	movs	r2, #2
 800b12e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fae8 	bl	800b714 <HAL_TIM_IC_CaptureCallback>
 800b144:	e005      	b.n	800b152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fada 	bl	800b700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 faeb 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	2b08      	cmp	r3, #8
 800b164:	d122      	bne.n	800b1ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f003 0308 	and.w	r3, r3, #8
 800b170:	2b08      	cmp	r3, #8
 800b172:	d11b      	bne.n	800b1ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f06f 0208 	mvn.w	r2, #8
 800b17c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2204      	movs	r2, #4
 800b182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	69db      	ldr	r3, [r3, #28]
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fabe 	bl	800b714 <HAL_TIM_IC_CaptureCallback>
 800b198:	e005      	b.n	800b1a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fab0 	bl	800b700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fac1 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	f003 0310 	and.w	r3, r3, #16
 800b1b6:	2b10      	cmp	r3, #16
 800b1b8:	d122      	bne.n	800b200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b10      	cmp	r3, #16
 800b1c6:	d11b      	bne.n	800b200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f06f 0210 	mvn.w	r2, #16
 800b1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2208      	movs	r2, #8
 800b1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d003      	beq.n	800b1ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fa94 	bl	800b714 <HAL_TIM_IC_CaptureCallback>
 800b1ec:	e005      	b.n	800b1fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fa86 	bl	800b700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fa97 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f003 0301 	and.w	r3, r3, #1
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d10e      	bne.n	800b22c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d107      	bne.n	800b22c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f06f 0201 	mvn.w	r2, #1
 800b224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7f9 fa6a 	bl	8004700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b236:	2b80      	cmp	r3, #128	; 0x80
 800b238:	d10e      	bne.n	800b258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b244:	2b80      	cmp	r3, #128	; 0x80
 800b246:	d107      	bne.n	800b258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f001 f802 	bl	800c25c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b266:	d10e      	bne.n	800b286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b272:	2b80      	cmp	r3, #128	; 0x80
 800b274:	d107      	bne.n	800b286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fff5 	bl	800c270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b290:	2b40      	cmp	r3, #64	; 0x40
 800b292:	d10e      	bne.n	800b2b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29e:	2b40      	cmp	r3, #64	; 0x40
 800b2a0:	d107      	bne.n	800b2b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fa45 	bl	800b73c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d10e      	bne.n	800b2de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	f003 0320 	and.w	r3, r3, #32
 800b2ca:	2b20      	cmp	r3, #32
 800b2cc:	d107      	bne.n	800b2de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f06f 0220 	mvn.w	r2, #32
 800b2d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 ffb5 	bl	800c248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2de:	bf00      	nop
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d101      	bne.n	800b306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b302:	2302      	movs	r3, #2
 800b304:	e0ff      	b.n	800b506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b14      	cmp	r3, #20
 800b312:	f200 80f0 	bhi.w	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b316:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b371 	.word	0x0800b371
 800b320:	0800b4f7 	.word	0x0800b4f7
 800b324:	0800b4f7 	.word	0x0800b4f7
 800b328:	0800b4f7 	.word	0x0800b4f7
 800b32c:	0800b3b1 	.word	0x0800b3b1
 800b330:	0800b4f7 	.word	0x0800b4f7
 800b334:	0800b4f7 	.word	0x0800b4f7
 800b338:	0800b4f7 	.word	0x0800b4f7
 800b33c:	0800b3f3 	.word	0x0800b3f3
 800b340:	0800b4f7 	.word	0x0800b4f7
 800b344:	0800b4f7 	.word	0x0800b4f7
 800b348:	0800b4f7 	.word	0x0800b4f7
 800b34c:	0800b433 	.word	0x0800b433
 800b350:	0800b4f7 	.word	0x0800b4f7
 800b354:	0800b4f7 	.word	0x0800b4f7
 800b358:	0800b4f7 	.word	0x0800b4f7
 800b35c:	0800b475 	.word	0x0800b475
 800b360:	0800b4f7 	.word	0x0800b4f7
 800b364:	0800b4f7 	.word	0x0800b4f7
 800b368:	0800b4f7 	.word	0x0800b4f7
 800b36c:	0800b4b5 	.word	0x0800b4b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68b9      	ldr	r1, [r7, #8]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 fa90 	bl	800b89c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	699a      	ldr	r2, [r3, #24]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f042 0208 	orr.w	r2, r2, #8
 800b38a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	699a      	ldr	r2, [r3, #24]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0204 	bic.w	r2, r2, #4
 800b39a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6999      	ldr	r1, [r3, #24]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	691a      	ldr	r2, [r3, #16]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	619a      	str	r2, [r3, #24]
      break;
 800b3ae:	e0a5      	b.n	800b4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fb00 	bl	800b9bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	699a      	ldr	r2, [r3, #24]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	699a      	ldr	r2, [r3, #24]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6999      	ldr	r1, [r3, #24]
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	021a      	lsls	r2, r3, #8
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	619a      	str	r2, [r3, #24]
      break;
 800b3f0:	e084      	b.n	800b4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68b9      	ldr	r1, [r7, #8]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 fb69 	bl	800bad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	69da      	ldr	r2, [r3, #28]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f042 0208 	orr.w	r2, r2, #8
 800b40c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	69da      	ldr	r2, [r3, #28]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f022 0204 	bic.w	r2, r2, #4
 800b41c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	69d9      	ldr	r1, [r3, #28]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	691a      	ldr	r2, [r3, #16]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	430a      	orrs	r2, r1
 800b42e:	61da      	str	r2, [r3, #28]
      break;
 800b430:	e064      	b.n	800b4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fbd1 	bl	800bbe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	69da      	ldr	r2, [r3, #28]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b44c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	69da      	ldr	r2, [r3, #28]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b45c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	69d9      	ldr	r1, [r3, #28]
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	021a      	lsls	r2, r3, #8
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	430a      	orrs	r2, r1
 800b470:	61da      	str	r2, [r3, #28]
      break;
 800b472:	e043      	b.n	800b4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68b9      	ldr	r1, [r7, #8]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fc1a 	bl	800bcb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0208 	orr.w	r2, r2, #8
 800b48e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f022 0204 	bic.w	r2, r2, #4
 800b49e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	691a      	ldr	r2, [r3, #16]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b4b2:	e023      	b.n	800b4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68b9      	ldr	r1, [r7, #8]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f000 fc5e 	bl	800bd7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	021a      	lsls	r2, r3, #8
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	430a      	orrs	r2, r1
 800b4f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b4f4:	e002      	b.n	800b4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b4fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b504:	7dfb      	ldrb	r3, [r7, #23]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop

0800b510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_TIM_ConfigClockSource+0x1c>
 800b528:	2302      	movs	r3, #2
 800b52a:	e0dc      	b.n	800b6e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2202      	movs	r2, #2
 800b538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	4b6a      	ldr	r3, [pc, #424]	; (800b6f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b548:	4013      	ands	r3, r2
 800b54a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a64      	ldr	r2, [pc, #400]	; (800b6f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b562:	4293      	cmp	r3, r2
 800b564:	f000 80a9 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b568:	4a62      	ldr	r2, [pc, #392]	; (800b6f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	f200 80ae 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b570:	4a61      	ldr	r2, [pc, #388]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b572:	4293      	cmp	r3, r2
 800b574:	f000 80a1 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b578:	4a5f      	ldr	r2, [pc, #380]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	f200 80a6 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b580:	4a5e      	ldr	r2, [pc, #376]	; (800b6fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b582:	4293      	cmp	r3, r2
 800b584:	f000 8099 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b588:	4a5c      	ldr	r2, [pc, #368]	; (800b6fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	f200 809e 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b590:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b594:	f000 8091 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b598:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b59c:	f200 8096 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5a4:	f000 8089 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b5a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ac:	f200 808e 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b4:	d03e      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x124>
 800b5b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ba:	f200 8087 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c2:	f000 8086 	beq.w	800b6d2 <HAL_TIM_ConfigClockSource+0x1c2>
 800b5c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ca:	d87f      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5cc:	2b70      	cmp	r3, #112	; 0x70
 800b5ce:	d01a      	beq.n	800b606 <HAL_TIM_ConfigClockSource+0xf6>
 800b5d0:	2b70      	cmp	r3, #112	; 0x70
 800b5d2:	d87b      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5d4:	2b60      	cmp	r3, #96	; 0x60
 800b5d6:	d050      	beq.n	800b67a <HAL_TIM_ConfigClockSource+0x16a>
 800b5d8:	2b60      	cmp	r3, #96	; 0x60
 800b5da:	d877      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5dc:	2b50      	cmp	r3, #80	; 0x50
 800b5de:	d03c      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x14a>
 800b5e0:	2b50      	cmp	r3, #80	; 0x50
 800b5e2:	d873      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5e4:	2b40      	cmp	r3, #64	; 0x40
 800b5e6:	d058      	beq.n	800b69a <HAL_TIM_ConfigClockSource+0x18a>
 800b5e8:	2b40      	cmp	r3, #64	; 0x40
 800b5ea:	d86f      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5ec:	2b30      	cmp	r3, #48	; 0x30
 800b5ee:	d064      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b5f0:	2b30      	cmp	r3, #48	; 0x30
 800b5f2:	d86b      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	d060      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b5f8:	2b20      	cmp	r3, #32
 800b5fa:	d867      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d05c      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b600:	2b10      	cmp	r3, #16
 800b602:	d05a      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800b604:	e062      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	6899      	ldr	r1, [r3, #8]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	f000 fc95 	bl	800bf44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	609a      	str	r2, [r3, #8]
      break;
 800b632:	e04f      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6818      	ldr	r0, [r3, #0]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	6899      	ldr	r1, [r3, #8]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f000 fc7e 	bl	800bf44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689a      	ldr	r2, [r3, #8]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b656:	609a      	str	r2, [r3, #8]
      break;
 800b658:	e03c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6859      	ldr	r1, [r3, #4]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	461a      	mov	r2, r3
 800b668:	f000 fbee 	bl	800be48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2150      	movs	r1, #80	; 0x50
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fc48 	bl	800bf08 <TIM_ITRx_SetConfig>
      break;
 800b678:	e02c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6859      	ldr	r1, [r3, #4]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	461a      	mov	r2, r3
 800b688:	f000 fc0d 	bl	800bea6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2160      	movs	r1, #96	; 0x60
 800b692:	4618      	mov	r0, r3
 800b694:	f000 fc38 	bl	800bf08 <TIM_ITRx_SetConfig>
      break;
 800b698:	e01c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6818      	ldr	r0, [r3, #0]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	6859      	ldr	r1, [r3, #4]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f000 fbce 	bl	800be48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2140      	movs	r1, #64	; 0x40
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 fc28 	bl	800bf08 <TIM_ITRx_SetConfig>
      break;
 800b6b8:	e00c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f000 fc1f 	bl	800bf08 <TIM_ITRx_SetConfig>
      break;
 800b6ca:	e003      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d0:	e000      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b6d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	ffceff88 	.word	0xffceff88
 800b6f4:	00100040 	.word	0x00100040
 800b6f8:	00100030 	.word	0x00100030
 800b6fc:	00100020 	.word	0x00100020

0800b700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a44      	ldr	r2, [pc, #272]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d013      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76e:	d00f      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a41      	ldr	r2, [pc, #260]	; (800b878 <TIM_Base_SetConfig+0x128>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00b      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a40      	ldr	r2, [pc, #256]	; (800b87c <TIM_Base_SetConfig+0x12c>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d007      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a3f      	ldr	r2, [pc, #252]	; (800b880 <TIM_Base_SetConfig+0x130>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d003      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a3e      	ldr	r2, [pc, #248]	; (800b884 <TIM_Base_SetConfig+0x134>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d108      	bne.n	800b7a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a33      	ldr	r2, [pc, #204]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d027      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b0:	d023      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a30      	ldr	r2, [pc, #192]	; (800b878 <TIM_Base_SetConfig+0x128>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d01f      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a2f      	ldr	r2, [pc, #188]	; (800b87c <TIM_Base_SetConfig+0x12c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d01b      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a2e      	ldr	r2, [pc, #184]	; (800b880 <TIM_Base_SetConfig+0x130>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d017      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a2d      	ldr	r2, [pc, #180]	; (800b884 <TIM_Base_SetConfig+0x134>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d013      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a2c      	ldr	r2, [pc, #176]	; (800b888 <TIM_Base_SetConfig+0x138>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00f      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a2b      	ldr	r2, [pc, #172]	; (800b88c <TIM_Base_SetConfig+0x13c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00b      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <TIM_Base_SetConfig+0x140>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d007      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a29      	ldr	r2, [pc, #164]	; (800b894 <TIM_Base_SetConfig+0x144>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d003      	beq.n	800b7fa <TIM_Base_SetConfig+0xaa>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a28      	ldr	r2, [pc, #160]	; (800b898 <TIM_Base_SetConfig+0x148>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d108      	bne.n	800b80c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a10      	ldr	r2, [pc, #64]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00f      	beq.n	800b858 <TIM_Base_SetConfig+0x108>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a12      	ldr	r2, [pc, #72]	; (800b884 <TIM_Base_SetConfig+0x134>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d00b      	beq.n	800b858 <TIM_Base_SetConfig+0x108>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a11      	ldr	r2, [pc, #68]	; (800b888 <TIM_Base_SetConfig+0x138>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d007      	beq.n	800b858 <TIM_Base_SetConfig+0x108>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a10      	ldr	r2, [pc, #64]	; (800b88c <TIM_Base_SetConfig+0x13c>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d003      	beq.n	800b858 <TIM_Base_SetConfig+0x108>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a0f      	ldr	r2, [pc, #60]	; (800b890 <TIM_Base_SetConfig+0x140>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d103      	bne.n	800b860 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	691a      	ldr	r2, [r3, #16]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	615a      	str	r2, [r3, #20]
}
 800b866:	bf00      	nop
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	40010000 	.word	0x40010000
 800b878:	40000400 	.word	0x40000400
 800b87c:	40000800 	.word	0x40000800
 800b880:	40000c00 	.word	0x40000c00
 800b884:	40010400 	.word	0x40010400
 800b888:	40014000 	.word	0x40014000
 800b88c:	40014400 	.word	0x40014400
 800b890:	40014800 	.word	0x40014800
 800b894:	4000e000 	.word	0x4000e000
 800b898:	4000e400 	.word	0x4000e400

0800b89c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	f023 0201 	bic.w	r2, r3, #1
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4b37      	ldr	r3, [pc, #220]	; (800b9a4 <TIM_OC1_SetConfig+0x108>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f023 0303 	bic.w	r3, r3, #3
 800b8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f023 0302 	bic.w	r3, r3, #2
 800b8e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a2d      	ldr	r2, [pc, #180]	; (800b9a8 <TIM_OC1_SetConfig+0x10c>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00f      	beq.n	800b918 <TIM_OC1_SetConfig+0x7c>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a2c      	ldr	r2, [pc, #176]	; (800b9ac <TIM_OC1_SetConfig+0x110>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00b      	beq.n	800b918 <TIM_OC1_SetConfig+0x7c>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a2b      	ldr	r2, [pc, #172]	; (800b9b0 <TIM_OC1_SetConfig+0x114>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d007      	beq.n	800b918 <TIM_OC1_SetConfig+0x7c>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a2a      	ldr	r2, [pc, #168]	; (800b9b4 <TIM_OC1_SetConfig+0x118>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_OC1_SetConfig+0x7c>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a29      	ldr	r2, [pc, #164]	; (800b9b8 <TIM_OC1_SetConfig+0x11c>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d10c      	bne.n	800b932 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f023 0308 	bic.w	r3, r3, #8
 800b91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	4313      	orrs	r3, r2
 800b928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f023 0304 	bic.w	r3, r3, #4
 800b930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a1c      	ldr	r2, [pc, #112]	; (800b9a8 <TIM_OC1_SetConfig+0x10c>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00f      	beq.n	800b95a <TIM_OC1_SetConfig+0xbe>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a1b      	ldr	r2, [pc, #108]	; (800b9ac <TIM_OC1_SetConfig+0x110>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00b      	beq.n	800b95a <TIM_OC1_SetConfig+0xbe>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a1a      	ldr	r2, [pc, #104]	; (800b9b0 <TIM_OC1_SetConfig+0x114>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d007      	beq.n	800b95a <TIM_OC1_SetConfig+0xbe>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a19      	ldr	r2, [pc, #100]	; (800b9b4 <TIM_OC1_SetConfig+0x118>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d003      	beq.n	800b95a <TIM_OC1_SetConfig+0xbe>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a18      	ldr	r2, [pc, #96]	; (800b9b8 <TIM_OC1_SetConfig+0x11c>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d111      	bne.n	800b97e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	4313      	orrs	r3, r2
 800b972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	621a      	str	r2, [r3, #32]
}
 800b998:	bf00      	nop
 800b99a:	371c      	adds	r7, #28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	fffeff8f 	.word	0xfffeff8f
 800b9a8:	40010000 	.word	0x40010000
 800b9ac:	40010400 	.word	0x40010400
 800b9b0:	40014000 	.word	0x40014000
 800b9b4:	40014400 	.word	0x40014400
 800b9b8:	40014800 	.word	0x40014800

0800b9bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	f023 0210 	bic.w	r2, r3, #16
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4b34      	ldr	r3, [pc, #208]	; (800bab8 <TIM_OC2_SetConfig+0xfc>)
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	f023 0320 	bic.w	r3, r3, #32
 800ba06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	011b      	lsls	r3, r3, #4
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a29      	ldr	r2, [pc, #164]	; (800babc <TIM_OC2_SetConfig+0x100>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d003      	beq.n	800ba24 <TIM_OC2_SetConfig+0x68>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a28      	ldr	r2, [pc, #160]	; (800bac0 <TIM_OC2_SetConfig+0x104>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d10d      	bne.n	800ba40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	011b      	lsls	r3, r3, #4
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a1e      	ldr	r2, [pc, #120]	; (800babc <TIM_OC2_SetConfig+0x100>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00f      	beq.n	800ba68 <TIM_OC2_SetConfig+0xac>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a1d      	ldr	r2, [pc, #116]	; (800bac0 <TIM_OC2_SetConfig+0x104>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00b      	beq.n	800ba68 <TIM_OC2_SetConfig+0xac>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a1c      	ldr	r2, [pc, #112]	; (800bac4 <TIM_OC2_SetConfig+0x108>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d007      	beq.n	800ba68 <TIM_OC2_SetConfig+0xac>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a1b      	ldr	r2, [pc, #108]	; (800bac8 <TIM_OC2_SetConfig+0x10c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_OC2_SetConfig+0xac>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a1a      	ldr	r2, [pc, #104]	; (800bacc <TIM_OC2_SetConfig+0x110>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d113      	bne.n	800ba90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	621a      	str	r2, [r3, #32]
}
 800baaa:	bf00      	nop
 800baac:	371c      	adds	r7, #28
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	feff8fff 	.word	0xfeff8fff
 800babc:	40010000 	.word	0x40010000
 800bac0:	40010400 	.word	0x40010400
 800bac4:	40014000 	.word	0x40014000
 800bac8:	40014400 	.word	0x40014400
 800bacc:	40014800 	.word	0x40014800

0800bad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4b33      	ldr	r3, [pc, #204]	; (800bbc8 <TIM_OC3_SetConfig+0xf8>)
 800bafc:	4013      	ands	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f023 0303 	bic.w	r3, r3, #3
 800bb06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	021b      	lsls	r3, r3, #8
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a28      	ldr	r2, [pc, #160]	; (800bbcc <TIM_OC3_SetConfig+0xfc>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d003      	beq.n	800bb36 <TIM_OC3_SetConfig+0x66>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a27      	ldr	r2, [pc, #156]	; (800bbd0 <TIM_OC3_SetConfig+0x100>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d10d      	bne.n	800bb52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a1d      	ldr	r2, [pc, #116]	; (800bbcc <TIM_OC3_SetConfig+0xfc>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d00f      	beq.n	800bb7a <TIM_OC3_SetConfig+0xaa>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a1c      	ldr	r2, [pc, #112]	; (800bbd0 <TIM_OC3_SetConfig+0x100>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d00b      	beq.n	800bb7a <TIM_OC3_SetConfig+0xaa>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a1b      	ldr	r2, [pc, #108]	; (800bbd4 <TIM_OC3_SetConfig+0x104>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d007      	beq.n	800bb7a <TIM_OC3_SetConfig+0xaa>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a1a      	ldr	r2, [pc, #104]	; (800bbd8 <TIM_OC3_SetConfig+0x108>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d003      	beq.n	800bb7a <TIM_OC3_SetConfig+0xaa>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a19      	ldr	r2, [pc, #100]	; (800bbdc <TIM_OC3_SetConfig+0x10c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d113      	bne.n	800bba2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	621a      	str	r2, [r3, #32]
}
 800bbbc:	bf00      	nop
 800bbbe:	371c      	adds	r7, #28
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	fffeff8f 	.word	0xfffeff8f
 800bbcc:	40010000 	.word	0x40010000
 800bbd0:	40010400 	.word	0x40010400
 800bbd4:	40014000 	.word	0x40014000
 800bbd8:	40014400 	.word	0x40014400
 800bbdc:	40014800 	.word	0x40014800

0800bbe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4b24      	ldr	r3, [pc, #144]	; (800bc9c <TIM_OC4_SetConfig+0xbc>)
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	021b      	lsls	r3, r3, #8
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	031b      	lsls	r3, r3, #12
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	4313      	orrs	r3, r2
 800bc36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a19      	ldr	r2, [pc, #100]	; (800bca0 <TIM_OC4_SetConfig+0xc0>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00f      	beq.n	800bc60 <TIM_OC4_SetConfig+0x80>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a18      	ldr	r2, [pc, #96]	; (800bca4 <TIM_OC4_SetConfig+0xc4>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d00b      	beq.n	800bc60 <TIM_OC4_SetConfig+0x80>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a17      	ldr	r2, [pc, #92]	; (800bca8 <TIM_OC4_SetConfig+0xc8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d007      	beq.n	800bc60 <TIM_OC4_SetConfig+0x80>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a16      	ldr	r2, [pc, #88]	; (800bcac <TIM_OC4_SetConfig+0xcc>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d003      	beq.n	800bc60 <TIM_OC4_SetConfig+0x80>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a15      	ldr	r2, [pc, #84]	; (800bcb0 <TIM_OC4_SetConfig+0xd0>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d109      	bne.n	800bc74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	019b      	lsls	r3, r3, #6
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	621a      	str	r2, [r3, #32]
}
 800bc8e:	bf00      	nop
 800bc90:	371c      	adds	r7, #28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	feff8fff 	.word	0xfeff8fff
 800bca0:	40010000 	.word	0x40010000
 800bca4:	40010400 	.word	0x40010400
 800bca8:	40014000 	.word	0x40014000
 800bcac:	40014400 	.word	0x40014400
 800bcb0:	40014800 	.word	0x40014800

0800bcb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4b21      	ldr	r3, [pc, #132]	; (800bd64 <TIM_OC5_SetConfig+0xb0>)
 800bce0:	4013      	ands	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bcf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	041b      	lsls	r3, r3, #16
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a18      	ldr	r2, [pc, #96]	; (800bd68 <TIM_OC5_SetConfig+0xb4>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00f      	beq.n	800bd2a <TIM_OC5_SetConfig+0x76>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a17      	ldr	r2, [pc, #92]	; (800bd6c <TIM_OC5_SetConfig+0xb8>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d00b      	beq.n	800bd2a <TIM_OC5_SetConfig+0x76>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <TIM_OC5_SetConfig+0xbc>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d007      	beq.n	800bd2a <TIM_OC5_SetConfig+0x76>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a15      	ldr	r2, [pc, #84]	; (800bd74 <TIM_OC5_SetConfig+0xc0>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d003      	beq.n	800bd2a <TIM_OC5_SetConfig+0x76>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a14      	ldr	r2, [pc, #80]	; (800bd78 <TIM_OC5_SetConfig+0xc4>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d109      	bne.n	800bd3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	621a      	str	r2, [r3, #32]
}
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	fffeff8f 	.word	0xfffeff8f
 800bd68:	40010000 	.word	0x40010000
 800bd6c:	40010400 	.word	0x40010400
 800bd70:	40014000 	.word	0x40014000
 800bd74:	40014400 	.word	0x40014400
 800bd78:	40014800 	.word	0x40014800

0800bd7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4b22      	ldr	r3, [pc, #136]	; (800be30 <TIM_OC6_SetConfig+0xb4>)
 800bda8:	4013      	ands	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	021b      	lsls	r3, r3, #8
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bdbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	051b      	lsls	r3, r3, #20
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a19      	ldr	r2, [pc, #100]	; (800be34 <TIM_OC6_SetConfig+0xb8>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d00f      	beq.n	800bdf4 <TIM_OC6_SetConfig+0x78>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a18      	ldr	r2, [pc, #96]	; (800be38 <TIM_OC6_SetConfig+0xbc>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d00b      	beq.n	800bdf4 <TIM_OC6_SetConfig+0x78>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a17      	ldr	r2, [pc, #92]	; (800be3c <TIM_OC6_SetConfig+0xc0>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d007      	beq.n	800bdf4 <TIM_OC6_SetConfig+0x78>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a16      	ldr	r2, [pc, #88]	; (800be40 <TIM_OC6_SetConfig+0xc4>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d003      	beq.n	800bdf4 <TIM_OC6_SetConfig+0x78>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a15      	ldr	r2, [pc, #84]	; (800be44 <TIM_OC6_SetConfig+0xc8>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d109      	bne.n	800be08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bdfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	029b      	lsls	r3, r3, #10
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	4313      	orrs	r3, r2
 800be06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	621a      	str	r2, [r3, #32]
}
 800be22:	bf00      	nop
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	feff8fff 	.word	0xfeff8fff
 800be34:	40010000 	.word	0x40010000
 800be38:	40010400 	.word	0x40010400
 800be3c:	40014000 	.word	0x40014000
 800be40:	40014400 	.word	0x40014400
 800be44:	40014800 	.word	0x40014800

0800be48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	f023 0201 	bic.w	r2, r3, #1
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	011b      	lsls	r3, r3, #4
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f023 030a 	bic.w	r3, r3, #10
 800be84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	621a      	str	r2, [r3, #32]
}
 800be9a:	bf00      	nop
 800be9c:	371c      	adds	r7, #28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b087      	sub	sp, #28
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	f023 0210 	bic.w	r2, r3, #16
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	699b      	ldr	r3, [r3, #24]
 800bec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6a1b      	ldr	r3, [r3, #32]
 800bec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	031b      	lsls	r3, r3, #12
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	011b      	lsls	r3, r3, #4
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	4313      	orrs	r3, r2
 800beec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	697a      	ldr	r2, [r7, #20]
 800bef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	621a      	str	r2, [r3, #32]
}
 800befa:	bf00      	nop
 800befc:	371c      	adds	r7, #28
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
	...

0800bf08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	4b09      	ldr	r3, [pc, #36]	; (800bf40 <TIM_ITRx_SetConfig+0x38>)
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	f043 0307 	orr.w	r3, r3, #7
 800bf2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	609a      	str	r2, [r3, #8]
}
 800bf32:	bf00      	nop
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	ffcfff8f 	.word	0xffcfff8f

0800bf44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	021a      	lsls	r2, r3, #8
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	431a      	orrs	r2, r3
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	609a      	str	r2, [r3, #8]
}
 800bf78:	bf00      	nop
 800bf7a:	371c      	adds	r7, #28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	f003 031f 	and.w	r3, r3, #31
 800bf96:	2201      	movs	r2, #1
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6a1a      	ldr	r2, [r3, #32]
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	43db      	mvns	r3, r3
 800bfa6:	401a      	ands	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6a1a      	ldr	r2, [r3, #32]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f003 031f 	and.w	r3, r3, #31
 800bfb6:	6879      	ldr	r1, [r7, #4]
 800bfb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfbc:	431a      	orrs	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	621a      	str	r2, [r3, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
	...

0800bfd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d101      	bne.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	e077      	b.n	800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a35      	ldr	r2, [pc, #212]	; (800c0e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d004      	beq.n	800c01c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a34      	ldr	r2, [pc, #208]	; (800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d108      	bne.n	800c02e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c034:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a25      	ldr	r2, [pc, #148]	; (800c0e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d02c      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05a:	d027      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a22      	ldr	r2, [pc, #136]	; (800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d022      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a21      	ldr	r2, [pc, #132]	; (800c0f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d01d      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a1f      	ldr	r2, [pc, #124]	; (800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d018      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a1a      	ldr	r2, [pc, #104]	; (800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d013      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a1b      	ldr	r2, [pc, #108]	; (800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d00e      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a1a      	ldr	r2, [pc, #104]	; (800c0fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d009      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a18      	ldr	r2, [pc, #96]	; (800c100 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d004      	beq.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a17      	ldr	r2, [pc, #92]	; (800c104 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d10c      	bne.n	800c0c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	40010000 	.word	0x40010000
 800c0e8:	40010400 	.word	0x40010400
 800c0ec:	40000400 	.word	0x40000400
 800c0f0:	40000800 	.word	0x40000800
 800c0f4:	40000c00 	.word	0x40000c00
 800c0f8:	40001800 	.word	0x40001800
 800c0fc:	40014000 	.word	0x40014000
 800c100:	4000e000 	.word	0x4000e000
 800c104:	4000e400 	.word	0x4000e400

0800c108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d101      	bne.n	800c124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c120:	2302      	movs	r3, #2
 800c122:	e087      	b.n	800c234 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	4313      	orrs	r3, r2
 800c138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	4313      	orrs	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	4313      	orrs	r3, r2
 800c154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4313      	orrs	r3, r2
 800c162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	4313      	orrs	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18a:	4313      	orrs	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	041b      	lsls	r3, r3, #16
 800c19a:	4313      	orrs	r3, r2
 800c19c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a27      	ldr	r2, [pc, #156]	; (800c240 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d004      	beq.n	800c1b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a25      	ldr	r2, [pc, #148]	; (800c244 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d106      	bne.n	800c1c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a1e      	ldr	r2, [pc, #120]	; (800c240 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d004      	beq.n	800c1d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a1d      	ldr	r2, [pc, #116]	; (800c244 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d126      	bne.n	800c222 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1de:	051b      	lsls	r3, r3, #20
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a0e      	ldr	r2, [pc, #56]	; (800c240 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d004      	beq.n	800c214 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a0d      	ldr	r2, [pc, #52]	; (800c244 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d106      	bne.n	800c222 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21e:	4313      	orrs	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr
 800c240:	40010000 	.word	0x40010000
 800c244:	40010400 	.word	0x40010400

0800c248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e042      	b.n	800c31c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d106      	bne.n	800c2ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7f7 ffd9 	bl	8004260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2224      	movs	r2, #36	; 0x24
 800c2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f022 0201 	bic.w	r2, r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fd0e 	bl	800cce8 <UART_SetConfig>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d101      	bne.n	800c2d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e022      	b.n	800c31c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f001 fb6e 	bl	800d9c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685a      	ldr	r2, [r3, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	689a      	ldr	r2, [r3, #8]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f042 0201 	orr.w	r2, r2, #1
 800c312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f001 fbf5 	bl	800db04 <UART_CheckIdleState>
 800c31a:	4603      	mov	r3, r0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e02e      	b.n	800c394 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2224      	movs	r2, #36	; 0x24
 800c33a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f022 0201 	bic.w	r2, r2, #1
 800c34c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2200      	movs	r2, #0
 800c354:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2200      	movs	r2, #0
 800c35c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2200      	movs	r2, #0
 800c364:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7f8 f862 	bl	8004430 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08a      	sub	sp, #40	; 0x28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b0:	2b20      	cmp	r3, #32
 800c3b2:	d17a      	bne.n	800c4aa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d002      	beq.n	800c3c0 <HAL_UART_Transmit_DMA+0x24>
 800c3ba:	88fb      	ldrh	r3, [r7, #6]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e073      	b.n	800c4ac <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d101      	bne.n	800c3d2 <HAL_UART_Transmit_DMA+0x36>
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	e06c      	b.n	800c4ac <HAL_UART_Transmit_DMA+0x110>
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	88fa      	ldrh	r2, [r7, #6]
 800c3e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	88fa      	ldrh	r2, [r7, #6]
 800c3ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2221      	movs	r2, #33	; 0x21
 800c3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c404:	2b00      	cmp	r3, #0
 800c406:	d02c      	beq.n	800c462 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c40c:	4a29      	ldr	r2, [pc, #164]	; (800c4b4 <HAL_UART_Transmit_DMA+0x118>)
 800c40e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c414:	4a28      	ldr	r2, [pc, #160]	; (800c4b8 <HAL_UART_Transmit_DMA+0x11c>)
 800c416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c41c:	4a27      	ldr	r2, [pc, #156]	; (800c4bc <HAL_UART_Transmit_DMA+0x120>)
 800c41e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c424:	2200      	movs	r2, #0
 800c426:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c430:	4619      	mov	r1, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3328      	adds	r3, #40	; 0x28
 800c438:	461a      	mov	r2, r3
 800c43a:	88fb      	ldrh	r3, [r7, #6]
 800c43c:	f7f9 fa56 	bl	80058ec <HAL_DMA_Start_IT>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00d      	beq.n	800c462 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2210      	movs	r2, #16
 800c44a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2220      	movs	r2, #32
 800c45a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e024      	b.n	800c4ac <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2240      	movs	r2, #64	; 0x40
 800c468:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3308      	adds	r3, #8
 800c478:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	e853 3f00 	ldrex	r3, [r3]
 800c480:	613b      	str	r3, [r7, #16]
   return(result);
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c488:	627b      	str	r3, [r7, #36]	; 0x24
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3308      	adds	r3, #8
 800c490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c492:	623a      	str	r2, [r7, #32]
 800c494:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c496:	69f9      	ldr	r1, [r7, #28]
 800c498:	6a3a      	ldr	r2, [r7, #32]
 800c49a:	e841 2300 	strex	r3, r2, [r1]
 800c49e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1e5      	bne.n	800c472 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e000      	b.n	800c4ac <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c4aa:	2302      	movs	r3, #2
  }
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3728      	adds	r7, #40	; 0x28
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	0800dfcd 	.word	0x0800dfcd
 800c4b8:	0800e063 	.word	0x0800e063
 800c4bc:	0800e1d9 	.word	0x0800e1d9

0800c4c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	; 0x28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d4:	2b20      	cmp	r3, #32
 800c4d6:	d142      	bne.n	800c55e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d002      	beq.n	800c4e4 <HAL_UART_Receive_DMA+0x24>
 800c4de:	88fb      	ldrh	r3, [r7, #6]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e03b      	b.n	800c560 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d101      	bne.n	800c4f6 <HAL_UART_Receive_DMA+0x36>
 800c4f2:	2302      	movs	r3, #2
 800c4f4:	e034      	b.n	800c560 <HAL_UART_Receive_DMA+0xa0>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a17      	ldr	r2, [pc, #92]	; (800c568 <HAL_UART_Receive_DMA+0xa8>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d01f      	beq.n	800c54e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d018      	beq.n	800c54e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	e853 3f00 	ldrex	r3, [r3]
 800c528:	613b      	str	r3, [r7, #16]
   return(result);
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c530:	627b      	str	r3, [r7, #36]	; 0x24
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	461a      	mov	r2, r3
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	623b      	str	r3, [r7, #32]
 800c53c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53e:	69f9      	ldr	r1, [r7, #28]
 800c540:	6a3a      	ldr	r2, [r7, #32]
 800c542:	e841 2300 	strex	r3, r2, [r1]
 800c546:	61bb      	str	r3, [r7, #24]
   return(result);
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1e6      	bne.n	800c51c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c54e:	88fb      	ldrh	r3, [r7, #6]
 800c550:	461a      	mov	r2, r3
 800c552:	68b9      	ldr	r1, [r7, #8]
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f001 fbe9 	bl	800dd2c <UART_Start_Receive_DMA>
 800c55a:	4603      	mov	r3, r0
 800c55c:	e000      	b.n	800c560 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c55e:	2302      	movs	r3, #2
  }
}
 800c560:	4618      	mov	r0, r3
 800c562:	3728      	adds	r7, #40	; 0x28
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	58000c00 	.word	0x58000c00

0800c56c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b0ba      	sub	sp, #232	; 0xe8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c596:	f640 030f 	movw	r3, #2063	; 0x80f
 800c59a:	4013      	ands	r3, r2
 800c59c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c5a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d11b      	bne.n	800c5e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5ac:	f003 0320 	and.w	r3, r3, #32
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d015      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5b8:	f003 0320 	and.w	r3, r3, #32
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d105      	bne.n	800c5cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d009      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 835a 	beq.w	800cc8a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	4798      	blx	r3
      }
      return;
 800c5de:	e354      	b.n	800cc8a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c5e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 811f 	beq.w	800c828 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c5ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c5ee:	4b8b      	ldr	r3, [pc, #556]	; (800c81c <HAL_UART_IRQHandler+0x2b0>)
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c5f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c5fa:	4b89      	ldr	r3, [pc, #548]	; (800c820 <HAL_UART_IRQHandler+0x2b4>)
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 8112 	beq.w	800c828 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d011      	beq.n	800c634 <HAL_UART_IRQHandler+0xc8>
 800c610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00b      	beq.n	800c634 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2201      	movs	r2, #1
 800c622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c62a:	f043 0201 	orr.w	r2, r3, #1
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c638:	f003 0302 	and.w	r3, r3, #2
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d011      	beq.n	800c664 <HAL_UART_IRQHandler+0xf8>
 800c640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2202      	movs	r2, #2
 800c652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c65a:	f043 0204 	orr.w	r2, r3, #4
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d011      	beq.n	800c694 <HAL_UART_IRQHandler+0x128>
 800c670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2204      	movs	r2, #4
 800c682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c68a:	f043 0202 	orr.w	r2, r3, #2
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c698:	f003 0308 	and.w	r3, r3, #8
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d017      	beq.n	800c6d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a4:	f003 0320 	and.w	r3, r3, #32
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d105      	bne.n	800c6b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c6b0:	4b5a      	ldr	r3, [pc, #360]	; (800c81c <HAL_UART_IRQHandler+0x2b0>)
 800c6b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d00b      	beq.n	800c6d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2208      	movs	r2, #8
 800c6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6c6:	f043 0208 	orr.w	r2, r3, #8
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d012      	beq.n	800c702 <HAL_UART_IRQHandler+0x196>
 800c6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00c      	beq.n	800c702 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6f8:	f043 0220 	orr.w	r2, r3, #32
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 82c0 	beq.w	800cc8e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c712:	f003 0320 	and.w	r3, r3, #32
 800c716:	2b00      	cmp	r3, #0
 800c718:	d013      	beq.n	800c742 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c71e:	f003 0320 	and.w	r3, r3, #32
 800c722:	2b00      	cmp	r3, #0
 800c724:	d105      	bne.n	800c732 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c72a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d007      	beq.n	800c742 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c756:	2b40      	cmp	r3, #64	; 0x40
 800c758:	d005      	beq.n	800c766 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c75a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c75e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c762:	2b00      	cmp	r3, #0
 800c764:	d04f      	beq.n	800c806 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f001 fbca 	bl	800df00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c776:	2b40      	cmp	r3, #64	; 0x40
 800c778:	d141      	bne.n	800c7fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3308      	adds	r3, #8
 800c780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c788:	e853 3f00 	ldrex	r3, [r3]
 800c78c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c7a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c7aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c7b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c7b6:	e841 2300 	strex	r3, r2, [r1]
 800c7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c7be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1d9      	bne.n	800c77a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d013      	beq.n	800c7f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d2:	4a14      	ldr	r2, [pc, #80]	; (800c824 <HAL_UART_IRQHandler+0x2b8>)
 800c7d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f9 fe0e 	bl	80063fc <HAL_DMA_Abort_IT>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d017      	beq.n	800c816 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7f4:	e00f      	b.n	800c816 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7f6 fc70 	bl	80030dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7fc:	e00b      	b.n	800c816 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7f6 fc6c 	bl	80030dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c804:	e007      	b.n	800c816 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7f6 fc68 	bl	80030dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c814:	e23b      	b.n	800cc8e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c816:	bf00      	nop
    return;
 800c818:	e239      	b.n	800cc8e <HAL_UART_IRQHandler+0x722>
 800c81a:	bf00      	nop
 800c81c:	10000001 	.word	0x10000001
 800c820:	04000120 	.word	0x04000120
 800c824:	0800e259 	.word	0x0800e259

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	f040 81ce 	bne.w	800cbce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c836:	f003 0310 	and.w	r3, r3, #16
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 81c7 	beq.w	800cbce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c844:	f003 0310 	and.w	r3, r3, #16
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 81c0 	beq.w	800cbce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2210      	movs	r2, #16
 800c854:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c860:	2b40      	cmp	r3, #64	; 0x40
 800c862:	f040 813b 	bne.w	800cadc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a8b      	ldr	r2, [pc, #556]	; (800ca9c <HAL_UART_IRQHandler+0x530>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d059      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a89      	ldr	r2, [pc, #548]	; (800caa0 <HAL_UART_IRQHandler+0x534>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d053      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a87      	ldr	r2, [pc, #540]	; (800caa4 <HAL_UART_IRQHandler+0x538>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d04d      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a85      	ldr	r2, [pc, #532]	; (800caa8 <HAL_UART_IRQHandler+0x53c>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d047      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a83      	ldr	r2, [pc, #524]	; (800caac <HAL_UART_IRQHandler+0x540>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d041      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a81      	ldr	r2, [pc, #516]	; (800cab0 <HAL_UART_IRQHandler+0x544>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d03b      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a7f      	ldr	r2, [pc, #508]	; (800cab4 <HAL_UART_IRQHandler+0x548>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d035      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a7d      	ldr	r2, [pc, #500]	; (800cab8 <HAL_UART_IRQHandler+0x54c>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d02f      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a7b      	ldr	r2, [pc, #492]	; (800cabc <HAL_UART_IRQHandler+0x550>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d029      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a79      	ldr	r2, [pc, #484]	; (800cac0 <HAL_UART_IRQHandler+0x554>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d023      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a77      	ldr	r2, [pc, #476]	; (800cac4 <HAL_UART_IRQHandler+0x558>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d01d      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a75      	ldr	r2, [pc, #468]	; (800cac8 <HAL_UART_IRQHandler+0x55c>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d017      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a73      	ldr	r2, [pc, #460]	; (800cacc <HAL_UART_IRQHandler+0x560>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d011      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a71      	ldr	r2, [pc, #452]	; (800cad0 <HAL_UART_IRQHandler+0x564>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d00b      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a6f      	ldr	r2, [pc, #444]	; (800cad4 <HAL_UART_IRQHandler+0x568>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d005      	beq.n	800c926 <HAL_UART_IRQHandler+0x3ba>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a6d      	ldr	r2, [pc, #436]	; (800cad8 <HAL_UART_IRQHandler+0x56c>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d105      	bne.n	800c932 <HAL_UART_IRQHandler+0x3c6>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	b29b      	uxth	r3, r3
 800c930:	e004      	b.n	800c93c <HAL_UART_IRQHandler+0x3d0>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 81a4 	beq.w	800cc92 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c954:	429a      	cmp	r2, r3
 800c956:	f080 819c 	bcs.w	800cc92 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c96e:	f000 8086 	beq.w	800ca7e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c97e:	e853 3f00 	ldrex	r3, [r3]
 800c982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c98a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c98e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c99c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c9a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c9a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c9ac:	e841 2300 	strex	r3, r2, [r1]
 800c9b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1da      	bne.n	800c972 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3308      	adds	r3, #8
 800c9c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9c6:	e853 3f00 	ldrex	r3, [r3]
 800c9ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9ce:	f023 0301 	bic.w	r3, r3, #1
 800c9d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	3308      	adds	r3, #8
 800c9dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c9e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c9e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9ec:	e841 2300 	strex	r3, r2, [r1]
 800c9f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1e1      	bne.n	800c9bc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca02:	e853 3f00 	ldrex	r3, [r3]
 800ca06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ca08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3308      	adds	r3, #8
 800ca18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ca1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca24:	e841 2300 	strex	r3, r2, [r1]
 800ca28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1e3      	bne.n	800c9f8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2220      	movs	r2, #32
 800ca34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca46:	e853 3f00 	ldrex	r3, [r3]
 800ca4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca4e:	f023 0310 	bic.w	r3, r3, #16
 800ca52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca60:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e4      	bne.n	800ca3e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7f9 f9a1 	bl	8005dc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f91c 	bl	800ccd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca98:	e0fb      	b.n	800cc92 <HAL_UART_IRQHandler+0x726>
 800ca9a:	bf00      	nop
 800ca9c:	40020010 	.word	0x40020010
 800caa0:	40020028 	.word	0x40020028
 800caa4:	40020040 	.word	0x40020040
 800caa8:	40020058 	.word	0x40020058
 800caac:	40020070 	.word	0x40020070
 800cab0:	40020088 	.word	0x40020088
 800cab4:	400200a0 	.word	0x400200a0
 800cab8:	400200b8 	.word	0x400200b8
 800cabc:	40020410 	.word	0x40020410
 800cac0:	40020428 	.word	0x40020428
 800cac4:	40020440 	.word	0x40020440
 800cac8:	40020458 	.word	0x40020458
 800cacc:	40020470 	.word	0x40020470
 800cad0:	40020488 	.word	0x40020488
 800cad4:	400204a0 	.word	0x400204a0
 800cad8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cae8:	b29b      	uxth	r3, r3
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 80cc 	beq.w	800cc96 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cafe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 80c7 	beq.w	800cc96 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	e853 3f00 	ldrex	r3, [r3]
 800cb14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	461a      	mov	r2, r3
 800cb26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb2a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e4      	bne.n	800cb08 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3308      	adds	r3, #8
 800cb44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	e853 3f00 	ldrex	r3, [r3]
 800cb4c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb4e:	6a3a      	ldr	r2, [r7, #32]
 800cb50:	4b54      	ldr	r3, [pc, #336]	; (800cca4 <HAL_UART_IRQHandler+0x738>)
 800cb52:	4013      	ands	r3, r2
 800cb54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cb62:	633a      	str	r2, [r7, #48]	; 0x30
 800cb64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6a:	e841 2300 	strex	r3, r2, [r1]
 800cb6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e3      	bne.n	800cb3e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2220      	movs	r2, #32
 800cb7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	e853 3f00 	ldrex	r3, [r3]
 800cb96:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f023 0310 	bic.w	r3, r3, #16
 800cb9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cbac:	61fb      	str	r3, [r7, #28]
 800cbae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb0:	69b9      	ldr	r1, [r7, #24]
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	e841 2300 	strex	r3, r2, [r1]
 800cbb8:	617b      	str	r3, [r7, #20]
   return(result);
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1e4      	bne.n	800cb8a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f882 	bl	800ccd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cbcc:	e063      	b.n	800cc96 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cbce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00e      	beq.n	800cbf8 <HAL_UART_IRQHandler+0x68c>
 800cbda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d008      	beq.n	800cbf8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cbee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f001 fb72 	bl	800e2da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbf6:	e051      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d014      	beq.n	800cc2e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d105      	bne.n	800cc1c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cc10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d008      	beq.n	800cc2e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d03a      	beq.n	800cc9a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	4798      	blx	r3
    }
    return;
 800cc2c:	e035      	b.n	800cc9a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <HAL_UART_IRQHandler+0x6e2>
 800cc3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d003      	beq.n	800cc4e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f001 fb1c 	bl	800e284 <UART_EndTransmit_IT>
    return;
 800cc4c:	e026      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d009      	beq.n	800cc6e <HAL_UART_IRQHandler+0x702>
 800cc5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f001 fb4b 	bl	800e302 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc6c:	e016      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d010      	beq.n	800cc9c <HAL_UART_IRQHandler+0x730>
 800cc7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	da0c      	bge.n	800cc9c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 fb33 	bl	800e2ee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc88:	e008      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
      return;
 800cc8a:	bf00      	nop
 800cc8c:	e006      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
    return;
 800cc8e:	bf00      	nop
 800cc90:	e004      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
      return;
 800cc92:	bf00      	nop
 800cc94:	e002      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
      return;
 800cc96:	bf00      	nop
 800cc98:	e000      	b.n	800cc9c <HAL_UART_IRQHandler+0x730>
    return;
 800cc9a:	bf00      	nop
  }
}
 800cc9c:	37e8      	adds	r7, #232	; 0xe8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	effffffe 	.word	0xeffffffe

0800cca8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccec:	b092      	sub	sp, #72	; 0x48
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	689a      	ldr	r2, [r3, #8]
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	431a      	orrs	r2, r3
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	4bbe      	ldr	r3, [pc, #760]	; (800d010 <UART_SetConfig+0x328>)
 800cd18:	4013      	ands	r3, r2
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	6812      	ldr	r2, [r2, #0]
 800cd1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd20:	430b      	orrs	r3, r1
 800cd22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	68da      	ldr	r2, [r3, #12]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	699b      	ldr	r3, [r3, #24]
 800cd3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4ab3      	ldr	r2, [pc, #716]	; (800d014 <UART_SetConfig+0x32c>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d004      	beq.n	800cd54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd50:	4313      	orrs	r3, r2
 800cd52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	4baf      	ldr	r3, [pc, #700]	; (800d018 <UART_SetConfig+0x330>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	6812      	ldr	r2, [r2, #0]
 800cd62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd64:	430b      	orrs	r3, r1
 800cd66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	f023 010f 	bic.w	r1, r3, #15
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	430a      	orrs	r2, r1
 800cd7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4aa6      	ldr	r2, [pc, #664]	; (800d01c <UART_SetConfig+0x334>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d177      	bne.n	800ce78 <UART_SetConfig+0x190>
 800cd88:	4ba5      	ldr	r3, [pc, #660]	; (800d020 <UART_SetConfig+0x338>)
 800cd8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd90:	2b28      	cmp	r3, #40	; 0x28
 800cd92:	d86d      	bhi.n	800ce70 <UART_SetConfig+0x188>
 800cd94:	a201      	add	r2, pc, #4	; (adr r2, 800cd9c <UART_SetConfig+0xb4>)
 800cd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9a:	bf00      	nop
 800cd9c:	0800ce41 	.word	0x0800ce41
 800cda0:	0800ce71 	.word	0x0800ce71
 800cda4:	0800ce71 	.word	0x0800ce71
 800cda8:	0800ce71 	.word	0x0800ce71
 800cdac:	0800ce71 	.word	0x0800ce71
 800cdb0:	0800ce71 	.word	0x0800ce71
 800cdb4:	0800ce71 	.word	0x0800ce71
 800cdb8:	0800ce71 	.word	0x0800ce71
 800cdbc:	0800ce49 	.word	0x0800ce49
 800cdc0:	0800ce71 	.word	0x0800ce71
 800cdc4:	0800ce71 	.word	0x0800ce71
 800cdc8:	0800ce71 	.word	0x0800ce71
 800cdcc:	0800ce71 	.word	0x0800ce71
 800cdd0:	0800ce71 	.word	0x0800ce71
 800cdd4:	0800ce71 	.word	0x0800ce71
 800cdd8:	0800ce71 	.word	0x0800ce71
 800cddc:	0800ce51 	.word	0x0800ce51
 800cde0:	0800ce71 	.word	0x0800ce71
 800cde4:	0800ce71 	.word	0x0800ce71
 800cde8:	0800ce71 	.word	0x0800ce71
 800cdec:	0800ce71 	.word	0x0800ce71
 800cdf0:	0800ce71 	.word	0x0800ce71
 800cdf4:	0800ce71 	.word	0x0800ce71
 800cdf8:	0800ce71 	.word	0x0800ce71
 800cdfc:	0800ce59 	.word	0x0800ce59
 800ce00:	0800ce71 	.word	0x0800ce71
 800ce04:	0800ce71 	.word	0x0800ce71
 800ce08:	0800ce71 	.word	0x0800ce71
 800ce0c:	0800ce71 	.word	0x0800ce71
 800ce10:	0800ce71 	.word	0x0800ce71
 800ce14:	0800ce71 	.word	0x0800ce71
 800ce18:	0800ce71 	.word	0x0800ce71
 800ce1c:	0800ce61 	.word	0x0800ce61
 800ce20:	0800ce71 	.word	0x0800ce71
 800ce24:	0800ce71 	.word	0x0800ce71
 800ce28:	0800ce71 	.word	0x0800ce71
 800ce2c:	0800ce71 	.word	0x0800ce71
 800ce30:	0800ce71 	.word	0x0800ce71
 800ce34:	0800ce71 	.word	0x0800ce71
 800ce38:	0800ce71 	.word	0x0800ce71
 800ce3c:	0800ce69 	.word	0x0800ce69
 800ce40:	2301      	movs	r3, #1
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce46:	e326      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ce48:	2304      	movs	r3, #4
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce4e:	e322      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ce50:	2308      	movs	r3, #8
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce56:	e31e      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ce58:	2310      	movs	r3, #16
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce5e:	e31a      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ce60:	2320      	movs	r3, #32
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce66:	e316      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ce68:	2340      	movs	r3, #64	; 0x40
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6e:	e312      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ce70:	2380      	movs	r3, #128	; 0x80
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce76:	e30e      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a69      	ldr	r2, [pc, #420]	; (800d024 <UART_SetConfig+0x33c>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d130      	bne.n	800cee4 <UART_SetConfig+0x1fc>
 800ce82:	4b67      	ldr	r3, [pc, #412]	; (800d020 <UART_SetConfig+0x338>)
 800ce84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	2b05      	cmp	r3, #5
 800ce8c:	d826      	bhi.n	800cedc <UART_SetConfig+0x1f4>
 800ce8e:	a201      	add	r2, pc, #4	; (adr r2, 800ce94 <UART_SetConfig+0x1ac>)
 800ce90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce94:	0800cead 	.word	0x0800cead
 800ce98:	0800ceb5 	.word	0x0800ceb5
 800ce9c:	0800cebd 	.word	0x0800cebd
 800cea0:	0800cec5 	.word	0x0800cec5
 800cea4:	0800cecd 	.word	0x0800cecd
 800cea8:	0800ced5 	.word	0x0800ced5
 800ceac:	2300      	movs	r3, #0
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceb2:	e2f0      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ceb4:	2304      	movs	r3, #4
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceba:	e2ec      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cebc:	2308      	movs	r3, #8
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec2:	e2e8      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cec4:	2310      	movs	r3, #16
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceca:	e2e4      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cecc:	2320      	movs	r3, #32
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced2:	e2e0      	b.n	800d496 <UART_SetConfig+0x7ae>
 800ced4:	2340      	movs	r3, #64	; 0x40
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceda:	e2dc      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cedc:	2380      	movs	r3, #128	; 0x80
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee2:	e2d8      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a4f      	ldr	r2, [pc, #316]	; (800d028 <UART_SetConfig+0x340>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d130      	bne.n	800cf50 <UART_SetConfig+0x268>
 800ceee:	4b4c      	ldr	r3, [pc, #304]	; (800d020 <UART_SetConfig+0x338>)
 800cef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cef2:	f003 0307 	and.w	r3, r3, #7
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	d826      	bhi.n	800cf48 <UART_SetConfig+0x260>
 800cefa:	a201      	add	r2, pc, #4	; (adr r2, 800cf00 <UART_SetConfig+0x218>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800cf19 	.word	0x0800cf19
 800cf04:	0800cf21 	.word	0x0800cf21
 800cf08:	0800cf29 	.word	0x0800cf29
 800cf0c:	0800cf31 	.word	0x0800cf31
 800cf10:	0800cf39 	.word	0x0800cf39
 800cf14:	0800cf41 	.word	0x0800cf41
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1e:	e2ba      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf20:	2304      	movs	r3, #4
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf26:	e2b6      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf28:	2308      	movs	r3, #8
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf2e:	e2b2      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf30:	2310      	movs	r3, #16
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf36:	e2ae      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf38:	2320      	movs	r3, #32
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3e:	e2aa      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf40:	2340      	movs	r3, #64	; 0x40
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf46:	e2a6      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf48:	2380      	movs	r3, #128	; 0x80
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4e:	e2a2      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a35      	ldr	r2, [pc, #212]	; (800d02c <UART_SetConfig+0x344>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d130      	bne.n	800cfbc <UART_SetConfig+0x2d4>
 800cf5a:	4b31      	ldr	r3, [pc, #196]	; (800d020 <UART_SetConfig+0x338>)
 800cf5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d826      	bhi.n	800cfb4 <UART_SetConfig+0x2cc>
 800cf66:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <UART_SetConfig+0x284>)
 800cf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6c:	0800cf85 	.word	0x0800cf85
 800cf70:	0800cf8d 	.word	0x0800cf8d
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800cf9d 	.word	0x0800cf9d
 800cf7c:	0800cfa5 	.word	0x0800cfa5
 800cf80:	0800cfad 	.word	0x0800cfad
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e284      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e280      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf94:	2308      	movs	r3, #8
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9a:	e27c      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cf9c:	2310      	movs	r3, #16
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa2:	e278      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cfa4:	2320      	movs	r3, #32
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfaa:	e274      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cfac:	2340      	movs	r3, #64	; 0x40
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb2:	e270      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cfb4:	2380      	movs	r3, #128	; 0x80
 800cfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfba:	e26c      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a1b      	ldr	r2, [pc, #108]	; (800d030 <UART_SetConfig+0x348>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d142      	bne.n	800d04c <UART_SetConfig+0x364>
 800cfc6:	4b16      	ldr	r3, [pc, #88]	; (800d020 <UART_SetConfig+0x338>)
 800cfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfca:	f003 0307 	and.w	r3, r3, #7
 800cfce:	2b05      	cmp	r3, #5
 800cfd0:	d838      	bhi.n	800d044 <UART_SetConfig+0x35c>
 800cfd2:	a201      	add	r2, pc, #4	; (adr r2, 800cfd8 <UART_SetConfig+0x2f0>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800cff1 	.word	0x0800cff1
 800cfdc:	0800cff9 	.word	0x0800cff9
 800cfe0:	0800d001 	.word	0x0800d001
 800cfe4:	0800d009 	.word	0x0800d009
 800cfe8:	0800d035 	.word	0x0800d035
 800cfec:	0800d03d 	.word	0x0800d03d
 800cff0:	2300      	movs	r3, #0
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e24e      	b.n	800d496 <UART_SetConfig+0x7ae>
 800cff8:	2304      	movs	r3, #4
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e24a      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d000:	2308      	movs	r3, #8
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	e246      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d008:	2310      	movs	r3, #16
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d00e:	e242      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d010:	cfff69f3 	.word	0xcfff69f3
 800d014:	58000c00 	.word	0x58000c00
 800d018:	11fff4ff 	.word	0x11fff4ff
 800d01c:	40011000 	.word	0x40011000
 800d020:	58024400 	.word	0x58024400
 800d024:	40004400 	.word	0x40004400
 800d028:	40004800 	.word	0x40004800
 800d02c:	40004c00 	.word	0x40004c00
 800d030:	40005000 	.word	0x40005000
 800d034:	2320      	movs	r3, #32
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e22c      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d03c:	2340      	movs	r3, #64	; 0x40
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d042:	e228      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d044:	2380      	movs	r3, #128	; 0x80
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e224      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4ab1      	ldr	r2, [pc, #708]	; (800d318 <UART_SetConfig+0x630>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d176      	bne.n	800d144 <UART_SetConfig+0x45c>
 800d056:	4bb1      	ldr	r3, [pc, #708]	; (800d31c <UART_SetConfig+0x634>)
 800d058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d05a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d05e:	2b28      	cmp	r3, #40	; 0x28
 800d060:	d86c      	bhi.n	800d13c <UART_SetConfig+0x454>
 800d062:	a201      	add	r2, pc, #4	; (adr r2, 800d068 <UART_SetConfig+0x380>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d10d 	.word	0x0800d10d
 800d06c:	0800d13d 	.word	0x0800d13d
 800d070:	0800d13d 	.word	0x0800d13d
 800d074:	0800d13d 	.word	0x0800d13d
 800d078:	0800d13d 	.word	0x0800d13d
 800d07c:	0800d13d 	.word	0x0800d13d
 800d080:	0800d13d 	.word	0x0800d13d
 800d084:	0800d13d 	.word	0x0800d13d
 800d088:	0800d115 	.word	0x0800d115
 800d08c:	0800d13d 	.word	0x0800d13d
 800d090:	0800d13d 	.word	0x0800d13d
 800d094:	0800d13d 	.word	0x0800d13d
 800d098:	0800d13d 	.word	0x0800d13d
 800d09c:	0800d13d 	.word	0x0800d13d
 800d0a0:	0800d13d 	.word	0x0800d13d
 800d0a4:	0800d13d 	.word	0x0800d13d
 800d0a8:	0800d11d 	.word	0x0800d11d
 800d0ac:	0800d13d 	.word	0x0800d13d
 800d0b0:	0800d13d 	.word	0x0800d13d
 800d0b4:	0800d13d 	.word	0x0800d13d
 800d0b8:	0800d13d 	.word	0x0800d13d
 800d0bc:	0800d13d 	.word	0x0800d13d
 800d0c0:	0800d13d 	.word	0x0800d13d
 800d0c4:	0800d13d 	.word	0x0800d13d
 800d0c8:	0800d125 	.word	0x0800d125
 800d0cc:	0800d13d 	.word	0x0800d13d
 800d0d0:	0800d13d 	.word	0x0800d13d
 800d0d4:	0800d13d 	.word	0x0800d13d
 800d0d8:	0800d13d 	.word	0x0800d13d
 800d0dc:	0800d13d 	.word	0x0800d13d
 800d0e0:	0800d13d 	.word	0x0800d13d
 800d0e4:	0800d13d 	.word	0x0800d13d
 800d0e8:	0800d12d 	.word	0x0800d12d
 800d0ec:	0800d13d 	.word	0x0800d13d
 800d0f0:	0800d13d 	.word	0x0800d13d
 800d0f4:	0800d13d 	.word	0x0800d13d
 800d0f8:	0800d13d 	.word	0x0800d13d
 800d0fc:	0800d13d 	.word	0x0800d13d
 800d100:	0800d13d 	.word	0x0800d13d
 800d104:	0800d13d 	.word	0x0800d13d
 800d108:	0800d135 	.word	0x0800d135
 800d10c:	2301      	movs	r3, #1
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e1c0      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d114:	2304      	movs	r3, #4
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11a:	e1bc      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d11c:	2308      	movs	r3, #8
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d122:	e1b8      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d124:	2310      	movs	r3, #16
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12a:	e1b4      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d12c:	2320      	movs	r3, #32
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d132:	e1b0      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13a:	e1ac      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d13c:	2380      	movs	r3, #128	; 0x80
 800d13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d142:	e1a8      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a75      	ldr	r2, [pc, #468]	; (800d320 <UART_SetConfig+0x638>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d130      	bne.n	800d1b0 <UART_SetConfig+0x4c8>
 800d14e:	4b73      	ldr	r3, [pc, #460]	; (800d31c <UART_SetConfig+0x634>)
 800d150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d152:	f003 0307 	and.w	r3, r3, #7
 800d156:	2b05      	cmp	r3, #5
 800d158:	d826      	bhi.n	800d1a8 <UART_SetConfig+0x4c0>
 800d15a:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <UART_SetConfig+0x478>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d179 	.word	0x0800d179
 800d164:	0800d181 	.word	0x0800d181
 800d168:	0800d189 	.word	0x0800d189
 800d16c:	0800d191 	.word	0x0800d191
 800d170:	0800d199 	.word	0x0800d199
 800d174:	0800d1a1 	.word	0x0800d1a1
 800d178:	2300      	movs	r3, #0
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e18a      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d180:	2304      	movs	r3, #4
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e186      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d188:	2308      	movs	r3, #8
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18e:	e182      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d190:	2310      	movs	r3, #16
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d196:	e17e      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d198:	2320      	movs	r3, #32
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19e:	e17a      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d1a0:	2340      	movs	r3, #64	; 0x40
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a6:	e176      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d1a8:	2380      	movs	r3, #128	; 0x80
 800d1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ae:	e172      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a5b      	ldr	r2, [pc, #364]	; (800d324 <UART_SetConfig+0x63c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d130      	bne.n	800d21c <UART_SetConfig+0x534>
 800d1ba:	4b58      	ldr	r3, [pc, #352]	; (800d31c <UART_SetConfig+0x634>)
 800d1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1be:	f003 0307 	and.w	r3, r3, #7
 800d1c2:	2b05      	cmp	r3, #5
 800d1c4:	d826      	bhi.n	800d214 <UART_SetConfig+0x52c>
 800d1c6:	a201      	add	r2, pc, #4	; (adr r2, 800d1cc <UART_SetConfig+0x4e4>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d1e5 	.word	0x0800d1e5
 800d1d0:	0800d1ed 	.word	0x0800d1ed
 800d1d4:	0800d1f5 	.word	0x0800d1f5
 800d1d8:	0800d1fd 	.word	0x0800d1fd
 800d1dc:	0800d205 	.word	0x0800d205
 800d1e0:	0800d20d 	.word	0x0800d20d
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e154      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e150      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d1f4:	2308      	movs	r3, #8
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e14c      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d1fc:	2310      	movs	r3, #16
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e148      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d204:	2320      	movs	r3, #32
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20a:	e144      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d20c:	2340      	movs	r3, #64	; 0x40
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d212:	e140      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d214:	2380      	movs	r3, #128	; 0x80
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21a:	e13c      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a41      	ldr	r2, [pc, #260]	; (800d328 <UART_SetConfig+0x640>)
 800d222:	4293      	cmp	r3, r2
 800d224:	f040 8082 	bne.w	800d32c <UART_SetConfig+0x644>
 800d228:	4b3c      	ldr	r3, [pc, #240]	; (800d31c <UART_SetConfig+0x634>)
 800d22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d22c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d230:	2b28      	cmp	r3, #40	; 0x28
 800d232:	d86d      	bhi.n	800d310 <UART_SetConfig+0x628>
 800d234:	a201      	add	r2, pc, #4	; (adr r2, 800d23c <UART_SetConfig+0x554>)
 800d236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23a:	bf00      	nop
 800d23c:	0800d2e1 	.word	0x0800d2e1
 800d240:	0800d311 	.word	0x0800d311
 800d244:	0800d311 	.word	0x0800d311
 800d248:	0800d311 	.word	0x0800d311
 800d24c:	0800d311 	.word	0x0800d311
 800d250:	0800d311 	.word	0x0800d311
 800d254:	0800d311 	.word	0x0800d311
 800d258:	0800d311 	.word	0x0800d311
 800d25c:	0800d2e9 	.word	0x0800d2e9
 800d260:	0800d311 	.word	0x0800d311
 800d264:	0800d311 	.word	0x0800d311
 800d268:	0800d311 	.word	0x0800d311
 800d26c:	0800d311 	.word	0x0800d311
 800d270:	0800d311 	.word	0x0800d311
 800d274:	0800d311 	.word	0x0800d311
 800d278:	0800d311 	.word	0x0800d311
 800d27c:	0800d2f1 	.word	0x0800d2f1
 800d280:	0800d311 	.word	0x0800d311
 800d284:	0800d311 	.word	0x0800d311
 800d288:	0800d311 	.word	0x0800d311
 800d28c:	0800d311 	.word	0x0800d311
 800d290:	0800d311 	.word	0x0800d311
 800d294:	0800d311 	.word	0x0800d311
 800d298:	0800d311 	.word	0x0800d311
 800d29c:	0800d2f9 	.word	0x0800d2f9
 800d2a0:	0800d311 	.word	0x0800d311
 800d2a4:	0800d311 	.word	0x0800d311
 800d2a8:	0800d311 	.word	0x0800d311
 800d2ac:	0800d311 	.word	0x0800d311
 800d2b0:	0800d311 	.word	0x0800d311
 800d2b4:	0800d311 	.word	0x0800d311
 800d2b8:	0800d311 	.word	0x0800d311
 800d2bc:	0800d301 	.word	0x0800d301
 800d2c0:	0800d311 	.word	0x0800d311
 800d2c4:	0800d311 	.word	0x0800d311
 800d2c8:	0800d311 	.word	0x0800d311
 800d2cc:	0800d311 	.word	0x0800d311
 800d2d0:	0800d311 	.word	0x0800d311
 800d2d4:	0800d311 	.word	0x0800d311
 800d2d8:	0800d311 	.word	0x0800d311
 800d2dc:	0800d309 	.word	0x0800d309
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e6:	e0d6      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d2e8:	2304      	movs	r3, #4
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ee:	e0d2      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d2f0:	2308      	movs	r3, #8
 800d2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f6:	e0ce      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d2f8:	2310      	movs	r3, #16
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fe:	e0ca      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d300:	2320      	movs	r3, #32
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d306:	e0c6      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d308:	2340      	movs	r3, #64	; 0x40
 800d30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30e:	e0c2      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d310:	2380      	movs	r3, #128	; 0x80
 800d312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d316:	e0be      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d318:	40011400 	.word	0x40011400
 800d31c:	58024400 	.word	0x58024400
 800d320:	40007800 	.word	0x40007800
 800d324:	40007c00 	.word	0x40007c00
 800d328:	40011800 	.word	0x40011800
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4aad      	ldr	r2, [pc, #692]	; (800d5e8 <UART_SetConfig+0x900>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d176      	bne.n	800d424 <UART_SetConfig+0x73c>
 800d336:	4bad      	ldr	r3, [pc, #692]	; (800d5ec <UART_SetConfig+0x904>)
 800d338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d33a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d33e:	2b28      	cmp	r3, #40	; 0x28
 800d340:	d86c      	bhi.n	800d41c <UART_SetConfig+0x734>
 800d342:	a201      	add	r2, pc, #4	; (adr r2, 800d348 <UART_SetConfig+0x660>)
 800d344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d348:	0800d3ed 	.word	0x0800d3ed
 800d34c:	0800d41d 	.word	0x0800d41d
 800d350:	0800d41d 	.word	0x0800d41d
 800d354:	0800d41d 	.word	0x0800d41d
 800d358:	0800d41d 	.word	0x0800d41d
 800d35c:	0800d41d 	.word	0x0800d41d
 800d360:	0800d41d 	.word	0x0800d41d
 800d364:	0800d41d 	.word	0x0800d41d
 800d368:	0800d3f5 	.word	0x0800d3f5
 800d36c:	0800d41d 	.word	0x0800d41d
 800d370:	0800d41d 	.word	0x0800d41d
 800d374:	0800d41d 	.word	0x0800d41d
 800d378:	0800d41d 	.word	0x0800d41d
 800d37c:	0800d41d 	.word	0x0800d41d
 800d380:	0800d41d 	.word	0x0800d41d
 800d384:	0800d41d 	.word	0x0800d41d
 800d388:	0800d3fd 	.word	0x0800d3fd
 800d38c:	0800d41d 	.word	0x0800d41d
 800d390:	0800d41d 	.word	0x0800d41d
 800d394:	0800d41d 	.word	0x0800d41d
 800d398:	0800d41d 	.word	0x0800d41d
 800d39c:	0800d41d 	.word	0x0800d41d
 800d3a0:	0800d41d 	.word	0x0800d41d
 800d3a4:	0800d41d 	.word	0x0800d41d
 800d3a8:	0800d405 	.word	0x0800d405
 800d3ac:	0800d41d 	.word	0x0800d41d
 800d3b0:	0800d41d 	.word	0x0800d41d
 800d3b4:	0800d41d 	.word	0x0800d41d
 800d3b8:	0800d41d 	.word	0x0800d41d
 800d3bc:	0800d41d 	.word	0x0800d41d
 800d3c0:	0800d41d 	.word	0x0800d41d
 800d3c4:	0800d41d 	.word	0x0800d41d
 800d3c8:	0800d40d 	.word	0x0800d40d
 800d3cc:	0800d41d 	.word	0x0800d41d
 800d3d0:	0800d41d 	.word	0x0800d41d
 800d3d4:	0800d41d 	.word	0x0800d41d
 800d3d8:	0800d41d 	.word	0x0800d41d
 800d3dc:	0800d41d 	.word	0x0800d41d
 800d3e0:	0800d41d 	.word	0x0800d41d
 800d3e4:	0800d41d 	.word	0x0800d41d
 800d3e8:	0800d415 	.word	0x0800d415
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f2:	e050      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d3f4:	2304      	movs	r3, #4
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e04c      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d3fc:	2308      	movs	r3, #8
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e048      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d404:	2310      	movs	r3, #16
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e044      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d40c:	2320      	movs	r3, #32
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e040      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d414:	2340      	movs	r3, #64	; 0x40
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41a:	e03c      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d41c:	2380      	movs	r3, #128	; 0x80
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d422:	e038      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a71      	ldr	r2, [pc, #452]	; (800d5f0 <UART_SetConfig+0x908>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d130      	bne.n	800d490 <UART_SetConfig+0x7a8>
 800d42e:	4b6f      	ldr	r3, [pc, #444]	; (800d5ec <UART_SetConfig+0x904>)
 800d430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d432:	f003 0307 	and.w	r3, r3, #7
 800d436:	2b05      	cmp	r3, #5
 800d438:	d826      	bhi.n	800d488 <UART_SetConfig+0x7a0>
 800d43a:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <UART_SetConfig+0x758>)
 800d43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d440:	0800d459 	.word	0x0800d459
 800d444:	0800d461 	.word	0x0800d461
 800d448:	0800d469 	.word	0x0800d469
 800d44c:	0800d471 	.word	0x0800d471
 800d450:	0800d479 	.word	0x0800d479
 800d454:	0800d481 	.word	0x0800d481
 800d458:	2302      	movs	r3, #2
 800d45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45e:	e01a      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d460:	2304      	movs	r3, #4
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e016      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d468:	2308      	movs	r3, #8
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46e:	e012      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d470:	2310      	movs	r3, #16
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e00e      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d478:	2320      	movs	r3, #32
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47e:	e00a      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d480:	2340      	movs	r3, #64	; 0x40
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d486:	e006      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d488:	2380      	movs	r3, #128	; 0x80
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d48e:	e002      	b.n	800d496 <UART_SetConfig+0x7ae>
 800d490:	2380      	movs	r3, #128	; 0x80
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a55      	ldr	r2, [pc, #340]	; (800d5f0 <UART_SetConfig+0x908>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	f040 80f8 	bne.w	800d692 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	dc46      	bgt.n	800d538 <UART_SetConfig+0x850>
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	db75      	blt.n	800d59a <UART_SetConfig+0x8b2>
 800d4ae:	3b02      	subs	r3, #2
 800d4b0:	2b1e      	cmp	r3, #30
 800d4b2:	d872      	bhi.n	800d59a <UART_SetConfig+0x8b2>
 800d4b4:	a201      	add	r2, pc, #4	; (adr r2, 800d4bc <UART_SetConfig+0x7d4>)
 800d4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ba:	bf00      	nop
 800d4bc:	0800d53f 	.word	0x0800d53f
 800d4c0:	0800d59b 	.word	0x0800d59b
 800d4c4:	0800d547 	.word	0x0800d547
 800d4c8:	0800d59b 	.word	0x0800d59b
 800d4cc:	0800d59b 	.word	0x0800d59b
 800d4d0:	0800d59b 	.word	0x0800d59b
 800d4d4:	0800d557 	.word	0x0800d557
 800d4d8:	0800d59b 	.word	0x0800d59b
 800d4dc:	0800d59b 	.word	0x0800d59b
 800d4e0:	0800d59b 	.word	0x0800d59b
 800d4e4:	0800d59b 	.word	0x0800d59b
 800d4e8:	0800d59b 	.word	0x0800d59b
 800d4ec:	0800d59b 	.word	0x0800d59b
 800d4f0:	0800d59b 	.word	0x0800d59b
 800d4f4:	0800d567 	.word	0x0800d567
 800d4f8:	0800d59b 	.word	0x0800d59b
 800d4fc:	0800d59b 	.word	0x0800d59b
 800d500:	0800d59b 	.word	0x0800d59b
 800d504:	0800d59b 	.word	0x0800d59b
 800d508:	0800d59b 	.word	0x0800d59b
 800d50c:	0800d59b 	.word	0x0800d59b
 800d510:	0800d59b 	.word	0x0800d59b
 800d514:	0800d59b 	.word	0x0800d59b
 800d518:	0800d59b 	.word	0x0800d59b
 800d51c:	0800d59b 	.word	0x0800d59b
 800d520:	0800d59b 	.word	0x0800d59b
 800d524:	0800d59b 	.word	0x0800d59b
 800d528:	0800d59b 	.word	0x0800d59b
 800d52c:	0800d59b 	.word	0x0800d59b
 800d530:	0800d59b 	.word	0x0800d59b
 800d534:	0800d58d 	.word	0x0800d58d
 800d538:	2b40      	cmp	r3, #64	; 0x40
 800d53a:	d02a      	beq.n	800d592 <UART_SetConfig+0x8aa>
 800d53c:	e02d      	b.n	800d59a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d53e:	f7fc fe0b 	bl	800a158 <HAL_RCCEx_GetD3PCLK1Freq>
 800d542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d544:	e02f      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fc fe1a 	bl	800a184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d554:	e027      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d556:	f107 0318 	add.w	r3, r7, #24
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fc ff66 	bl	800a42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d564:	e01f      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d566:	4b21      	ldr	r3, [pc, #132]	; (800d5ec <UART_SetConfig+0x904>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0320 	and.w	r3, r3, #32
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d572:	4b1e      	ldr	r3, [pc, #120]	; (800d5ec <UART_SetConfig+0x904>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	08db      	lsrs	r3, r3, #3
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	4a1d      	ldr	r2, [pc, #116]	; (800d5f4 <UART_SetConfig+0x90c>)
 800d57e:	fa22 f303 	lsr.w	r3, r2, r3
 800d582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d584:	e00f      	b.n	800d5a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d586:	4b1b      	ldr	r3, [pc, #108]	; (800d5f4 <UART_SetConfig+0x90c>)
 800d588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d58a:	e00c      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d58c:	4b1a      	ldr	r3, [pc, #104]	; (800d5f8 <UART_SetConfig+0x910>)
 800d58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d590:	e009      	b.n	800d5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d598:	e005      	b.n	800d5a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 81ee 	beq.w	800d98a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	4a12      	ldr	r2, [pc, #72]	; (800d5fc <UART_SetConfig+0x914>)
 800d5b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	685a      	ldr	r2, [r3, #4]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	005b      	lsls	r3, r3, #1
 800d5ca:	4413      	add	r3, r2
 800d5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d305      	bcc.n	800d5de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d910      	bls.n	800d600 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d5e4:	e1d1      	b.n	800d98a <UART_SetConfig+0xca2>
 800d5e6:	bf00      	nop
 800d5e8:	40011c00 	.word	0x40011c00
 800d5ec:	58024400 	.word	0x58024400
 800d5f0:	58000c00 	.word	0x58000c00
 800d5f4:	03d09000 	.word	0x03d09000
 800d5f8:	003d0900 	.word	0x003d0900
 800d5fc:	0800ebbc 	.word	0x0800ebbc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d602:	2200      	movs	r2, #0
 800d604:	60bb      	str	r3, [r7, #8]
 800d606:	60fa      	str	r2, [r7, #12]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60c:	4ac0      	ldr	r2, [pc, #768]	; (800d910 <UART_SetConfig+0xc28>)
 800d60e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d612:	b29b      	uxth	r3, r3
 800d614:	2200      	movs	r2, #0
 800d616:	603b      	str	r3, [r7, #0]
 800d618:	607a      	str	r2, [r7, #4]
 800d61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d61e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d622:	f7f2 fe7d 	bl	8000320 <__aeabi_uldivmod>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4610      	mov	r0, r2
 800d62c:	4619      	mov	r1, r3
 800d62e:	f04f 0200 	mov.w	r2, #0
 800d632:	f04f 0300 	mov.w	r3, #0
 800d636:	020b      	lsls	r3, r1, #8
 800d638:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d63c:	0202      	lsls	r2, r0, #8
 800d63e:	6979      	ldr	r1, [r7, #20]
 800d640:	6849      	ldr	r1, [r1, #4]
 800d642:	0849      	lsrs	r1, r1, #1
 800d644:	2000      	movs	r0, #0
 800d646:	460c      	mov	r4, r1
 800d648:	4605      	mov	r5, r0
 800d64a:	eb12 0804 	adds.w	r8, r2, r4
 800d64e:	eb43 0905 	adc.w	r9, r3, r5
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	469a      	mov	sl, r3
 800d65a:	4693      	mov	fp, r2
 800d65c:	4652      	mov	r2, sl
 800d65e:	465b      	mov	r3, fp
 800d660:	4640      	mov	r0, r8
 800d662:	4649      	mov	r1, r9
 800d664:	f7f2 fe5c 	bl	8000320 <__aeabi_uldivmod>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	4613      	mov	r3, r2
 800d66e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d676:	d308      	bcc.n	800d68a <UART_SetConfig+0x9a2>
 800d678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d67e:	d204      	bcs.n	800d68a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d686:	60da      	str	r2, [r3, #12]
 800d688:	e17f      	b.n	800d98a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d690:	e17b      	b.n	800d98a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d69a:	f040 80bd 	bne.w	800d818 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d69e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d6a2:	2b20      	cmp	r3, #32
 800d6a4:	dc48      	bgt.n	800d738 <UART_SetConfig+0xa50>
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	db7b      	blt.n	800d7a2 <UART_SetConfig+0xaba>
 800d6aa:	2b20      	cmp	r3, #32
 800d6ac:	d879      	bhi.n	800d7a2 <UART_SetConfig+0xaba>
 800d6ae:	a201      	add	r2, pc, #4	; (adr r2, 800d6b4 <UART_SetConfig+0x9cc>)
 800d6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b4:	0800d73f 	.word	0x0800d73f
 800d6b8:	0800d747 	.word	0x0800d747
 800d6bc:	0800d7a3 	.word	0x0800d7a3
 800d6c0:	0800d7a3 	.word	0x0800d7a3
 800d6c4:	0800d74f 	.word	0x0800d74f
 800d6c8:	0800d7a3 	.word	0x0800d7a3
 800d6cc:	0800d7a3 	.word	0x0800d7a3
 800d6d0:	0800d7a3 	.word	0x0800d7a3
 800d6d4:	0800d75f 	.word	0x0800d75f
 800d6d8:	0800d7a3 	.word	0x0800d7a3
 800d6dc:	0800d7a3 	.word	0x0800d7a3
 800d6e0:	0800d7a3 	.word	0x0800d7a3
 800d6e4:	0800d7a3 	.word	0x0800d7a3
 800d6e8:	0800d7a3 	.word	0x0800d7a3
 800d6ec:	0800d7a3 	.word	0x0800d7a3
 800d6f0:	0800d7a3 	.word	0x0800d7a3
 800d6f4:	0800d76f 	.word	0x0800d76f
 800d6f8:	0800d7a3 	.word	0x0800d7a3
 800d6fc:	0800d7a3 	.word	0x0800d7a3
 800d700:	0800d7a3 	.word	0x0800d7a3
 800d704:	0800d7a3 	.word	0x0800d7a3
 800d708:	0800d7a3 	.word	0x0800d7a3
 800d70c:	0800d7a3 	.word	0x0800d7a3
 800d710:	0800d7a3 	.word	0x0800d7a3
 800d714:	0800d7a3 	.word	0x0800d7a3
 800d718:	0800d7a3 	.word	0x0800d7a3
 800d71c:	0800d7a3 	.word	0x0800d7a3
 800d720:	0800d7a3 	.word	0x0800d7a3
 800d724:	0800d7a3 	.word	0x0800d7a3
 800d728:	0800d7a3 	.word	0x0800d7a3
 800d72c:	0800d7a3 	.word	0x0800d7a3
 800d730:	0800d7a3 	.word	0x0800d7a3
 800d734:	0800d795 	.word	0x0800d795
 800d738:	2b40      	cmp	r3, #64	; 0x40
 800d73a:	d02e      	beq.n	800d79a <UART_SetConfig+0xab2>
 800d73c:	e031      	b.n	800d7a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d73e:	f7fb fde5 	bl	800930c <HAL_RCC_GetPCLK1Freq>
 800d742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d744:	e033      	b.n	800d7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d746:	f7fb fdf7 	bl	8009338 <HAL_RCC_GetPCLK2Freq>
 800d74a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d74c:	e02f      	b.n	800d7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d74e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d752:	4618      	mov	r0, r3
 800d754:	f7fc fd16 	bl	800a184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d75c:	e027      	b.n	800d7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d75e:	f107 0318 	add.w	r3, r7, #24
 800d762:	4618      	mov	r0, r3
 800d764:	f7fc fe62 	bl	800a42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d76c:	e01f      	b.n	800d7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d76e:	4b69      	ldr	r3, [pc, #420]	; (800d914 <UART_SetConfig+0xc2c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 0320 	and.w	r3, r3, #32
 800d776:	2b00      	cmp	r3, #0
 800d778:	d009      	beq.n	800d78e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d77a:	4b66      	ldr	r3, [pc, #408]	; (800d914 <UART_SetConfig+0xc2c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	08db      	lsrs	r3, r3, #3
 800d780:	f003 0303 	and.w	r3, r3, #3
 800d784:	4a64      	ldr	r2, [pc, #400]	; (800d918 <UART_SetConfig+0xc30>)
 800d786:	fa22 f303 	lsr.w	r3, r2, r3
 800d78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d78c:	e00f      	b.n	800d7ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d78e:	4b62      	ldr	r3, [pc, #392]	; (800d918 <UART_SetConfig+0xc30>)
 800d790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d792:	e00c      	b.n	800d7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d794:	4b61      	ldr	r3, [pc, #388]	; (800d91c <UART_SetConfig+0xc34>)
 800d796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d798:	e009      	b.n	800d7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d79a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a0:	e005      	b.n	800d7ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d7ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f000 80ea 	beq.w	800d98a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ba:	4a55      	ldr	r2, [pc, #340]	; (800d910 <UART_SetConfig+0xc28>)
 800d7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7c8:	005a      	lsls	r2, r3, #1
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	085b      	lsrs	r3, r3, #1
 800d7d0:	441a      	add	r2, r3
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7de:	2b0f      	cmp	r3, #15
 800d7e0:	d916      	bls.n	800d810 <UART_SetConfig+0xb28>
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7e8:	d212      	bcs.n	800d810 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	f023 030f 	bic.w	r3, r3, #15
 800d7f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	085b      	lsrs	r3, r3, #1
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	f003 0307 	and.w	r3, r3, #7
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d802:	4313      	orrs	r3, r2
 800d804:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d80c:	60da      	str	r2, [r3, #12]
 800d80e:	e0bc      	b.n	800d98a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d810:	2301      	movs	r3, #1
 800d812:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d816:	e0b8      	b.n	800d98a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d818:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d81c:	2b20      	cmp	r3, #32
 800d81e:	dc4b      	bgt.n	800d8b8 <UART_SetConfig+0xbd0>
 800d820:	2b00      	cmp	r3, #0
 800d822:	f2c0 8087 	blt.w	800d934 <UART_SetConfig+0xc4c>
 800d826:	2b20      	cmp	r3, #32
 800d828:	f200 8084 	bhi.w	800d934 <UART_SetConfig+0xc4c>
 800d82c:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <UART_SetConfig+0xb4c>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d8bf 	.word	0x0800d8bf
 800d838:	0800d8c7 	.word	0x0800d8c7
 800d83c:	0800d935 	.word	0x0800d935
 800d840:	0800d935 	.word	0x0800d935
 800d844:	0800d8cf 	.word	0x0800d8cf
 800d848:	0800d935 	.word	0x0800d935
 800d84c:	0800d935 	.word	0x0800d935
 800d850:	0800d935 	.word	0x0800d935
 800d854:	0800d8df 	.word	0x0800d8df
 800d858:	0800d935 	.word	0x0800d935
 800d85c:	0800d935 	.word	0x0800d935
 800d860:	0800d935 	.word	0x0800d935
 800d864:	0800d935 	.word	0x0800d935
 800d868:	0800d935 	.word	0x0800d935
 800d86c:	0800d935 	.word	0x0800d935
 800d870:	0800d935 	.word	0x0800d935
 800d874:	0800d8ef 	.word	0x0800d8ef
 800d878:	0800d935 	.word	0x0800d935
 800d87c:	0800d935 	.word	0x0800d935
 800d880:	0800d935 	.word	0x0800d935
 800d884:	0800d935 	.word	0x0800d935
 800d888:	0800d935 	.word	0x0800d935
 800d88c:	0800d935 	.word	0x0800d935
 800d890:	0800d935 	.word	0x0800d935
 800d894:	0800d935 	.word	0x0800d935
 800d898:	0800d935 	.word	0x0800d935
 800d89c:	0800d935 	.word	0x0800d935
 800d8a0:	0800d935 	.word	0x0800d935
 800d8a4:	0800d935 	.word	0x0800d935
 800d8a8:	0800d935 	.word	0x0800d935
 800d8ac:	0800d935 	.word	0x0800d935
 800d8b0:	0800d935 	.word	0x0800d935
 800d8b4:	0800d927 	.word	0x0800d927
 800d8b8:	2b40      	cmp	r3, #64	; 0x40
 800d8ba:	d037      	beq.n	800d92c <UART_SetConfig+0xc44>
 800d8bc:	e03a      	b.n	800d934 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8be:	f7fb fd25 	bl	800930c <HAL_RCC_GetPCLK1Freq>
 800d8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8c4:	e03c      	b.n	800d940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8c6:	f7fb fd37 	bl	8009338 <HAL_RCC_GetPCLK2Freq>
 800d8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8cc:	e038      	b.n	800d940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fc fc56 	bl	800a184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8dc:	e030      	b.n	800d940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8de:	f107 0318 	add.w	r3, r7, #24
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fc fda2 	bl	800a42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8ec:	e028      	b.n	800d940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8ee:	4b09      	ldr	r3, [pc, #36]	; (800d914 <UART_SetConfig+0xc2c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 0320 	and.w	r3, r3, #32
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d012      	beq.n	800d920 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8fa:	4b06      	ldr	r3, [pc, #24]	; (800d914 <UART_SetConfig+0xc2c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	08db      	lsrs	r3, r3, #3
 800d900:	f003 0303 	and.w	r3, r3, #3
 800d904:	4a04      	ldr	r2, [pc, #16]	; (800d918 <UART_SetConfig+0xc30>)
 800d906:	fa22 f303 	lsr.w	r3, r2, r3
 800d90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d90c:	e018      	b.n	800d940 <UART_SetConfig+0xc58>
 800d90e:	bf00      	nop
 800d910:	0800ebbc 	.word	0x0800ebbc
 800d914:	58024400 	.word	0x58024400
 800d918:	03d09000 	.word	0x03d09000
 800d91c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d920:	4b24      	ldr	r3, [pc, #144]	; (800d9b4 <UART_SetConfig+0xccc>)
 800d922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d924:	e00c      	b.n	800d940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d926:	4b24      	ldr	r3, [pc, #144]	; (800d9b8 <UART_SetConfig+0xcd0>)
 800d928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d92a:	e009      	b.n	800d940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d92c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d932:	e005      	b.n	800d940 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d934:	2300      	movs	r3, #0
 800d936:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d938:	2301      	movs	r3, #1
 800d93a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d93e:	bf00      	nop
    }

    if (pclk != 0U)
 800d940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d942:	2b00      	cmp	r3, #0
 800d944:	d021      	beq.n	800d98a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94a:	4a1c      	ldr	r2, [pc, #112]	; (800d9bc <UART_SetConfig+0xcd4>)
 800d94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d950:	461a      	mov	r2, r3
 800d952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d954:	fbb3 f2f2 	udiv	r2, r3, r2
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	085b      	lsrs	r3, r3, #1
 800d95e:	441a      	add	r2, r3
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	fbb2 f3f3 	udiv	r3, r2, r3
 800d968:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96c:	2b0f      	cmp	r3, #15
 800d96e:	d909      	bls.n	800d984 <UART_SetConfig+0xc9c>
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d976:	d205      	bcs.n	800d984 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	60da      	str	r2, [r3, #12]
 800d982:	e002      	b.n	800d98a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	2201      	movs	r2, #1
 800d98e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2201      	movs	r2, #1
 800d996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	2200      	movs	r2, #0
 800d99e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d9a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3748      	adds	r7, #72	; 0x48
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9b4:	03d09000 	.word	0x03d09000
 800d9b8:	003d0900 	.word	0x003d0900
 800d9bc:	0800ebbc 	.word	0x0800ebbc

0800d9c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00a      	beq.n	800d9ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	430a      	orrs	r2, r1
 800d9e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ee:	f003 0302 	and.w	r3, r3, #2
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00a      	beq.n	800da0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	430a      	orrs	r2, r1
 800da0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da10:	f003 0304 	and.w	r3, r3, #4
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00a      	beq.n	800da2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	430a      	orrs	r2, r1
 800da2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da32:	f003 0308 	and.w	r3, r3, #8
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00a      	beq.n	800da50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	430a      	orrs	r2, r1
 800da4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da54:	f003 0310 	and.w	r3, r3, #16
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00a      	beq.n	800da72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	430a      	orrs	r2, r1
 800da70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da76:	f003 0320 	and.w	r3, r3, #32
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00a      	beq.n	800da94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	430a      	orrs	r2, r1
 800da92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d01a      	beq.n	800dad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	430a      	orrs	r2, r1
 800dab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dabe:	d10a      	bne.n	800dad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	430a      	orrs	r2, r1
 800dad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00a      	beq.n	800daf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	430a      	orrs	r2, r1
 800daf6:	605a      	str	r2, [r3, #4]
  }
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af02      	add	r7, sp, #8
 800db0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db14:	f7f7 f88c 	bl	8004c30 <HAL_GetTick>
 800db18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 0308 	and.w	r3, r3, #8
 800db24:	2b08      	cmp	r3, #8
 800db26:	d10e      	bne.n	800db46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 f82f 	bl	800db9a <UART_WaitOnFlagUntilTimeout>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db42:	2303      	movs	r3, #3
 800db44:	e025      	b.n	800db92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f003 0304 	and.w	r3, r3, #4
 800db50:	2b04      	cmp	r3, #4
 800db52:	d10e      	bne.n	800db72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f819 	bl	800db9a <UART_WaitOnFlagUntilTimeout>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	e00f      	b.n	800db92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2220      	movs	r2, #32
 800db76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2220      	movs	r2, #32
 800db7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b09c      	sub	sp, #112	; 0x70
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	603b      	str	r3, [r7, #0]
 800dba6:	4613      	mov	r3, r2
 800dba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbaa:	e0a9      	b.n	800dd00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb2:	f000 80a5 	beq.w	800dd00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbb6:	f7f7 f83b 	bl	8004c30 <HAL_GetTick>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d302      	bcc.n	800dbcc <UART_WaitOnFlagUntilTimeout+0x32>
 800dbc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d140      	bne.n	800dc4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd4:	e853 3f00 	ldrex	r3, [r3]
 800dbd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbe0:	667b      	str	r3, [r7, #100]	; 0x64
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbf2:	e841 2300 	strex	r3, r2, [r1]
 800dbf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dbf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1e6      	bne.n	800dbcc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	3308      	adds	r3, #8
 800dc04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc08:	e853 3f00 	ldrex	r3, [r3]
 800dc0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc10:	f023 0301 	bic.w	r3, r3, #1
 800dc14:	663b      	str	r3, [r7, #96]	; 0x60
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc1e:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc26:	e841 2300 	strex	r3, r2, [r1]
 800dc2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d1e5      	bne.n	800dbfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2220      	movs	r2, #32
 800dc36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2220      	movs	r2, #32
 800dc3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e069      	b.n	800dd22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f003 0304 	and.w	r3, r3, #4
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d051      	beq.n	800dd00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	69db      	ldr	r3, [r3, #28]
 800dc62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc6a:	d149      	bne.n	800dd00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	e853 3f00 	ldrex	r3, [r3]
 800dc82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	461a      	mov	r2, r3
 800dc92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc94:	637b      	str	r3, [r7, #52]	; 0x34
 800dc96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc9c:	e841 2300 	strex	r3, r2, [r1]
 800dca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1e6      	bne.n	800dc76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3308      	adds	r3, #8
 800dcae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	e853 3f00 	ldrex	r3, [r3]
 800dcb6:	613b      	str	r3, [r7, #16]
   return(result);
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	f023 0301 	bic.w	r3, r3, #1
 800dcbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3308      	adds	r3, #8
 800dcc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dcc8:	623a      	str	r2, [r7, #32]
 800dcca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dccc:	69f9      	ldr	r1, [r7, #28]
 800dcce:	6a3a      	ldr	r2, [r7, #32]
 800dcd0:	e841 2300 	strex	r3, r2, [r1]
 800dcd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e5      	bne.n	800dca8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2220      	movs	r2, #32
 800dce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2220      	movs	r2, #32
 800dce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2220      	movs	r2, #32
 800dcf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dcfc:	2303      	movs	r3, #3
 800dcfe:	e010      	b.n	800dd22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	69da      	ldr	r2, [r3, #28]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	4013      	ands	r3, r2
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	bf0c      	ite	eq
 800dd10:	2301      	moveq	r3, #1
 800dd12:	2300      	movne	r3, #0
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	461a      	mov	r2, r3
 800dd18:	79fb      	ldrb	r3, [r7, #7]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	f43f af46 	beq.w	800dbac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3770      	adds	r7, #112	; 0x70
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
	...

0800dd2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b096      	sub	sp, #88	; 0x58
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	4613      	mov	r3, r2
 800dd38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	88fa      	ldrh	r2, [r7, #6]
 800dd44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2222      	movs	r2, #34	; 0x22
 800dd54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d02c      	beq.n	800ddba <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd64:	4a42      	ldr	r2, [pc, #264]	; (800de70 <UART_Start_Receive_DMA+0x144>)
 800dd66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd6c:	4a41      	ldr	r2, [pc, #260]	; (800de74 <UART_Start_Receive_DMA+0x148>)
 800dd6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd74:	4a40      	ldr	r2, [pc, #256]	; (800de78 <UART_Start_Receive_DMA+0x14c>)
 800dd76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	3324      	adds	r3, #36	; 0x24
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd90:	461a      	mov	r2, r3
 800dd92:	88fb      	ldrh	r3, [r7, #6]
 800dd94:	f7f7 fdaa 	bl	80058ec <HAL_DMA_Start_IT>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00d      	beq.n	800ddba <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2210      	movs	r2, #16
 800dda2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2220      	movs	r2, #32
 800ddb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e055      	b.n	800de66 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d018      	beq.n	800ddfc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd2:	e853 3f00 	ldrex	r3, [r3]
 800ddd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddde:	657b      	str	r3, [r7, #84]	; 0x54
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	461a      	mov	r2, r3
 800dde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dde8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddf0:	e841 2300 	strex	r3, r2, [r1]
 800ddf4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ddf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1e6      	bne.n	800ddca <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	3308      	adds	r3, #8
 800de02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	e853 3f00 	ldrex	r3, [r3]
 800de0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	f043 0301 	orr.w	r3, r3, #1
 800de12:	653b      	str	r3, [r7, #80]	; 0x50
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3308      	adds	r3, #8
 800de1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de1c:	637a      	str	r2, [r7, #52]	; 0x34
 800de1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de24:	e841 2300 	strex	r3, r2, [r1]
 800de28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1e5      	bne.n	800ddfc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3308      	adds	r3, #8
 800de36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	e853 3f00 	ldrex	r3, [r3]
 800de3e:	613b      	str	r3, [r7, #16]
   return(result);
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3308      	adds	r3, #8
 800de4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de50:	623a      	str	r2, [r7, #32]
 800de52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de54:	69f9      	ldr	r1, [r7, #28]
 800de56:	6a3a      	ldr	r2, [r7, #32]
 800de58:	e841 2300 	strex	r3, r2, [r1]
 800de5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1e5      	bne.n	800de30 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3758      	adds	r7, #88	; 0x58
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	0800e07f 	.word	0x0800e07f
 800de74:	0800e1a1 	.word	0x0800e1a1
 800de78:	0800e1d9 	.word	0x0800e1d9

0800de7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b08f      	sub	sp, #60	; 0x3c
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8a:	6a3b      	ldr	r3, [r7, #32]
 800de8c:	e853 3f00 	ldrex	r3, [r3]
 800de90:	61fb      	str	r3, [r7, #28]
   return(result);
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800de98:	637b      	str	r3, [r7, #52]	; 0x34
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	461a      	mov	r2, r3
 800dea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dea4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deaa:	e841 2300 	strex	r3, r2, [r1]
 800deae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1e6      	bne.n	800de84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3308      	adds	r3, #8
 800debc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	e853 3f00 	ldrex	r3, [r3]
 800dec4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800decc:	633b      	str	r3, [r7, #48]	; 0x30
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	3308      	adds	r3, #8
 800ded4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded6:	61ba      	str	r2, [r7, #24]
 800ded8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deda:	6979      	ldr	r1, [r7, #20]
 800dedc:	69ba      	ldr	r2, [r7, #24]
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	613b      	str	r3, [r7, #16]
   return(result);
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1e5      	bne.n	800deb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2220      	movs	r2, #32
 800deee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800def2:	bf00      	nop
 800def4:	373c      	adds	r7, #60	; 0x3c
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
	...

0800df00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df00:	b480      	push	{r7}
 800df02:	b095      	sub	sp, #84	; 0x54
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df10:	e853 3f00 	ldrex	r3, [r3]
 800df14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df26:	643b      	str	r3, [r7, #64]	; 0x40
 800df28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df2e:	e841 2300 	strex	r3, r2, [r1]
 800df32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1e6      	bne.n	800df08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	3308      	adds	r3, #8
 800df40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df42:	6a3b      	ldr	r3, [r7, #32]
 800df44:	e853 3f00 	ldrex	r3, [r3]
 800df48:	61fb      	str	r3, [r7, #28]
   return(result);
 800df4a:	69fa      	ldr	r2, [r7, #28]
 800df4c:	4b1e      	ldr	r3, [pc, #120]	; (800dfc8 <UART_EndRxTransfer+0xc8>)
 800df4e:	4013      	ands	r3, r2
 800df50:	64bb      	str	r3, [r7, #72]	; 0x48
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3308      	adds	r3, #8
 800df58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df62:	e841 2300 	strex	r3, r2, [r1]
 800df66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1e5      	bne.n	800df3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df72:	2b01      	cmp	r3, #1
 800df74:	d118      	bne.n	800dfa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	e853 3f00 	ldrex	r3, [r3]
 800df82:	60bb      	str	r3, [r7, #8]
   return(result);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f023 0310 	bic.w	r3, r3, #16
 800df8a:	647b      	str	r3, [r7, #68]	; 0x44
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	461a      	mov	r2, r3
 800df92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df94:	61bb      	str	r3, [r7, #24]
 800df96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df98:	6979      	ldr	r1, [r7, #20]
 800df9a:	69ba      	ldr	r2, [r7, #24]
 800df9c:	e841 2300 	strex	r3, r2, [r1]
 800dfa0:	613b      	str	r3, [r7, #16]
   return(result);
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1e6      	bne.n	800df76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2220      	movs	r2, #32
 800dfac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800dfbc:	bf00      	nop
 800dfbe:	3754      	adds	r7, #84	; 0x54
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	effffffe 	.word	0xeffffffe

0800dfcc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b090      	sub	sp, #64	; 0x40
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfe2:	d037      	beq.n	800e054 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800dfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3308      	adds	r3, #8
 800dff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	e853 3f00 	ldrex	r3, [r3]
 800dffa:	623b      	str	r3, [r7, #32]
   return(result);
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e002:	63bb      	str	r3, [r7, #56]	; 0x38
 800e004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3308      	adds	r3, #8
 800e00a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e00c:	633a      	str	r2, [r7, #48]	; 0x30
 800e00e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e014:	e841 2300 	strex	r3, r2, [r1]
 800e018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1e5      	bne.n	800dfec <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	e853 3f00 	ldrex	r3, [r3]
 800e02c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e034:	637b      	str	r3, [r7, #52]	; 0x34
 800e036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	461a      	mov	r2, r3
 800e03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03e:	61fb      	str	r3, [r7, #28]
 800e040:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e042:	69b9      	ldr	r1, [r7, #24]
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	e841 2300 	strex	r3, r2, [r1]
 800e04a:	617b      	str	r3, [r7, #20]
   return(result);
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1e6      	bne.n	800e020 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e052:	e002      	b.n	800e05a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e054:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e056:	f7f5 f879 	bl	800314c <HAL_UART_TxCpltCallback>
}
 800e05a:	bf00      	nop
 800e05c:	3740      	adds	r7, #64	; 0x40
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b084      	sub	sp, #16
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f7fe fe19 	bl	800cca8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e076:	bf00      	nop
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b09c      	sub	sp, #112	; 0x70
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	69db      	ldr	r3, [r3, #28]
 800e090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e094:	d071      	beq.n	800e17a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e098:	2200      	movs	r2, #0
 800e09a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0a6:	e853 3f00 	ldrex	r3, [r3]
 800e0aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0c4:	e841 2300 	strex	r3, r2, [r1]
 800e0c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1e6      	bne.n	800e09e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3308      	adds	r3, #8
 800e0d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	e853 3f00 	ldrex	r3, [r3]
 800e0de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e2:	f023 0301 	bic.w	r3, r3, #1
 800e0e6:	667b      	str	r3, [r7, #100]	; 0x64
 800e0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	3308      	adds	r3, #8
 800e0ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e0f0:	647a      	str	r2, [r7, #68]	; 0x44
 800e0f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0f8:	e841 2300 	strex	r3, r2, [r1]
 800e0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1e5      	bne.n	800e0d0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	3308      	adds	r3, #8
 800e10a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	e853 3f00 	ldrex	r3, [r3]
 800e112:	623b      	str	r3, [r7, #32]
   return(result);
 800e114:	6a3b      	ldr	r3, [r7, #32]
 800e116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e11a:	663b      	str	r3, [r7, #96]	; 0x60
 800e11c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	3308      	adds	r3, #8
 800e122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e124:	633a      	str	r2, [r7, #48]	; 0x30
 800e126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e12c:	e841 2300 	strex	r3, r2, [r1]
 800e130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1e5      	bne.n	800e104 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e13a:	2220      	movs	r2, #32
 800e13c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e144:	2b01      	cmp	r3, #1
 800e146:	d118      	bne.n	800e17a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	e853 3f00 	ldrex	r3, [r3]
 800e154:	60fb      	str	r3, [r7, #12]
   return(result);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f023 0310 	bic.w	r3, r3, #16
 800e15c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	461a      	mov	r2, r3
 800e164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e166:	61fb      	str	r3, [r7, #28]
 800e168:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e16a:	69b9      	ldr	r1, [r7, #24]
 800e16c:	69fa      	ldr	r2, [r7, #28]
 800e16e:	e841 2300 	strex	r3, r2, [r1]
 800e172:	617b      	str	r3, [r7, #20]
   return(result);
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d1e6      	bne.n	800e148 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e17c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d107      	bne.n	800e192 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e188:	4619      	mov	r1, r3
 800e18a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e18c:	f7fe fda0 	bl	800ccd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e190:	e002      	b.n	800e198 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e192:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e194:	f7f4 ffec 	bl	8003170 <HAL_UART_RxCpltCallback>
}
 800e198:	bf00      	nop
 800e19a:	3770      	adds	r7, #112	; 0x70
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d109      	bne.n	800e1ca <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1bc:	085b      	lsrs	r3, r3, #1
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f7fe fd84 	bl	800ccd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1c8:	e002      	b.n	800e1d0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7fe fd76 	bl	800ccbc <HAL_UART_RxHalfCpltCallback>
}
 800e1d0:	bf00      	nop
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e200:	2b80      	cmp	r3, #128	; 0x80
 800e202:	d109      	bne.n	800e218 <UART_DMAError+0x40>
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	2b21      	cmp	r3, #33	; 0x21
 800e208:	d106      	bne.n	800e218 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e212:	6978      	ldr	r0, [r7, #20]
 800e214:	f7ff fe32 	bl	800de7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e222:	2b40      	cmp	r3, #64	; 0x40
 800e224:	d109      	bne.n	800e23a <UART_DMAError+0x62>
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2b22      	cmp	r3, #34	; 0x22
 800e22a:	d106      	bne.n	800e23a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2200      	movs	r2, #0
 800e230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e234:	6978      	ldr	r0, [r7, #20]
 800e236:	f7ff fe63 	bl	800df00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e240:	f043 0210 	orr.w	r2, r3, #16
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e24a:	6978      	ldr	r0, [r7, #20]
 800e24c:	f7f4 ff46 	bl	80030dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e250:	bf00      	nop
 800e252:	3718      	adds	r7, #24
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f7f4 ff30 	bl	80030dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e27c:	bf00      	nop
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b088      	sub	sp, #32
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	e853 3f00 	ldrex	r3, [r3]
 800e298:	60bb      	str	r3, [r7, #8]
   return(result);
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2a0:	61fb      	str	r3, [r7, #28]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	61bb      	str	r3, [r7, #24]
 800e2ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ae:	6979      	ldr	r1, [r7, #20]
 800e2b0:	69ba      	ldr	r2, [r7, #24]
 800e2b2:	e841 2300 	strex	r3, r2, [r1]
 800e2b6:	613b      	str	r3, [r7, #16]
   return(result);
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1e6      	bne.n	800e28c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2220      	movs	r2, #32
 800e2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7f4 ff3d 	bl	800314c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2d2:	bf00      	nop
 800e2d4:	3720      	adds	r7, #32
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b083      	sub	sp, #12
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e2e2:	bf00      	nop
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b083      	sub	sp, #12
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e2f6:	bf00      	nop
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr

0800e302 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e302:	b480      	push	{r7}
 800e304:	b083      	sub	sp, #12
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e30a:	bf00      	nop
 800e30c:	370c      	adds	r7, #12
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr

0800e316 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e316:	b480      	push	{r7}
 800e318:	b085      	sub	sp, #20
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e324:	2b01      	cmp	r3, #1
 800e326:	d101      	bne.n	800e32c <HAL_UARTEx_DisableFifoMode+0x16>
 800e328:	2302      	movs	r3, #2
 800e32a:	e027      	b.n	800e37c <HAL_UARTEx_DisableFifoMode+0x66>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2224      	movs	r2, #36	; 0x24
 800e338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f022 0201 	bic.w	r2, r2, #1
 800e352:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e35a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2220      	movs	r2, #32
 800e36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3714      	adds	r7, #20
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d101      	bne.n	800e3a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e39c:	2302      	movs	r3, #2
 800e39e:	e02d      	b.n	800e3fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2224      	movs	r2, #36	; 0x24
 800e3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f022 0201 	bic.w	r2, r2, #1
 800e3c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	683a      	ldr	r2, [r7, #0]
 800e3d8:	430a      	orrs	r2, r1
 800e3da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f84f 	bl	800e480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2220      	movs	r2, #32
 800e3ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e414:	2b01      	cmp	r3, #1
 800e416:	d101      	bne.n	800e41c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e418:	2302      	movs	r3, #2
 800e41a:	e02d      	b.n	800e478 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2224      	movs	r2, #36	; 0x24
 800e428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f022 0201 	bic.w	r2, r2, #1
 800e442:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	683a      	ldr	r2, [r7, #0]
 800e454:	430a      	orrs	r2, r1
 800e456:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f811 	bl	800e480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2220      	movs	r2, #32
 800e46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d108      	bne.n	800e4a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2201      	movs	r2, #1
 800e494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2201      	movs	r2, #1
 800e49c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e4a0:	e031      	b.n	800e506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e4a2:	2310      	movs	r3, #16
 800e4a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e4a6:	2310      	movs	r3, #16
 800e4a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	0e5b      	lsrs	r3, r3, #25
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	f003 0307 	and.w	r3, r3, #7
 800e4b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	0f5b      	lsrs	r3, r3, #29
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f003 0307 	and.w	r3, r3, #7
 800e4c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4ca:	7bbb      	ldrb	r3, [r7, #14]
 800e4cc:	7b3a      	ldrb	r2, [r7, #12]
 800e4ce:	4911      	ldr	r1, [pc, #68]	; (800e514 <UARTEx_SetNbDataToProcess+0x94>)
 800e4d0:	5c8a      	ldrb	r2, [r1, r2]
 800e4d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e4d6:	7b3a      	ldrb	r2, [r7, #12]
 800e4d8:	490f      	ldr	r1, [pc, #60]	; (800e518 <UARTEx_SetNbDataToProcess+0x98>)
 800e4da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	7b7a      	ldrb	r2, [r7, #13]
 800e4ec:	4909      	ldr	r1, [pc, #36]	; (800e514 <UARTEx_SetNbDataToProcess+0x94>)
 800e4ee:	5c8a      	ldrb	r2, [r1, r2]
 800e4f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e4f4:	7b7a      	ldrb	r2, [r7, #13]
 800e4f6:	4908      	ldr	r1, [pc, #32]	; (800e518 <UARTEx_SetNbDataToProcess+0x98>)
 800e4f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e506:	bf00      	nop
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	0800ebd4 	.word	0x0800ebd4
 800e518:	0800ebdc 	.word	0x0800ebdc

0800e51c <__cxa_pure_virtual>:
 800e51c:	b508      	push	{r3, lr}
 800e51e:	f000 f80d 	bl	800e53c <_ZSt9terminatev>

0800e522 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e522:	b508      	push	{r3, lr}
 800e524:	4780      	blx	r0
 800e526:	f000 f80e 	bl	800e546 <abort>
	...

0800e52c <_ZSt13get_terminatev>:
 800e52c:	4b02      	ldr	r3, [pc, #8]	; (800e538 <_ZSt13get_terminatev+0xc>)
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	f3bf 8f5b 	dmb	ish
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	240001b0 	.word	0x240001b0

0800e53c <_ZSt9terminatev>:
 800e53c:	b508      	push	{r3, lr}
 800e53e:	f7ff fff5 	bl	800e52c <_ZSt13get_terminatev>
 800e542:	f7ff ffee 	bl	800e522 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e546 <abort>:
 800e546:	b508      	push	{r3, lr}
 800e548:	2006      	movs	r0, #6
 800e54a:	f000 f873 	bl	800e634 <raise>
 800e54e:	2001      	movs	r0, #1
 800e550:	f7f6 f81e 	bl	8004590 <_exit>

0800e554 <__errno>:
 800e554:	4b01      	ldr	r3, [pc, #4]	; (800e55c <__errno+0x8>)
 800e556:	6818      	ldr	r0, [r3, #0]
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	240001b4 	.word	0x240001b4

0800e560 <__libc_init_array>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	4d0d      	ldr	r5, [pc, #52]	; (800e598 <__libc_init_array+0x38>)
 800e564:	4c0d      	ldr	r4, [pc, #52]	; (800e59c <__libc_init_array+0x3c>)
 800e566:	1b64      	subs	r4, r4, r5
 800e568:	10a4      	asrs	r4, r4, #2
 800e56a:	2600      	movs	r6, #0
 800e56c:	42a6      	cmp	r6, r4
 800e56e:	d109      	bne.n	800e584 <__libc_init_array+0x24>
 800e570:	4d0b      	ldr	r5, [pc, #44]	; (800e5a0 <__libc_init_array+0x40>)
 800e572:	4c0c      	ldr	r4, [pc, #48]	; (800e5a4 <__libc_init_array+0x44>)
 800e574:	f000 f9b0 	bl	800e8d8 <_init>
 800e578:	1b64      	subs	r4, r4, r5
 800e57a:	10a4      	asrs	r4, r4, #2
 800e57c:	2600      	movs	r6, #0
 800e57e:	42a6      	cmp	r6, r4
 800e580:	d105      	bne.n	800e58e <__libc_init_array+0x2e>
 800e582:	bd70      	pop	{r4, r5, r6, pc}
 800e584:	f855 3b04 	ldr.w	r3, [r5], #4
 800e588:	4798      	blx	r3
 800e58a:	3601      	adds	r6, #1
 800e58c:	e7ee      	b.n	800e56c <__libc_init_array+0xc>
 800e58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e592:	4798      	blx	r3
 800e594:	3601      	adds	r6, #1
 800e596:	e7f2      	b.n	800e57e <__libc_init_array+0x1e>
 800e598:	0800ebec 	.word	0x0800ebec
 800e59c:	0800ebec 	.word	0x0800ebec
 800e5a0:	0800ebec 	.word	0x0800ebec
 800e5a4:	0800ebf4 	.word	0x0800ebf4

0800e5a8 <memcpy>:
 800e5a8:	440a      	add	r2, r1
 800e5aa:	4291      	cmp	r1, r2
 800e5ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5b0:	d100      	bne.n	800e5b4 <memcpy+0xc>
 800e5b2:	4770      	bx	lr
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5be:	4291      	cmp	r1, r2
 800e5c0:	d1f9      	bne.n	800e5b6 <memcpy+0xe>
 800e5c2:	bd10      	pop	{r4, pc}

0800e5c4 <memset>:
 800e5c4:	4402      	add	r2, r0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d100      	bne.n	800e5ce <memset+0xa>
 800e5cc:	4770      	bx	lr
 800e5ce:	f803 1b01 	strb.w	r1, [r3], #1
 800e5d2:	e7f9      	b.n	800e5c8 <memset+0x4>

0800e5d4 <realloc>:
 800e5d4:	4b02      	ldr	r3, [pc, #8]	; (800e5e0 <realloc+0xc>)
 800e5d6:	460a      	mov	r2, r1
 800e5d8:	4601      	mov	r1, r0
 800e5da:	6818      	ldr	r0, [r3, #0]
 800e5dc:	f000 b8da 	b.w	800e794 <_realloc_r>
 800e5e0:	240001b4 	.word	0x240001b4

0800e5e4 <_raise_r>:
 800e5e4:	291f      	cmp	r1, #31
 800e5e6:	b538      	push	{r3, r4, r5, lr}
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	460d      	mov	r5, r1
 800e5ec:	d904      	bls.n	800e5f8 <_raise_r+0x14>
 800e5ee:	2316      	movs	r3, #22
 800e5f0:	6003      	str	r3, [r0, #0]
 800e5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5fa:	b112      	cbz	r2, 800e602 <_raise_r+0x1e>
 800e5fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e600:	b94b      	cbnz	r3, 800e616 <_raise_r+0x32>
 800e602:	4620      	mov	r0, r4
 800e604:	f000 f830 	bl	800e668 <_getpid_r>
 800e608:	462a      	mov	r2, r5
 800e60a:	4601      	mov	r1, r0
 800e60c:	4620      	mov	r0, r4
 800e60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e612:	f000 b817 	b.w	800e644 <_kill_r>
 800e616:	2b01      	cmp	r3, #1
 800e618:	d00a      	beq.n	800e630 <_raise_r+0x4c>
 800e61a:	1c59      	adds	r1, r3, #1
 800e61c:	d103      	bne.n	800e626 <_raise_r+0x42>
 800e61e:	2316      	movs	r3, #22
 800e620:	6003      	str	r3, [r0, #0]
 800e622:	2001      	movs	r0, #1
 800e624:	e7e7      	b.n	800e5f6 <_raise_r+0x12>
 800e626:	2400      	movs	r4, #0
 800e628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e62c:	4628      	mov	r0, r5
 800e62e:	4798      	blx	r3
 800e630:	2000      	movs	r0, #0
 800e632:	e7e0      	b.n	800e5f6 <_raise_r+0x12>

0800e634 <raise>:
 800e634:	4b02      	ldr	r3, [pc, #8]	; (800e640 <raise+0xc>)
 800e636:	4601      	mov	r1, r0
 800e638:	6818      	ldr	r0, [r3, #0]
 800e63a:	f7ff bfd3 	b.w	800e5e4 <_raise_r>
 800e63e:	bf00      	nop
 800e640:	240001b4 	.word	0x240001b4

0800e644 <_kill_r>:
 800e644:	b538      	push	{r3, r4, r5, lr}
 800e646:	4d07      	ldr	r5, [pc, #28]	; (800e664 <_kill_r+0x20>)
 800e648:	2300      	movs	r3, #0
 800e64a:	4604      	mov	r4, r0
 800e64c:	4608      	mov	r0, r1
 800e64e:	4611      	mov	r1, r2
 800e650:	602b      	str	r3, [r5, #0]
 800e652:	f7f5 ff8d 	bl	8004570 <_kill>
 800e656:	1c43      	adds	r3, r0, #1
 800e658:	d102      	bne.n	800e660 <_kill_r+0x1c>
 800e65a:	682b      	ldr	r3, [r5, #0]
 800e65c:	b103      	cbz	r3, 800e660 <_kill_r+0x1c>
 800e65e:	6023      	str	r3, [r4, #0]
 800e660:	bd38      	pop	{r3, r4, r5, pc}
 800e662:	bf00      	nop
 800e664:	24001018 	.word	0x24001018

0800e668 <_getpid_r>:
 800e668:	f7f5 bf7a 	b.w	8004560 <_getpid>

0800e66c <sbrk_aligned>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	4e0e      	ldr	r6, [pc, #56]	; (800e6a8 <sbrk_aligned+0x3c>)
 800e670:	460c      	mov	r4, r1
 800e672:	6831      	ldr	r1, [r6, #0]
 800e674:	4605      	mov	r5, r0
 800e676:	b911      	cbnz	r1, 800e67e <sbrk_aligned+0x12>
 800e678:	f000 f8bc 	bl	800e7f4 <_sbrk_r>
 800e67c:	6030      	str	r0, [r6, #0]
 800e67e:	4621      	mov	r1, r4
 800e680:	4628      	mov	r0, r5
 800e682:	f000 f8b7 	bl	800e7f4 <_sbrk_r>
 800e686:	1c43      	adds	r3, r0, #1
 800e688:	d00a      	beq.n	800e6a0 <sbrk_aligned+0x34>
 800e68a:	1cc4      	adds	r4, r0, #3
 800e68c:	f024 0403 	bic.w	r4, r4, #3
 800e690:	42a0      	cmp	r0, r4
 800e692:	d007      	beq.n	800e6a4 <sbrk_aligned+0x38>
 800e694:	1a21      	subs	r1, r4, r0
 800e696:	4628      	mov	r0, r5
 800e698:	f000 f8ac 	bl	800e7f4 <_sbrk_r>
 800e69c:	3001      	adds	r0, #1
 800e69e:	d101      	bne.n	800e6a4 <sbrk_aligned+0x38>
 800e6a0:	f04f 34ff 	mov.w	r4, #4294967295
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	bd70      	pop	{r4, r5, r6, pc}
 800e6a8:	24001014 	.word	0x24001014

0800e6ac <_malloc_r>:
 800e6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b0:	1ccd      	adds	r5, r1, #3
 800e6b2:	f025 0503 	bic.w	r5, r5, #3
 800e6b6:	3508      	adds	r5, #8
 800e6b8:	2d0c      	cmp	r5, #12
 800e6ba:	bf38      	it	cc
 800e6bc:	250c      	movcc	r5, #12
 800e6be:	2d00      	cmp	r5, #0
 800e6c0:	4607      	mov	r7, r0
 800e6c2:	db01      	blt.n	800e6c8 <_malloc_r+0x1c>
 800e6c4:	42a9      	cmp	r1, r5
 800e6c6:	d905      	bls.n	800e6d4 <_malloc_r+0x28>
 800e6c8:	230c      	movs	r3, #12
 800e6ca:	603b      	str	r3, [r7, #0]
 800e6cc:	2600      	movs	r6, #0
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d4:	4e2e      	ldr	r6, [pc, #184]	; (800e790 <_malloc_r+0xe4>)
 800e6d6:	f000 f89d 	bl	800e814 <__malloc_lock>
 800e6da:	6833      	ldr	r3, [r6, #0]
 800e6dc:	461c      	mov	r4, r3
 800e6de:	bb34      	cbnz	r4, 800e72e <_malloc_r+0x82>
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	4638      	mov	r0, r7
 800e6e4:	f7ff ffc2 	bl	800e66c <sbrk_aligned>
 800e6e8:	1c43      	adds	r3, r0, #1
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	d14d      	bne.n	800e78a <_malloc_r+0xde>
 800e6ee:	6834      	ldr	r4, [r6, #0]
 800e6f0:	4626      	mov	r6, r4
 800e6f2:	2e00      	cmp	r6, #0
 800e6f4:	d140      	bne.n	800e778 <_malloc_r+0xcc>
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	4631      	mov	r1, r6
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	eb04 0803 	add.w	r8, r4, r3
 800e700:	f000 f878 	bl	800e7f4 <_sbrk_r>
 800e704:	4580      	cmp	r8, r0
 800e706:	d13a      	bne.n	800e77e <_malloc_r+0xd2>
 800e708:	6821      	ldr	r1, [r4, #0]
 800e70a:	3503      	adds	r5, #3
 800e70c:	1a6d      	subs	r5, r5, r1
 800e70e:	f025 0503 	bic.w	r5, r5, #3
 800e712:	3508      	adds	r5, #8
 800e714:	2d0c      	cmp	r5, #12
 800e716:	bf38      	it	cc
 800e718:	250c      	movcc	r5, #12
 800e71a:	4629      	mov	r1, r5
 800e71c:	4638      	mov	r0, r7
 800e71e:	f7ff ffa5 	bl	800e66c <sbrk_aligned>
 800e722:	3001      	adds	r0, #1
 800e724:	d02b      	beq.n	800e77e <_malloc_r+0xd2>
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	442b      	add	r3, r5
 800e72a:	6023      	str	r3, [r4, #0]
 800e72c:	e00e      	b.n	800e74c <_malloc_r+0xa0>
 800e72e:	6822      	ldr	r2, [r4, #0]
 800e730:	1b52      	subs	r2, r2, r5
 800e732:	d41e      	bmi.n	800e772 <_malloc_r+0xc6>
 800e734:	2a0b      	cmp	r2, #11
 800e736:	d916      	bls.n	800e766 <_malloc_r+0xba>
 800e738:	1961      	adds	r1, r4, r5
 800e73a:	42a3      	cmp	r3, r4
 800e73c:	6025      	str	r5, [r4, #0]
 800e73e:	bf18      	it	ne
 800e740:	6059      	strne	r1, [r3, #4]
 800e742:	6863      	ldr	r3, [r4, #4]
 800e744:	bf08      	it	eq
 800e746:	6031      	streq	r1, [r6, #0]
 800e748:	5162      	str	r2, [r4, r5]
 800e74a:	604b      	str	r3, [r1, #4]
 800e74c:	4638      	mov	r0, r7
 800e74e:	f104 060b 	add.w	r6, r4, #11
 800e752:	f000 f865 	bl	800e820 <__malloc_unlock>
 800e756:	f026 0607 	bic.w	r6, r6, #7
 800e75a:	1d23      	adds	r3, r4, #4
 800e75c:	1af2      	subs	r2, r6, r3
 800e75e:	d0b6      	beq.n	800e6ce <_malloc_r+0x22>
 800e760:	1b9b      	subs	r3, r3, r6
 800e762:	50a3      	str	r3, [r4, r2]
 800e764:	e7b3      	b.n	800e6ce <_malloc_r+0x22>
 800e766:	6862      	ldr	r2, [r4, #4]
 800e768:	42a3      	cmp	r3, r4
 800e76a:	bf0c      	ite	eq
 800e76c:	6032      	streq	r2, [r6, #0]
 800e76e:	605a      	strne	r2, [r3, #4]
 800e770:	e7ec      	b.n	800e74c <_malloc_r+0xa0>
 800e772:	4623      	mov	r3, r4
 800e774:	6864      	ldr	r4, [r4, #4]
 800e776:	e7b2      	b.n	800e6de <_malloc_r+0x32>
 800e778:	4634      	mov	r4, r6
 800e77a:	6876      	ldr	r6, [r6, #4]
 800e77c:	e7b9      	b.n	800e6f2 <_malloc_r+0x46>
 800e77e:	230c      	movs	r3, #12
 800e780:	603b      	str	r3, [r7, #0]
 800e782:	4638      	mov	r0, r7
 800e784:	f000 f84c 	bl	800e820 <__malloc_unlock>
 800e788:	e7a1      	b.n	800e6ce <_malloc_r+0x22>
 800e78a:	6025      	str	r5, [r4, #0]
 800e78c:	e7de      	b.n	800e74c <_malloc_r+0xa0>
 800e78e:	bf00      	nop
 800e790:	24001010 	.word	0x24001010

0800e794 <_realloc_r>:
 800e794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e798:	4680      	mov	r8, r0
 800e79a:	4614      	mov	r4, r2
 800e79c:	460e      	mov	r6, r1
 800e79e:	b921      	cbnz	r1, 800e7aa <_realloc_r+0x16>
 800e7a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	f7ff bf81 	b.w	800e6ac <_malloc_r>
 800e7aa:	b92a      	cbnz	r2, 800e7b8 <_realloc_r+0x24>
 800e7ac:	f000 f83e 	bl	800e82c <_free_r>
 800e7b0:	4625      	mov	r5, r4
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b8:	f000 f884 	bl	800e8c4 <_malloc_usable_size_r>
 800e7bc:	4284      	cmp	r4, r0
 800e7be:	4607      	mov	r7, r0
 800e7c0:	d802      	bhi.n	800e7c8 <_realloc_r+0x34>
 800e7c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7c6:	d812      	bhi.n	800e7ee <_realloc_r+0x5a>
 800e7c8:	4621      	mov	r1, r4
 800e7ca:	4640      	mov	r0, r8
 800e7cc:	f7ff ff6e 	bl	800e6ac <_malloc_r>
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	2800      	cmp	r0, #0
 800e7d4:	d0ed      	beq.n	800e7b2 <_realloc_r+0x1e>
 800e7d6:	42bc      	cmp	r4, r7
 800e7d8:	4622      	mov	r2, r4
 800e7da:	4631      	mov	r1, r6
 800e7dc:	bf28      	it	cs
 800e7de:	463a      	movcs	r2, r7
 800e7e0:	f7ff fee2 	bl	800e5a8 <memcpy>
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	f000 f820 	bl	800e82c <_free_r>
 800e7ec:	e7e1      	b.n	800e7b2 <_realloc_r+0x1e>
 800e7ee:	4635      	mov	r5, r6
 800e7f0:	e7df      	b.n	800e7b2 <_realloc_r+0x1e>
	...

0800e7f4 <_sbrk_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4d06      	ldr	r5, [pc, #24]	; (800e810 <_sbrk_r+0x1c>)
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	4608      	mov	r0, r1
 800e7fe:	602b      	str	r3, [r5, #0]
 800e800:	f7f5 fed0 	bl	80045a4 <_sbrk>
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	d102      	bne.n	800e80e <_sbrk_r+0x1a>
 800e808:	682b      	ldr	r3, [r5, #0]
 800e80a:	b103      	cbz	r3, 800e80e <_sbrk_r+0x1a>
 800e80c:	6023      	str	r3, [r4, #0]
 800e80e:	bd38      	pop	{r3, r4, r5, pc}
 800e810:	24001018 	.word	0x24001018

0800e814 <__malloc_lock>:
 800e814:	4801      	ldr	r0, [pc, #4]	; (800e81c <__malloc_lock+0x8>)
 800e816:	f000 b85d 	b.w	800e8d4 <__retarget_lock_acquire_recursive>
 800e81a:	bf00      	nop
 800e81c:	2400101c 	.word	0x2400101c

0800e820 <__malloc_unlock>:
 800e820:	4801      	ldr	r0, [pc, #4]	; (800e828 <__malloc_unlock+0x8>)
 800e822:	f000 b858 	b.w	800e8d6 <__retarget_lock_release_recursive>
 800e826:	bf00      	nop
 800e828:	2400101c 	.word	0x2400101c

0800e82c <_free_r>:
 800e82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e82e:	2900      	cmp	r1, #0
 800e830:	d044      	beq.n	800e8bc <_free_r+0x90>
 800e832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e836:	9001      	str	r0, [sp, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f1a1 0404 	sub.w	r4, r1, #4
 800e83e:	bfb8      	it	lt
 800e840:	18e4      	addlt	r4, r4, r3
 800e842:	f7ff ffe7 	bl	800e814 <__malloc_lock>
 800e846:	4a1e      	ldr	r2, [pc, #120]	; (800e8c0 <_free_r+0x94>)
 800e848:	9801      	ldr	r0, [sp, #4]
 800e84a:	6813      	ldr	r3, [r2, #0]
 800e84c:	b933      	cbnz	r3, 800e85c <_free_r+0x30>
 800e84e:	6063      	str	r3, [r4, #4]
 800e850:	6014      	str	r4, [r2, #0]
 800e852:	b003      	add	sp, #12
 800e854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e858:	f7ff bfe2 	b.w	800e820 <__malloc_unlock>
 800e85c:	42a3      	cmp	r3, r4
 800e85e:	d908      	bls.n	800e872 <_free_r+0x46>
 800e860:	6825      	ldr	r5, [r4, #0]
 800e862:	1961      	adds	r1, r4, r5
 800e864:	428b      	cmp	r3, r1
 800e866:	bf01      	itttt	eq
 800e868:	6819      	ldreq	r1, [r3, #0]
 800e86a:	685b      	ldreq	r3, [r3, #4]
 800e86c:	1949      	addeq	r1, r1, r5
 800e86e:	6021      	streq	r1, [r4, #0]
 800e870:	e7ed      	b.n	800e84e <_free_r+0x22>
 800e872:	461a      	mov	r2, r3
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	b10b      	cbz	r3, 800e87c <_free_r+0x50>
 800e878:	42a3      	cmp	r3, r4
 800e87a:	d9fa      	bls.n	800e872 <_free_r+0x46>
 800e87c:	6811      	ldr	r1, [r2, #0]
 800e87e:	1855      	adds	r5, r2, r1
 800e880:	42a5      	cmp	r5, r4
 800e882:	d10b      	bne.n	800e89c <_free_r+0x70>
 800e884:	6824      	ldr	r4, [r4, #0]
 800e886:	4421      	add	r1, r4
 800e888:	1854      	adds	r4, r2, r1
 800e88a:	42a3      	cmp	r3, r4
 800e88c:	6011      	str	r1, [r2, #0]
 800e88e:	d1e0      	bne.n	800e852 <_free_r+0x26>
 800e890:	681c      	ldr	r4, [r3, #0]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	6053      	str	r3, [r2, #4]
 800e896:	4421      	add	r1, r4
 800e898:	6011      	str	r1, [r2, #0]
 800e89a:	e7da      	b.n	800e852 <_free_r+0x26>
 800e89c:	d902      	bls.n	800e8a4 <_free_r+0x78>
 800e89e:	230c      	movs	r3, #12
 800e8a0:	6003      	str	r3, [r0, #0]
 800e8a2:	e7d6      	b.n	800e852 <_free_r+0x26>
 800e8a4:	6825      	ldr	r5, [r4, #0]
 800e8a6:	1961      	adds	r1, r4, r5
 800e8a8:	428b      	cmp	r3, r1
 800e8aa:	bf04      	itt	eq
 800e8ac:	6819      	ldreq	r1, [r3, #0]
 800e8ae:	685b      	ldreq	r3, [r3, #4]
 800e8b0:	6063      	str	r3, [r4, #4]
 800e8b2:	bf04      	itt	eq
 800e8b4:	1949      	addeq	r1, r1, r5
 800e8b6:	6021      	streq	r1, [r4, #0]
 800e8b8:	6054      	str	r4, [r2, #4]
 800e8ba:	e7ca      	b.n	800e852 <_free_r+0x26>
 800e8bc:	b003      	add	sp, #12
 800e8be:	bd30      	pop	{r4, r5, pc}
 800e8c0:	24001010 	.word	0x24001010

0800e8c4 <_malloc_usable_size_r>:
 800e8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c8:	1f18      	subs	r0, r3, #4
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	bfbc      	itt	lt
 800e8ce:	580b      	ldrlt	r3, [r1, r0]
 800e8d0:	18c0      	addlt	r0, r0, r3
 800e8d2:	4770      	bx	lr

0800e8d4 <__retarget_lock_acquire_recursive>:
 800e8d4:	4770      	bx	lr

0800e8d6 <__retarget_lock_release_recursive>:
 800e8d6:	4770      	bx	lr

0800e8d8 <_init>:
 800e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8da:	bf00      	nop
 800e8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8de:	bc08      	pop	{r3}
 800e8e0:	469e      	mov	lr, r3
 800e8e2:	4770      	bx	lr

0800e8e4 <_fini>:
 800e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e6:	bf00      	nop
 800e8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ea:	bc08      	pop	{r3}
 800e8ec:	469e      	mov	lr, r3
 800e8ee:	4770      	bx	lr
