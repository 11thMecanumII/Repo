
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9ac  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800ec7c  0800ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ef74  0800ef74  0001ef74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ef7c  0800ef7c  0001ef7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ef84  0800ef84  0001ef84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  0800ef88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001074  24000090  0800f018  00020090  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001104  0800f018  00021104  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f436  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003474  00000000  00000000  0003f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001490  00000000  00000000  00042968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001390  00000000  00000000  00043df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034df5  00000000  00000000  00045188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aacd  00000000  00000000  00079f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015366f  00000000  00000000  00094a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e80b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c34  00000000  00000000  001e810c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ec64 	.word	0x0800ec64

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	0800ec64 	.word	0x0800ec64

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <pidCtrl>:
# include "PID.h"

KPID Kpid[4];

void pidCtrl(int i, double goalVel, double insVel){
 800067c:	b480      	push	{r7}
 800067e:	b087      	sub	sp, #28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6178      	str	r0, [r7, #20]
 8000684:	ed87 0b02 	vstr	d0, [r7, #8]
 8000688:	ed87 1b00 	vstr	d1, [r7]
	Kpid[i].error = goalVel - insVel;
 800068c:	ed97 6b02 	vldr	d6, [r7, #8]
 8000690:	ed97 7b00 	vldr	d7, [r7]
 8000694:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <pidCtrl+0x38>)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	015b      	lsls	r3, r3, #5
 800069e:	4413      	add	r3, r2
 80006a0:	3318      	adds	r3, #24
 80006a2:	ed83 7b00 	vstr	d7, [r3]
//	else if (ui[i] < imax * -1)ui[i] = imax * -1;
//	ut[i] = up[i] + ui[i] + ud[i];
//	ut[i] > 0 ? (pulse[i] = ut[i] * 3200) : (pulse[i] = ut[i] * -3200);
//	if(pulse[i] > 3200) pulse[i] = 3200;

}
 80006a6:	bf00      	nop
 80006a8:	371c      	adds	r7, #28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	240000b0 	.word	0x240000b0

080006b8 <SV_Limit>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void SV_Limit(double SV[], double max){
 80006b8:	b480      	push	{r7}
 80006ba:	b08b      	sub	sp, #44	; 0x2c
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	ed87 0b00 	vstr	d0, [r7]
	double temp_SV;
	for (int i = 0; i < 4; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
 80006c8:	e06b      	b.n	80007a2 <SV_Limit+0xea>
		if (SV[i] > max){
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4413      	add	r3, r2
 80006d2:	ed93 7b00 	vldr	d7, [r3]
 80006d6:	ed97 6b00 	vldr	d6, [r7]
 80006da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80006de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e2:	d525      	bpl.n	8000730 <SV_Limit+0x78>
			temp_SV = max / SV[i];
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	ed93 6b00 	vldr	d6, [r3]
 80006f0:	ed97 5b00 	vldr	d5, [r7]
 80006f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006f8:	ed87 7b04 	vstr	d7, [r7, #16]
			for (int j = 0; j < 4; j++) SV[j] *= temp_SV;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
 8000700:	e012      	b.n	8000728 <SV_Limit+0x70>
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	4413      	add	r3, r2
 800070a:	ed93 6b00 	vldr	d6, [r3]
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	ed97 7b04 	vldr	d7, [r7, #16]
 800071a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800071e:	ed83 7b00 	vstr	d7, [r3]
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	3301      	adds	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	6a3b      	ldr	r3, [r7, #32]
 800072a:	2b03      	cmp	r3, #3
 800072c:	dde9      	ble.n	8000702 <SV_Limit+0x4a>
 800072e:	e035      	b.n	800079c <SV_Limit+0xe4>
		}else if (SV[i] < (max * -1)){
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	ed93 6b00 	vldr	d6, [r3]
 800073c:	ed97 7b00 	vldr	d7, [r7]
 8000740:	eeb1 7b47 	vneg.f64	d7, d7
 8000744:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074c:	d526      	bpl.n	800079c <SV_Limit+0xe4>
			temp_SV = (max * -1) / SV[i];
 800074e:	ed97 7b00 	vldr	d7, [r7]
 8000752:	eeb1 5b47 	vneg.f64	d5, d7
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	ed93 6b00 	vldr	d6, [r3]
 8000762:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000766:	ed87 7b04 	vstr	d7, [r7, #16]
			for (int j = 0; j < 4; j++) SV[j] *= temp_SV;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	e012      	b.n	8000796 <SV_Limit+0xde>
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	ed93 6b00 	vldr	d6, [r3]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	ed97 7b04 	vldr	d7, [r7, #16]
 8000788:	ee26 7b07 	vmul.f64	d7, d6, d7
 800078c:	ed83 7b00 	vstr	d7, [r3]
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	3301      	adds	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	2b03      	cmp	r3, #3
 800079a:	dde9      	ble.n	8000770 <SV_Limit+0xb8>
	for (int i = 0; i < 4; i++) {
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	3301      	adds	r3, #1
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	dd90      	ble.n	80006ca <SV_Limit+0x12>
		}
	}
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	372c      	adds	r7, #44	; 0x2c
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f004 fb6d 	bl	8004e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f9b9 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fdbf 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 fd95 	bl	80012f8 <MX_DMA_Init>
  MX_USART10_UART_Init();
 80007ce:	f000 fd47 	bl	8001260 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 80007d2:	f000 fa71 	bl	8000cb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007d6:	f000 fac5 	bl	8000d64 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007da:	f000 fb19 	bl	8000e10 <MX_TIM5_Init>
  MX_TIM8_Init();
 80007de:	f000 fb65 	bl	8000eac <MX_TIM8_Init>
  MX_TIM15_Init();
 80007e2:	f000 fbff 	bl	8000fe4 <MX_TIM15_Init>
  MX_TIM23_Init();
 80007e6:	f000 fc8f 	bl	8001108 <MX_TIM23_Init>
  MX_TIM24_Init();
 80007ea:	f000 fce3 	bl	80011b4 <MX_TIM24_Init>
  MX_TIM2_Init();
 80007ee:	f000 fa15 	bl	8000c1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80007f2:	48af      	ldr	r0, [pc, #700]	; (8000ab0 <main+0x2f8>)
 80007f4:	f00a fae6 	bl	800adc4 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80007f8:	48ae      	ldr	r0, [pc, #696]	; (8000ab4 <main+0x2fc>)
 80007fa:	f00a fae3 	bl	800adc4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80007fe:	2108      	movs	r1, #8
 8000800:	48ad      	ldr	r0, [pc, #692]	; (8000ab8 <main+0x300>)
 8000802:	f00a fbbd 	bl	800af80 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000806:	210c      	movs	r1, #12
 8000808:	48ab      	ldr	r0, [pc, #684]	; (8000ab8 <main+0x300>)
 800080a:	f00a fbb9 	bl	800af80 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	48aa      	ldr	r0, [pc, #680]	; (8000abc <main+0x304>)
 8000812:	f00a fbb5 	bl	800af80 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000816:	2104      	movs	r1, #4
 8000818:	48a8      	ldr	r0, [pc, #672]	; (8000abc <main+0x304>)
 800081a:	f00a fbb1 	bl	800af80 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	48a7      	ldr	r0, [pc, #668]	; (8000ac0 <main+0x308>)
 8000822:	f00a fd6f 	bl	800b304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	48a5      	ldr	r0, [pc, #660]	; (8000ac0 <main+0x308>)
 800082a:	f00a fd6b 	bl	800b304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800082e:	2100      	movs	r1, #0
 8000830:	48a4      	ldr	r0, [pc, #656]	; (8000ac4 <main+0x30c>)
 8000832:	f00a fd67 	bl	800b304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000836:	2104      	movs	r1, #4
 8000838:	48a2      	ldr	r0, [pc, #648]	; (8000ac4 <main+0x30c>)
 800083a:	f00a fd63 	bl	800b304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800083e:	2100      	movs	r1, #0
 8000840:	48a1      	ldr	r0, [pc, #644]	; (8000ac8 <main+0x310>)
 8000842:	f00a fd5f 	bl	800b304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000846:	2104      	movs	r1, #4
 8000848:	489f      	ldr	r0, [pc, #636]	; (8000ac8 <main+0x310>)
 800084a:	f00a fd5b 	bl	800b304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 800084e:	2100      	movs	r1, #0
 8000850:	489e      	ldr	r0, [pc, #632]	; (8000acc <main+0x314>)
 8000852:	f00a fd57 	bl	800b304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 8000856:	2104      	movs	r1, #4
 8000858:	489c      	ldr	r0, [pc, #624]	; (8000acc <main+0x314>)
 800085a:	f00a fd53 	bl	800b304 <HAL_TIM_Encoder_Start>
    run2 = 0;
 800085e:	4b9c      	ldr	r3, [pc, #624]	; (8000ad0 <main+0x318>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
    run = 0;
 8000864:	4b9b      	ldr	r3, [pc, #620]	; (8000ad4 <main+0x31c>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    Kp[0] = 0.380348545974888	;
 800086a:	499b      	ldr	r1, [pc, #620]	; (8000ad8 <main+0x320>)
 800086c:	a378      	add	r3, pc, #480	; (adr r3, 8000a50 <main+0x298>)
 800086e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000872:	e9c1 2300 	strd	r2, r3, [r1]
    Ki[0] = 8.64014455617426;
 8000876:	4999      	ldr	r1, [pc, #612]	; (8000adc <main+0x324>)
 8000878:	a377      	add	r3, pc, #476	; (adr r3, 8000a58 <main+0x2a0>)
 800087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800087e:	e9c1 2300 	strd	r2, r3, [r1]
    Kd[0] = 0.00158359752468666;
 8000882:	4997      	ldr	r1, [pc, #604]	; (8000ae0 <main+0x328>)
 8000884:	a376      	add	r3, pc, #472	; (adr r3, 8000a60 <main+0x2a8>)
 8000886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800088a:	e9c1 2300 	strd	r2, r3, [r1]
    Kp[1] = 0.398598965511759	;
 800088e:	4992      	ldr	r1, [pc, #584]	; (8000ad8 <main+0x320>)
 8000890:	a375      	add	r3, pc, #468	; (adr r3, 8000a68 <main+0x2b0>)
 8000892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000896:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Ki[1] = 8.83255513394513;
 800089a:	4990      	ldr	r1, [pc, #576]	; (8000adc <main+0x324>)
 800089c:	a374      	add	r3, pc, #464	; (adr r3, 8000a70 <main+0x2b8>)
 800089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Kd[1] = 0.00182236328290195;
 80008a6:	498e      	ldr	r1, [pc, #568]	; (8000ae0 <main+0x328>)
 80008a8:	a373      	add	r3, pc, #460	; (adr r3, 8000a78 <main+0x2c0>)
 80008aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Kp[2] = 0.383938106220696;
 80008b2:	4989      	ldr	r1, [pc, #548]	; (8000ad8 <main+0x320>)
 80008b4:	a372      	add	r3, pc, #456	; (adr r3, 8000a80 <main+0x2c8>)
 80008b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Ki[2] = 8.67125871485857;
 80008be:	4987      	ldr	r1, [pc, #540]	; (8000adc <main+0x324>)
 80008c0:	a371      	add	r3, pc, #452	; (adr r3, 8000a88 <main+0x2d0>)
 80008c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Kd[2] = 0.00163533883823194;
 80008ca:	4985      	ldr	r1, [pc, #532]	; (8000ae0 <main+0x328>)
 80008cc:	a370      	add	r3, pc, #448	; (adr r3, 8000a90 <main+0x2d8>)
 80008ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Kp[3] = 0.395936692858645;
 80008d6:	4980      	ldr	r1, [pc, #512]	; (8000ad8 <main+0x320>)
 80008d8:	a36f      	add	r3, pc, #444	; (adr r3, 8000a98 <main+0x2e0>)
 80008da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008de:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Ki[3] = 8.79655800062044;
 80008e2:	497e      	ldr	r1, [pc, #504]	; (8000adc <main+0x324>)
 80008e4:	a36e      	add	r3, pc, #440	; (adr r3, 8000aa0 <main+0x2e8>)
 80008e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kd[3] = 0.00179332179214608;
 80008ee:	497c      	ldr	r1, [pc, #496]	; (8000ae0 <main+0x328>)
 80008f0:	a36d      	add	r3, pc, #436	; (adr r3, 8000aa8 <main+0x2f0>)
 80008f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    for (int i = 0; i < 4; i++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	e061      	b.n	80009c4 <main+0x20c>
    	ut[i] = 0;
 8000900:	4a78      	ldr	r2, [pc, #480]	; (8000ae4 <main+0x32c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	18d1      	adds	r1, r2, r3
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	e9c1 2300 	strd	r2, r3, [r1]
    	up[i] = 0;
 8000914:	4a74      	ldr	r2, [pc, #464]	; (8000ae8 <main+0x330>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	18d1      	adds	r1, r2, r3
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	e9c1 2300 	strd	r2, r3, [r1]
    	ui[i] = 0;
 8000928:	4a70      	ldr	r2, [pc, #448]	; (8000aec <main+0x334>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	18d1      	adds	r1, r2, r3
 8000930:	f04f 0200 	mov.w	r2, #0
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	e9c1 2300 	strd	r2, r3, [r1]
    	ud[i] = 0;
 800093c:	4a6c      	ldr	r2, [pc, #432]	; (8000af0 <main+0x338>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	18d1      	adds	r1, r2, r3
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	e9c1 2300 	strd	r2, r3, [r1]
    	SV[i] = 0;
 8000950:	4a68      	ldr	r2, [pc, #416]	; (8000af4 <main+0x33c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	18d1      	adds	r1, r2, r3
 8000958:	f04f 0200 	mov.w	r2, #0
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	e9c1 2300 	strd	r2, r3, [r1]
    	PV[i] = 0;
 8000964:	4a64      	ldr	r2, [pc, #400]	; (8000af8 <main+0x340>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	18d1      	adds	r1, r2, r3
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	e9c1 2300 	strd	r2, r3, [r1]
    	et[i] = 0;
 8000978:	4a60      	ldr	r2, [pc, #384]	; (8000afc <main+0x344>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	18d1      	adds	r1, r2, r3
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	e9c1 2300 	strd	r2, r3, [r1]
    	pulse[i] = 0;
 800098c:	4a5c      	ldr	r2, [pc, #368]	; (8000b00 <main+0x348>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	18d1      	adds	r1, r2, r3
 8000994:	f04f 0200 	mov.w	r2, #0
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e9c1 2300 	strd	r2, r3, [r1]
    	it[i] = 0;
 80009a0:	4a58      	ldr	r2, [pc, #352]	; (8000b04 <main+0x34c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	18d1      	adds	r1, r2, r3
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	e9c1 2300 	strd	r2, r3, [r1]
    	enc[i] = 0;
 80009b4:	4a54      	ldr	r2, [pc, #336]	; (8000b08 <main+0x350>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2100      	movs	r1, #0
 80009ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3301      	adds	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	dd9a      	ble.n	8000900 <main+0x148>
    }
    imax = 1;
 80009ca:	4950      	ldr	r1, [pc, #320]	; (8000b0c <main+0x354>)
 80009cc:	f04f 0200 	mov.w	r2, #0
 80009d0:	4b4f      	ldr	r3, [pc, #316]	; (8000b10 <main+0x358>)
 80009d2:	e9c1 2300 	strd	r2, r3, [r1]
    Vx = 0;
 80009d6:	494f      	ldr	r1, [pc, #316]	; (8000b14 <main+0x35c>)
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e9c1 2300 	strd	r2, r3, [r1]
    Vy = 0;
 80009e4:	494c      	ldr	r1, [pc, #304]	; (8000b18 <main+0x360>)
 80009e6:	f04f 0200 	mov.w	r2, #0
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	e9c1 2300 	strd	r2, r3, [r1]
    W = 0;
 80009f2:	494a      	ldr	r1, [pc, #296]	; (8000b1c <main+0x364>)
 80009f4:	f04f 0200 	mov.w	r2, #0
 80009f8:	f04f 0300 	mov.w	r3, #0
 80009fc:	e9c1 2300 	strd	r2, r3, [r1]
    cont = 0;
 8000a00:	4b47      	ldr	r3, [pc, #284]	; (8000b20 <main+0x368>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
    max_rps = 2;
 8000a06:	4947      	ldr	r1, [pc, #284]	; (8000b24 <main+0x36c>)
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a10:	e9c1 2300 	strd	r2, r3, [r1]
    map = 0;
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <main+0x370>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
    rVy = 0;
 8000a1a:	4944      	ldr	r1, [pc, #272]	; (8000b2c <main+0x374>)
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c1 2300 	strd	r2, r3, [r1]
    rVx = 0;
 8000a28:	4941      	ldr	r1, [pc, #260]	; (8000b30 <main+0x378>)
 8000a2a:	f04f 0200 	mov.w	r2, #0
 8000a2e:	f04f 0300 	mov.w	r3, #0
 8000a32:	e9c1 2300 	strd	r2, r3, [r1]
    rW = 0;
 8000a36:	493f      	ldr	r1, [pc, #252]	; (8000b34 <main+0x37c>)
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e9c1 2300 	strd	r2, r3, [r1]
    setup();
 8000a44:	f002 ff48 	bl	80038d8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000a48:	f002 ff5c 	bl	8003904 <loop>
 8000a4c:	e7fc      	b.n	8000a48 <main+0x290>
 8000a4e:	bf00      	nop
 8000a50:	6d82c55e 	.word	0x6d82c55e
 8000a54:	3fd857a1 	.word	0x3fd857a1
 8000a58:	06faf636 	.word	0x06faf636
 8000a5c:	402147c1 	.word	0x402147c1
 8000a60:	e5070eba 	.word	0xe5070eba
 8000a64:	3f59f216 	.word	0x3f59f216
 8000a68:	3c45ea7c 	.word	0x3c45ea7c
 8000a6c:	3fd982a5 	.word	0x3fd982a5
 8000a70:	aaa0d28d 	.word	0xaaa0d28d
 8000a74:	4021aa44 	.word	0x4021aa44
 8000a78:	ace54b95 	.word	0xace54b95
 8000a7c:	3f5ddb8b 	.word	0x3f5ddb8b
 8000a80:	2279fcf2 	.word	0x2279fcf2
 8000a84:	3fd89271 	.word	0x3fd89271
 8000a88:	38e6f1f2 	.word	0x38e6f1f2
 8000a8c:	402157af 	.word	0x402157af
 8000a90:	b4ff5776 	.word	0xb4ff5776
 8000a94:	3f5acb1b 	.word	0x3f5acb1b
 8000a98:	dac75051 	.word	0xdac75051
 8000a9c:	3fd95706 	.word	0x3fd95706
 8000aa0:	7344105a 	.word	0x7344105a
 8000aa4:	402197d6 	.word	0x402197d6
 8000aa8:	9cb3c1e7 	.word	0x9cb3c1e7
 8000aac:	3f5d61bc 	.word	0x3f5d61bc
 8000ab0:	24000214 	.word	0x24000214
 8000ab4:	24000130 	.word	0x24000130
 8000ab8:	24000260 	.word	0x24000260
 8000abc:	240002ac 	.word	0x240002ac
 8000ac0:	24000344 	.word	0x24000344
 8000ac4:	2400017c 	.word	0x2400017c
 8000ac8:	240001c8 	.word	0x240001c8
 8000acc:	240002f8 	.word	0x240002f8
 8000ad0:	240006b0 	.word	0x240006b0
 8000ad4:	240006ac 	.word	0x240006ac
 8000ad8:	240005d0 	.word	0x240005d0
 8000adc:	240005f0 	.word	0x240005f0
 8000ae0:	24000610 	.word	0x24000610
 8000ae4:	24000510 	.word	0x24000510
 8000ae8:	24000530 	.word	0x24000530
 8000aec:	24000550 	.word	0x24000550
 8000af0:	24000570 	.word	0x24000570
 8000af4:	24000590 	.word	0x24000590
 8000af8:	240005b0 	.word	0x240005b0
 8000afc:	24000630 	.word	0x24000630
 8000b00:	24000650 	.word	0x24000650
 8000b04:	24000670 	.word	0x24000670
 8000b08:	24000690 	.word	0x24000690
 8000b0c:	24000698 	.word	0x24000698
 8000b10:	3ff00000 	.word	0x3ff00000
 8000b14:	240006c0 	.word	0x240006c0
 8000b18:	240006c8 	.word	0x240006c8
 8000b1c:	240006d0 	.word	0x240006d0
 8000b20:	240006b4 	.word	0x240006b4
 8000b24:	240006a0 	.word	0x240006a0
 8000b28:	240006a8 	.word	0x240006a8
 8000b2c:	240006e0 	.word	0x240006e0
 8000b30:	240006d8 	.word	0x240006d8
 8000b34:	240006e8 	.word	0x240006e8

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09c      	sub	sp, #112	; 0x70
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	224c      	movs	r2, #76	; 0x4c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00d ff02 	bl	800e950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2220      	movs	r2, #32
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00d fefc 	bl	800e950 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f007 fe4b 	bl	80087f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <SystemClock_Config+0xe0>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b6a:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <SystemClock_Config+0xe0>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <SystemClock_Config+0xe0>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b7e:	bf00      	nop
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <SystemClock_Config+0xe0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8c:	d1f8      	bne.n	8000b80 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000ba6:	2315      	movs	r3, #21
 8000ba8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 fe4e 	bl	8008868 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bd2:	f000 ffe3 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	233f      	movs	r3, #63	; 0x3f
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000be4:	2308      	movs	r3, #8
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bec:	2340      	movs	r3, #64	; 0x40
 8000bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f008 f9e0 	bl	8008fc4 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c0a:	f000 ffc7 	bl	8001b9c <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3770      	adds	r7, #112	; 0x70
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	58024800 	.word	0x58024800

08000c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c44:	223f      	movs	r2, #63	; 0x3f
 8000c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c50:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c64:	f00a f856 	bl	800ad14 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c6e:	f000 ff95 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c80:	f00a fe02 	bl	800b888 <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c8a:	f000 ff87 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_TIM2_Init+0x98>)
 8000c9c:	f00b fb54 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ca6:	f000 ff79 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000130 	.word	0x24000130

08000cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2224      	movs	r2, #36	; 0x24
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00d fe42 	bl	800e950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000cd8:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <MX_TIM3_Init+0xa8>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d14:	2301      	movs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000d28:	f00a fa46 	bl	800b1b8 <HAL_TIM_Encoder_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d32:	f000 ff33 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_TIM3_Init+0xa4>)
 8000d44:	f00b fb00 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d4e:	f000 ff25 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	; 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2400017c 	.word	0x2400017c
 8000d60:	40000400 	.word	0x40000400

08000d64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2224      	movs	r2, #36	; 0x24
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00d fdec 	bl	800e950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <MX_TIM4_Init+0xa8>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000da8:	2303      	movs	r3, #3
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000dd4:	f00a f9f0 	bl	800b1b8 <HAL_TIM_Encoder_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000dde:	f000 fedd 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_TIM4_Init+0xa4>)
 8000df0:	f00b faaa 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000dfa:	f000 fecf 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3730      	adds	r7, #48	; 0x30
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	240001c8 	.word	0x240001c8
 8000e0c:	40000800 	.word	0x40000800

08000e10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <MX_TIM5_Init+0x98>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e36:	223f      	movs	r2, #63	; 0x3f
 8000e38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e56:	f009 ff5d 	bl	800ad14 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e60:	f000 fe9c 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e72:	f00a fd09 	bl	800b888 <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e7c:	f000 fe8e 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_TIM5_Init+0x94>)
 8000e8e:	f00b fa5b 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e98:	f000 fe80 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	24000214 	.word	0x24000214
 8000ea8:	40000c00 	.word	0x40000c00

08000eac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b098      	sub	sp, #96	; 0x60
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2234      	movs	r2, #52	; 0x34
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f00d fd39 	bl	800e950 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ede:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000ee0:	4a3f      	ldr	r2, [pc, #252]	; (8000fe0 <MX_TIM8_Init+0x134>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ee4:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000ef2:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000ef6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f0a:	4834      	ldr	r0, [pc, #208]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000f0c:	f009 ffe0 	bl	800aed0 <HAL_TIM_PWM_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 fe41 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482b      	ldr	r0, [pc, #172]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000f2e:	f00b fa0b 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000f38:	f000 fe30 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3c:	2360      	movs	r3, #96	; 0x60
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f44:	2300      	movs	r3, #0
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000f62:	f00a fb7d 	bl	800b660 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f6c:	f000 fe16 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f74:	220c      	movs	r2, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	4818      	ldr	r0, [pc, #96]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000f7a:	f00a fb71 	bl	800b660 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000f84:	f000 fe0a 	bl	8001b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000fbe:	f00b fa5f 	bl	800c480 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000fc8:	f000 fde8 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <MX_TIM8_Init+0x130>)
 8000fce:	f003 fc65 	bl	800489c <HAL_TIM_MspPostInit>

}
 8000fd2:	bf00      	nop
 8000fd4:	3760      	adds	r7, #96	; 0x60
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000260 	.word	0x24000260
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b098      	sub	sp, #96	; 0x60
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2234      	movs	r2, #52	; 0x34
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00d fc9d 	bl	800e950 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <MX_TIM15_Init+0x11c>)
 8001018:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <MX_TIM15_Init+0x120>)
 800101a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800101c:	4b38      	ldr	r3, [pc, #224]	; (8001100 <MX_TIM15_Init+0x11c>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <MX_TIM15_Init+0x11c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <MX_TIM15_Init+0x11c>)
 800102a:	f640 427f 	movw	r2, #3199	; 0xc7f
 800102e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_TIM15_Init+0x11c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001036:	4b32      	ldr	r3, [pc, #200]	; (8001100 <MX_TIM15_Init+0x11c>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <MX_TIM15_Init+0x11c>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001042:	482f      	ldr	r0, [pc, #188]	; (8001100 <MX_TIM15_Init+0x11c>)
 8001044:	f009 ff44 	bl	800aed0 <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fda5 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800105a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105e:	4619      	mov	r1, r3
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <MX_TIM15_Init+0x11c>)
 8001062:	f00b f971 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800106c:	f000 fd96 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107c:	2300      	movs	r3, #0
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	481a      	ldr	r0, [pc, #104]	; (8001100 <MX_TIM15_Init+0x11c>)
 8001096:	f00a fae3 	bl	800b660 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80010a0:	f000 fd7c 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a8:	2204      	movs	r2, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_TIM15_Init+0x11c>)
 80010ae:	f00a fad7 	bl	800b660 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80010b8:	f000 fd70 	bl	8001b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM15_Init+0x11c>)
 80010e4:	f00b f9cc 	bl	800c480 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80010ee:	f000 fd55 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM15_Init+0x11c>)
 80010f4:	f003 fbd2 	bl	800489c <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3760      	adds	r7, #96	; 0x60
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	240002ac 	.word	0x240002ac
 8001104:	40014000 	.word	0x40014000

08001108 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2224      	movs	r2, #36	; 0x24
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f00d fc1a 	bl	800e950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_TIM23_Init+0xa4>)
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <MX_TIM23_Init+0xa8>)
 800112a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_TIM23_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_TIM23_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_TIM23_Init+0xa4>)
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_TIM23_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_TIM23_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800114c:	2303      	movs	r3, #3
 800114e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_TIM23_Init+0xa4>)
 8001178:	f00a f81e 	bl	800b1b8 <HAL_TIM_Encoder_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001182:	f000 fd0b 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_TIM23_Init+0xa4>)
 8001194:	f00b f8d8 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800119e:	f000 fcfd 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240002f8 	.word	0x240002f8
 80011b0:	4000e000 	.word	0x4000e000

080011b4 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2224      	movs	r2, #36	; 0x24
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d fbc4 	bl	800e950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	463b      	mov	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_TIM24_Init+0xa4>)
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <MX_TIM24_Init+0xa8>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_TIM24_Init+0xa4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_TIM24_Init+0xa4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_TIM24_Init+0xa4>)
 80011e6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ea:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_TIM24_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM24_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011f8:	2303      	movs	r3, #3
 80011fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001210:	2301      	movs	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM24_Init+0xa4>)
 8001224:	f009 ffc8 	bl	800b1b8 <HAL_TIM_Encoder_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800122e:	f000 fcb5 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM24_Init+0xa4>)
 8001240:	f00b f882 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800124a:	f000 fca7 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3730      	adds	r7, #48	; 0x30
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	24000344 	.word	0x24000344
 800125c:	4000e400 	.word	0x4000e400

08001260 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <MX_USART10_UART_Init+0x94>)
 8001268:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 80012aa:	f00b f9a7 	bl	800c5fc <HAL_UART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 fc72 	bl	8001b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 80012bc:	f00d fa2a 	bl	800e714 <HAL_UARTEx_SetTxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 80012c6:	f000 fc69 	bl	8001b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 80012ce:	f00d fa5f 	bl	800e790 <HAL_UARTEx_SetRxFifoThreshold>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f000 fc60 	bl	8001b9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_USART10_UART_Init+0x90>)
 80012de:	f00d f9e0 	bl	800e6a2 <HAL_UARTEx_DisableFifoMode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f000 fc58 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	24000390 	.word	0x24000390
 80012f4:	40011c00 	.word	0x40011c00

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_DMA_Init+0x4c>)
 8001300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001304:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <MX_DMA_Init+0x4c>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <MX_DMA_Init+0x4c>)
 8001310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	200b      	movs	r0, #11
 8001322:	f003 ff4c 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001326:	200b      	movs	r0, #11
 8001328:	f003 ff63 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	200c      	movs	r0, #12
 8001332:	f003 ff44 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001336:	200c      	movs	r0, #12
 8001338:	f003 ff5b 	bl	80051f2 <HAL_NVIC_EnableIRQ>

}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <MX_GPIO_Init+0x170>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x170>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <MX_GPIO_Init+0x170>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013a2:	f043 0320 	orr.w	r3, r3, #32
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b8:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	4a36      	ldr	r2, [pc, #216]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <MX_GPIO_Init+0x170>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <MX_GPIO_Init+0x170>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001430:	2200      	movs	r2, #0
 8001432:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001436:	4821      	ldr	r0, [pc, #132]	; (80014bc <MX_GPIO_Init+0x174>)
 8001438:	f007 f99e 	bl	8008778 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001442:	481f      	ldr	r0, [pc, #124]	; (80014c0 <MX_GPIO_Init+0x178>)
 8001444:	f007 f998 	bl	8008778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001448:	f249 53c0 	movw	r3, #38336	; 0x95c0
 800144c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <MX_GPIO_Init+0x174>)
 8001462:	f006 fedf 	bl	8008224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <MX_GPIO_Init+0x17c>)
 800147e:	f006 fed1 	bl	8008224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001482:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <MX_GPIO_Init+0x178>)
 800149c:	f006 fec2 	bl	8008224 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2028      	movs	r0, #40	; 0x28
 80014a6:	f003 fe8a 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014aa:	2028      	movs	r0, #40	; 0x28
 80014ac:	f003 fea1 	bl	80051f2 <HAL_NVIC_EnableIRQ>

}
 80014b0:	bf00      	nop
 80014b2:	3730      	adds	r7, #48	; 0x30
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58020800 	.word	0x58020800

080014c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
//	run++;
//	if (htim->Instance == TIM2) {
//		inttt ++;
//		inter();
//	}
	if (htim->Instance == TIM5) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4ab6      	ldr	r2, [pc, #728]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	f040 8350 	bne.w	8001b7c <HAL_TIM_PeriodElapsedCallback+0x6b4>

		run2++;
 80014dc:	4bb5      	ldr	r3, [pc, #724]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4ab4      	ldr	r2, [pc, #720]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80014e4:	6013      	str	r3, [r2, #0]
		SV[0] = Vy + Vx + (W * 0.152767);
 80014e6:	4bb4      	ldr	r3, [pc, #720]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014e8:	ed93 6b00 	vldr	d6, [r3]
 80014ec:	4bb3      	ldr	r3, [pc, #716]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80014ee:	ed93 7b00 	vldr	d7, [r3]
 80014f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014f6:	4bb2      	ldr	r3, [pc, #712]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014f8:	ed93 7b00 	vldr	d7, [r3]
 80014fc:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8001778 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8001500:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001504:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001508:	4bae      	ldr	r3, [pc, #696]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800150a:	ed83 7b00 	vstr	d7, [r3]
		SV[1] = Vy - Vx - (W * 0.152844);
 800150e:	4baa      	ldr	r3, [pc, #680]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001510:	ed93 6b00 	vldr	d6, [r3]
 8001514:	4ba9      	ldr	r3, [pc, #676]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001516:	ed93 7b00 	vldr	d7, [r3]
 800151a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800151e:	4ba8      	ldr	r3, [pc, #672]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001520:	ed93 7b00 	vldr	d7, [r3]
 8001524:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8001780 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8001528:	ee27 7b05 	vmul.f64	d7, d7, d5
 800152c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001530:	4ba4      	ldr	r3, [pc, #656]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001532:	ed83 7b02 	vstr	d7, [r3, #8]
		SV[2] = Vy + Vx - (W * 0.152998);
 8001536:	4ba0      	ldr	r3, [pc, #640]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001538:	ed93 6b00 	vldr	d6, [r3]
 800153c:	4b9f      	ldr	r3, [pc, #636]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800153e:	ed93 7b00 	vldr	d7, [r3]
 8001542:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001546:	4b9e      	ldr	r3, [pc, #632]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001548:	ed93 7b00 	vldr	d7, [r3]
 800154c:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8001788 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8001550:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001554:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001558:	4b9a      	ldr	r3, [pc, #616]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800155a:	ed83 7b04 	vstr	d7, [r3, #16]
		SV[3] = Vy - Vx + (W * 0.154852);
 800155e:	4b96      	ldr	r3, [pc, #600]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001560:	ed93 6b00 	vldr	d6, [r3]
 8001564:	4b95      	ldr	r3, [pc, #596]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001566:	ed93 7b00 	vldr	d7, [r3]
 800156a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800156e:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001570:	ed93 7b00 	vldr	d7, [r3]
 8001574:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8001790 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001578:	ee27 7b05 	vmul.f64	d7, d7, d5
 800157c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001580:	4b90      	ldr	r3, [pc, #576]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001582:	ed83 7b06 	vstr	d7, [r3, #24]

		SV_Limit(SV, max_rps);
 8001586:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001588:	ed93 7b00 	vldr	d7, [r3]
 800158c:	eeb0 0b47 	vmov.f64	d0, d7
 8001590:	488c      	ldr	r0, [pc, #560]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001592:	f7ff f891 	bl	80006b8 <SV_Limit>

		enc[0] = __HAL_TIM_GetCounter(&htim23);
 8001596:	4b8d      	ldr	r3, [pc, #564]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b8c      	ldr	r3, [pc, #560]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80015a0:	801a      	strh	r2, [r3, #0]
		enc[1] = __HAL_TIM_GetCounter(&htim4) * -1;
 80015a2:	4b8c      	ldr	r3, [pc, #560]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	425b      	negs	r3, r3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b87      	ldr	r3, [pc, #540]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80015b2:	805a      	strh	r2, [r3, #2]
		enc[2] = __HAL_TIM_GetCounter(&htim24);
 80015b4:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b84      	ldr	r3, [pc, #528]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80015be:	809a      	strh	r2, [r3, #4]
		enc[3] = __HAL_TIM_GetCounter(&htim3);
 80015c0:	4b86      	ldr	r3, [pc, #536]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x314>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b81      	ldr	r3, [pc, #516]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80015ca:	80da      	strh	r2, [r3, #6]
		__HAL_TIM_SetCounter(&htim24, 0);
 80015cc:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 80015d4:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 80015dc:	4b7f      	ldr	r3, [pc, #508]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x314>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 80015e4:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

		for (int i = 0; i < 4; i++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e18e      	b.n	8001910 <HAL_TIM_PeriodElapsedCallback+0x448>
			it[i] = et[i];
 80015f2:	4a7b      	ldr	r2, [pc, #492]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	4879      	ldr	r0, [pc, #484]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001600:	68f9      	ldr	r1, [r7, #12]
 8001602:	00c9      	lsls	r1, r1, #3
 8001604:	4401      	add	r1, r0
 8001606:	e9c1 2300 	strd	r2, r3, [r1]
			PV[i] = (double) enc[i] * PI * 0.0996 / (4 * resolution * reduction_ratio) * frequency;
 800160a:	4a71      	ldr	r2, [pc, #452]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800161a:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8001798 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800161e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001622:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001626:	ee27 5b06 	vmul.f64	d5, d7, d6
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800162c:	ed93 7b00 	vldr	d7, [r3]
 8001630:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001634:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001638:	4b6c      	ldr	r3, [pc, #432]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x324>)
 800163a:	ed93 7b00 	vldr	d7, [r3]
 800163e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001642:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001646:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001648:	ed93 7b00 	vldr	d7, [r3]
 800164c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001650:	4a68      	ldr	r2, [pc, #416]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	ed83 7b00 	vstr	d7, [r3]
//			et[i] = SV[i] - PV[i];
			pidCtrl(i, SV[i], PV[i]);
 800165c:	4a59      	ldr	r2, [pc, #356]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	ed93 7b00 	vldr	d7, [r3]
 8001668:	4a62      	ldr	r2, [pc, #392]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	ed93 6b00 	vldr	d6, [r3]
 8001674:	eeb0 1b46 	vmov.f64	d1, d6
 8001678:	eeb0 0b47 	vmov.f64	d0, d7
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7fe fffd 	bl	800067c <pidCtrl>
			et[i] = Kpid[i].error;
 8001682:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	4413      	add	r3, r2
 800168a:	3318      	adds	r3, #24
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	4853      	ldr	r0, [pc, #332]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	00c9      	lsls	r1, r1, #3
 8001696:	4401      	add	r1, r0
 8001698:	e9c1 2300 	strd	r2, r3, [r1]

			up[i] = Kp[i] * et[i];
 800169c:	4a57      	ldr	r2, [pc, #348]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	ed93 6b00 	vldr	d6, [r3]
 80016a8:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	ed93 7b00 	vldr	d7, [r3]
 80016b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016b8:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	ed83 7b00 	vstr	d7, [r3]
			ui[i] += Ki[i] * it[i] * 0.001;
 80016c4:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	ed93 6b00 	vldr	d6, [r3]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	ed93 5b00 	vldr	d5, [r3]
 80016dc:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	ed93 7b00 	vldr	d7, [r3]
 80016e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80016ec:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80017a8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80016f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016f8:	4a42      	ldr	r2, [pc, #264]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	ed83 7b00 	vstr	d7, [r3]
			ud[i] = Kd[i] * (et[i] - it[i]) / 0.001;
 8001704:	4a41      	ldr	r2, [pc, #260]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	ed93 6b00 	vldr	d6, [r3]
 8001710:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	ed93 5b00 	vldr	d5, [r3]
 800171c:	4a31      	ldr	r2, [pc, #196]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	ed93 7b00 	vldr	d7, [r3]
 8001728:	ee35 7b47 	vsub.f64	d7, d5, d7
 800172c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001730:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80017a8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001734:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001738:	4a35      	ldr	r2, [pc, #212]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	ed83 7b00 	vstr	d7, [r3]
			if (ui[i] > imax)	ui[i] = imax;
 8001744:	4a2f      	ldr	r2, [pc, #188]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	ed93 6b00 	vldr	d6, [r3]
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001752:	ed93 7b00 	vldr	d7, [r3]
 8001756:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	dd5b      	ble.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x350>
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	4827      	ldr	r0, [pc, #156]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	00c9      	lsls	r1, r1, #3
 800176c:	4401      	add	r1, r0
 800176e:	e9c1 2300 	strd	r2, r3, [r1]
 8001772:	e06c      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x386>
 8001774:	f3af 8000 	nop.w
 8001778:	7a743a64 	.word	0x7a743a64
 800177c:	3fc38dde 	.word	0x3fc38dde
 8001780:	66b1e5c1 	.word	0x66b1e5c1
 8001784:	3fc39064 	.word	0x3fc39064
 8001788:	3f2d3c79 	.word	0x3f2d3c79
 800178c:	3fc39570 	.word	0x3fc39570
 8001790:	b9dc2f40 	.word	0xb9dc2f40
 8001794:	3fc3d230 	.word	0x3fc3d230
 8001798:	4d12d84a 	.word	0x4d12d84a
 800179c:	400921fb 	.word	0x400921fb
 80017a0:	b6ae7d56 	.word	0xb6ae7d56
 80017a4:	3fb97f62 	.word	0x3fb97f62
 80017a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ac:	3f50624d 	.word	0x3f50624d
 80017b0:	40000c00 	.word	0x40000c00
 80017b4:	240006b0 	.word	0x240006b0
 80017b8:	240006c8 	.word	0x240006c8
 80017bc:	240006c0 	.word	0x240006c0
 80017c0:	240006d0 	.word	0x240006d0
 80017c4:	24000590 	.word	0x24000590
 80017c8:	240006a0 	.word	0x240006a0
 80017cc:	240002f8 	.word	0x240002f8
 80017d0:	24000690 	.word	0x24000690
 80017d4:	240001c8 	.word	0x240001c8
 80017d8:	24000344 	.word	0x24000344
 80017dc:	2400017c 	.word	0x2400017c
 80017e0:	24000630 	.word	0x24000630
 80017e4:	24000670 	.word	0x24000670
 80017e8:	24000000 	.word	0x24000000
 80017ec:	24000008 	.word	0x24000008
 80017f0:	24000010 	.word	0x24000010
 80017f4:	240005b0 	.word	0x240005b0
 80017f8:	240000b0 	.word	0x240000b0
 80017fc:	240005d0 	.word	0x240005d0
 8001800:	24000530 	.word	0x24000530
 8001804:	24000550 	.word	0x24000550
 8001808:	240005f0 	.word	0x240005f0
 800180c:	24000610 	.word	0x24000610
 8001810:	24000570 	.word	0x24000570
 8001814:	24000698 	.word	0x24000698
			else if (ui[i] < imax * -1)ui[i] = imax * -1;
 8001818:	4aa1      	ldr	r2, [pc, #644]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	ed93 6b00 	vldr	d6, [r3]
 8001824:	4b9f      	ldr	r3, [pc, #636]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001826:	ed93 7b00 	vldr	d7, [r3]
 800182a:	eeb1 7b47 	vneg.f64	d7, d7
 800182e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d50a      	bpl.n	800184e <HAL_TIM_PeriodElapsedCallback+0x386>
 8001838:	4b9a      	ldr	r3, [pc, #616]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800183a:	ed93 7b00 	vldr	d7, [r3]
 800183e:	eeb1 7b47 	vneg.f64	d7, d7
 8001842:	4a97      	ldr	r2, [pc, #604]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	ed83 7b00 	vstr	d7, [r3]
			ut[i] = up[i] + ui[i] + ud[i];
 800184e:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	ed93 6b00 	vldr	d6, [r3]
 800185a:	4a91      	ldr	r2, [pc, #580]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	ed93 7b00 	vldr	d7, [r3]
 8001866:	ee36 6b07 	vadd.f64	d6, d6, d7
 800186a:	4a90      	ldr	r2, [pc, #576]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	ed93 7b00 	vldr	d7, [r3]
 8001876:	ee36 7b07 	vadd.f64	d7, d6, d7
 800187a:	4a8d      	ldr	r2, [pc, #564]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	ed83 7b00 	vstr	d7, [r3]
			ut[i] > 0 ? (pulse[i] = ut[i] * 3200) : (pulse[i] = ut[i] * -3200);
 8001886:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	ed93 7b00 	vldr	d7, [r3]
 8001892:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189a:	dd10      	ble.n	80018be <HAL_TIM_PeriodElapsedCallback+0x3f6>
 800189c:	4a84      	ldr	r2, [pc, #528]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	ed93 7b00 	vldr	d7, [r3]
 80018a8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8001a90 <HAL_TIM_PeriodElapsedCallback+0x5c8>
 80018ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018b0:	4a80      	ldr	r2, [pc, #512]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	ed83 7b00 	vstr	d7, [r3]
 80018bc:	e00f      	b.n	80018de <HAL_TIM_PeriodElapsedCallback+0x416>
 80018be:	4a7c      	ldr	r2, [pc, #496]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	ed93 7b00 	vldr	d7, [r3]
 80018ca:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001a98 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 80018ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018d2:	4a78      	ldr	r2, [pc, #480]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	ed83 7b00 	vstr	d7, [r3]
			if(pulse[i] > 3200) pulse[i] = 3200;
 80018de:	4a75      	ldr	r2, [pc, #468]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	ed93 7b00 	vldr	d7, [r3]
 80018ea:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001a90 <HAL_TIM_PeriodElapsedCallback+0x5c8>
 80018ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	dd08      	ble.n	800190a <HAL_TIM_PeriodElapsedCallback+0x442>
 80018f8:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	18d1      	adds	r1, r2, r3
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001906:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 4; i++) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b03      	cmp	r3, #3
 8001914:	f77f ae6d 	ble.w	80015f2 <HAL_TIM_PeriodElapsedCallback+0x12a>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pulse[0]);
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800191a:	ed93 7b00 	vldr	d7, [r3]
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001926:	ee17 2a90 	vmov	r2, s15
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pulse[1]);
 800192c:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800192e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001932:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800193a:	ee17 2a90 	vmov	r2, s15
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, pulse[2]);
 8001940:	4b5c      	ldr	r3, [pc, #368]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001942:	ed93 7b04 	vldr	d7, [r3, #16]
 8001946:	4b5e      	ldr	r3, [pc, #376]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800194e:	ee17 2a90 	vmov	r2, s15
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse[3]);
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001956:	ed93 7b06 	vldr	d7, [r3, #24]
 800195a:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001962:	ee17 2a90 	vmov	r2, s15
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196e:	4855      	ldr	r0, [pc, #340]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001970:	f006 ff02 	bl	8008778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197a:	4852      	ldr	r0, [pc, #328]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800197c:	f006 fefc 	bl	8008778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001986:	4850      	ldr	r0, [pc, #320]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001988:	f006 fef6 	bl	8008778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2140      	movs	r1, #64	; 0x40
 8001990:	484d      	ldr	r0, [pc, #308]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001992:	f006 fef1 	bl	8008778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800199c:	484a      	ldr	r0, [pc, #296]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800199e:	f006 feeb 	bl	8008778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a8:	4847      	ldr	r0, [pc, #284]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80019aa:	f006 fee5 	bl	8008778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b4:	4844      	ldr	r0, [pc, #272]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80019b6:	f006 fedf 	bl	8008778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	4842      	ldr	r0, [pc, #264]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80019c0:	f006 feda 	bl	8008778 <HAL_GPIO_WritePin>

		if (ut[0] > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80019c6:	ed93 7b00 	vldr	d7, [r3]
 80019ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	dd06      	ble.n	80019e2 <HAL_TIM_PeriodElapsedCallback+0x51a>
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019da:	483a      	ldr	r0, [pc, #232]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80019dc:	f006 fecc 	bl	8008778 <HAL_GPIO_WritePin>
 80019e0:	e00d      	b.n	80019fe <HAL_TIM_PeriodElapsedCallback+0x536>
		else if (ut[0] < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80019e4:	ed93 7b00 	vldr	d7, [r3]
 80019e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	d505      	bpl.n	80019fe <HAL_TIM_PeriodElapsedCallback+0x536>
 80019f2:	2201      	movs	r2, #1
 80019f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019f8:	4832      	ldr	r0, [pc, #200]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80019fa:	f006 febd 	bl	8008778 <HAL_GPIO_WritePin>
		if (ut[1] > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a00:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	dd06      	ble.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0x554>
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a14:	482c      	ldr	r0, [pc, #176]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001a16:	f006 feaf 	bl	8008778 <HAL_GPIO_WritePin>
 8001a1a:	e00c      	b.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x56e>
		else if (ut[1] < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a1e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a22:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d504      	bpl.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x56e>
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2140      	movs	r1, #64	; 0x40
 8001a30:	4825      	ldr	r0, [pc, #148]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001a32:	f006 fea1 	bl	8008778 <HAL_GPIO_WritePin>
		if (ut[2] > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a38:	ed93 7b04 	vldr	d7, [r3, #16]
 8001a3c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a44:	dd06      	ble.n	8001a54 <HAL_TIM_PeriodElapsedCallback+0x58c>
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4c:	481e      	ldr	r0, [pc, #120]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001a4e:	f006 fe93 	bl	8008778 <HAL_GPIO_WritePin>
 8001a52:	e00d      	b.n	8001a70 <HAL_TIM_PeriodElapsedCallback+0x5a8>
		else if (ut[2] < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a56:	ed93 7b04 	vldr	d7, [r3, #16]
 8001a5a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	d505      	bpl.n	8001a70 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a6a:	4817      	ldr	r0, [pc, #92]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001a6c:	f006 fe84 	bl	8008778 <HAL_GPIO_WritePin>
		if (ut[3] > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a72:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	dd25      	ble.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x604>
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a86:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001a88:	f006 fe76 	bl	8008778 <HAL_GPIO_WritePin>
 8001a8c:	e02b      	b.n	8001ae6 <HAL_TIM_PeriodElapsedCallback+0x61e>
 8001a8e:	bf00      	nop
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40a90000 	.word	0x40a90000
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	c0a90000 	.word	0xc0a90000
 8001aa0:	24000550 	.word	0x24000550
 8001aa4:	24000698 	.word	0x24000698
 8001aa8:	24000530 	.word	0x24000530
 8001aac:	24000570 	.word	0x24000570
 8001ab0:	24000510 	.word	0x24000510
 8001ab4:	24000650 	.word	0x24000650
 8001ab8:	40a90000 	.word	0x40a90000
 8001abc:	24000260 	.word	0x24000260
 8001ac0:	240002ac 	.word	0x240002ac
 8001ac4:	58020400 	.word	0x58020400
 8001ac8:	58021000 	.word	0x58021000
		else if (ut[3] < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001ace:	ed93 7b06 	vldr	d7, [r3, #24]
 8001ad2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	d504      	bpl.n	8001ae6 <HAL_TIM_PeriodElapsedCallback+0x61e>
 8001adc:	2201      	movs	r2, #1
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	4829      	ldr	r0, [pc, #164]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001ae2:	f006 fe49 	bl	8008778 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( PV[0] + PV[1] + PV[2] + PV[3] );
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001ae8:	ed93 6b00 	vldr	d6, [r3]
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001aee:	ed93 7b02 	vldr	d7, [r3, #8]
 8001af2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001af8:	ed93 7b04 	vldr	d7, [r3, #16]
 8001afc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b02:	ed93 7b06 	vldr	d7, [r3, #24]
 8001b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b0a:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001b0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001b14:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( PV[0] - PV[1] + PV[2] - PV[3] );
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b1a:	ed93 6b00 	vldr	d6, [r3]
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b20:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b2a:	ed93 7b04 	vldr	d7, [r3, #16]
 8001b2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b34:	ed93 7b06 	vldr	d7, [r3, #24]
 8001b38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b3c:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001b40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b46:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( PV[0] - PV[1] - PV[2] + PV[3] );
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b4c:	ed93 6b00 	vldr	d6, [r3]
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b52:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b5c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001b60:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b66:	ed93 7b06 	vldr	d7, [r3, #24]
 8001b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b6e:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001b72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b78:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	24000510 	.word	0x24000510
 8001b88:	58021000 	.word	0x58021000
 8001b8c:	240005b0 	.word	0x240005b0
 8001b90:	240006e0 	.word	0x240006e0
 8001b94:	240006d8 	.word	0x240006d8
 8001b98:	240006e8 	.word	0x240006e8

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>

08001ba6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <_ZN3ros3MsgC1Ev+0x1c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	0800ef24 	.word	0x0800ef24

08001be8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
      data()
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ffe8 	bl	8001bc8 <_ZN3ros3MsgC1Ev>
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ffcf 	bl	8001ba6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	0800ef0c 	.word	0x0800ef0c

08001c18 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b2ca      	uxtb	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0a19      	lsrs	r1, r3, #8
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	b2ca      	uxtb	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	0c19      	lsrs	r1, r3, #16
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3302      	adds	r3, #2
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0e19      	lsrs	r1, r3, #24
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3303      	adds	r3, #3
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6899      	ldr	r1, [r3, #8]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0a19      	lsrs	r1, r3, #8
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b2ca      	uxtb	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	0c19      	lsrs	r1, r3, #16
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0e19      	lsrs	r1, r3, #24
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3303      	adds	r3, #3
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b2ca      	uxtb	r2, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cba:	68fb      	ldr	r3, [r7, #12]
    }
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	440b      	add	r3, r1
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3302      	adds	r3, #2
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	440b      	add	r3, r1
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3303      	adds	r3, #3
 8001d18:	6839      	ldr	r1, [r7, #0]
 8001d1a:	440b      	add	r3, r1
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	061b      	lsls	r3, r3, #24
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3301      	adds	r3, #1
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3302      	adds	r3, #2
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	440b      	add	r3, r1
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3303      	adds	r3, #3
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	440b      	add	r3, r1
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	061b      	lsls	r3, r3, #24
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d82:	68fb      	ldr	r3, [r7, #12]
    }
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	0800ec7c 	.word	0x0800ec7c

08001dac <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	0800ec90 	.word	0x0800ec90

08001dc8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fef8 	bl	8001bc8 <_ZN3ros3MsgC1Ev>
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	809a      	strh	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
    {
    }
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	0800eef4 	.word	0x0800eef4
 8001e0c:	0800ecb4 	.word	0x0800ecb4

08001e10 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8899      	ldrh	r1, [r3, #4]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	b2ca      	uxtb	r2, r1
 8001e2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	889b      	ldrh	r3, [r3, #4]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	b299      	uxth	r1, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	3301      	adds	r3, #1
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2ca      	uxtb	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3302      	adds	r3, #2
 8001e44:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fa60 	bl	8000310 <strlen>
 8001e50:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	69b9      	ldr	r1, [r7, #24]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 fd5c 	bl	8003918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3304      	adds	r3, #4
 8001e64:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	18d0      	adds	r0, r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4619      	mov	r1, r3
 8001e74:	f00c fd5e 	bl	800e934 <memcpy>
      offset += length_topic_name;
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fa43 	bl	8000310 <strlen>
 8001e8a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fd3f 	bl	8003918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	18d0      	adds	r0, r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f00c fd41 	bl	800e934 <memcpy>
      offset += length_message_type;
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fa26 	bl	8000310 <strlen>
 8001ec4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	6939      	ldr	r1, [r7, #16]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f001 fd22 	bl	8003918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	18d0      	adds	r0, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f00c fd24 	bl	800e934 <memcpy>
      offset += length_md5sum;
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	0a19      	lsrs	r1, r3, #8
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0c19      	lsrs	r1, r3, #16
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	b2ca      	uxtb	r2, r1
 8001f24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0e19      	lsrs	r1, r3, #24
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3303      	adds	r3, #3
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	b2ca      	uxtb	r2, r1
 8001f34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	61fb      	str	r3, [r7, #28]
      return offset;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
    }
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b08a      	sub	sp, #40	; 0x28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	889b      	ldrh	r3, [r3, #4]
 8001f66:	b21a      	sxth	r2, r3
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	440b      	add	r3, r1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	3302      	adds	r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	441a      	add	r2, r3
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 fcde 	bl	8003954 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d20c      	bcs.n	8001fc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	441a      	add	r2, r3
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	440b      	add	r3, r1
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	e7ec      	b.n	8001fa2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	441a      	add	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	4413      	add	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	441a      	add	r2, r3
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 fcab 	bl	8003954 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	3304      	adds	r3, #4
 8002002:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	6a3a      	ldr	r2, [r7, #32]
 8002010:	429a      	cmp	r2, r3
 8002012:	d20c      	bcs.n	800202e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	441a      	add	r2, r3
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	3b01      	subs	r3, #1
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	440b      	add	r3, r1
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	3301      	adds	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
 800202c:	e7ec      	b.n	8002008 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	3b01      	subs	r3, #1
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	3b01      	subs	r3, #1
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	441a      	add	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	441a      	add	r2, r3
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f001 fc78 	bl	8003954 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	3304      	adds	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	429a      	cmp	r2, r3
 8002078:	d20c      	bcs.n	8002094 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	441a      	add	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3b01      	subs	r3, #1
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	440b      	add	r3, r1
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e7ec      	b.n	800206e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	3b01      	subs	r3, #1
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	441a      	add	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	440a      	add	r2, r1
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	3301      	adds	r3, #1
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	440b      	add	r3, r1
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	4313      	orrs	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3302      	adds	r3, #2
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	440b      	add	r3, r1
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	3303      	adds	r3, #3
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	440b      	add	r3, r1
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	3304      	adds	r3, #4
 800210a:	61bb      	str	r3, [r7, #24]
     return offset;
 800210c:	69bb      	ldr	r3, [r7, #24]
    }
 800210e:	4618      	mov	r0, r3
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	0800ecb8 	.word	0x0800ecb8

08002134 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	0800ecd4 	.word	0x0800ecd4

08002150 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fd34 	bl	8001bc8 <_ZN3ros3MsgC1Ev>
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	711a      	strb	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002170:	609a      	str	r2, [r3, #8]
    {
    }
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	0800eedc 	.word	0x0800eedc
 8002180:	0800ecb4 	.word	0x0800ecb4

08002184 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	4413      	add	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	7912      	ldrb	r2, [r2, #4]
 800219c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f8b1 	bl	8000310 <strlen>
 80021ae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	4413      	add	r3, r2
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 fbad 	bl	8003918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3304      	adds	r3, #4
 80021c2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	18d0      	adds	r0, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f00c fbaf 	bl	800e934 <memcpy>
      offset += length_msg;
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80021de:	68fb      	ldr	r3, [r7, #12]
    }
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	3301      	adds	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	441a      	add	r2, r3
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fb9d 	bl	8003954 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	3304      	adds	r3, #4
 800221e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4413      	add	r3, r2
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d20c      	bcs.n	800224a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	441a      	add	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3b01      	subs	r3, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	440b      	add	r3, r1
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e7ec      	b.n	8002224 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	3b01      	subs	r3, #1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	3b01      	subs	r3, #1
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
     return offset;
 800226e:	693b      	ldr	r3, [r7, #16]
    }
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	0800ecf8 	.word	0x0800ecf8

08002294 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	0800ed0c 	.word	0x0800ed0c

080022b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc84 	bl	8001bc8 <_ZN3ros3MsgC1Ev>
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	0800eec4 	.word	0x0800eec4

080022f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	b2ca      	uxtb	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0a19      	lsrs	r1, r3, #8
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3301      	adds	r3, #1
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4413      	add	r3, r2
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0c19      	lsrs	r1, r3, #16
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3302      	adds	r3, #2
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	0e19      	lsrs	r1, r3, #24
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	3303      	adds	r3, #3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	b2ca      	uxtb	r2, r1
 8002348:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	3304      	adds	r3, #4
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	429a      	cmp	r2, r3
 800235c:	d22b      	bcs.n	80023b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4413      	add	r3, r2
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	0a19      	lsrs	r1, r3, #8
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	3301      	adds	r3, #1
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	0c19      	lsrs	r1, r3, #16
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3302      	adds	r3, #2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	0e19      	lsrs	r1, r3, #24
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3303      	adds	r3, #3
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	b2ca      	uxtb	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3304      	adds	r3, #4
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	3301      	adds	r3, #1
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	e7ce      	b.n	8002354 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	b2ca      	uxtb	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	0a19      	lsrs	r1, r3, #8
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	3301      	adds	r3, #1
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	b2ca      	uxtb	r2, r1
 80023d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	0c19      	lsrs	r1, r3, #16
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3302      	adds	r3, #2
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	b2ca      	uxtb	r2, r1
 80023e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	0e19      	lsrs	r1, r3, #24
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	3303      	adds	r3, #3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	b2ca      	uxtb	r2, r1
 80023f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	3304      	adds	r3, #4
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	429a      	cmp	r2, r3
 800240c:	d22b      	bcs.n	8002466 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	b2ca      	uxtb	r2, r1
 8002426:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	0a19      	lsrs	r1, r3, #8
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3301      	adds	r3, #1
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	0c19      	lsrs	r1, r3, #16
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3302      	adds	r3, #2
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	0e19      	lsrs	r1, r3, #24
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3303      	adds	r3, #3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	b2ca      	uxtb	r2, r1
 8002456:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3304      	adds	r3, #4
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	e7ce      	b.n	8002404 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69d9      	ldr	r1, [r3, #28]
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	0a19      	lsrs	r1, r3, #8
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3301      	adds	r3, #1
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	b2ca      	uxtb	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	0c19      	lsrs	r1, r3, #16
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	3302      	adds	r3, #2
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4413      	add	r3, r2
 8002494:	b2ca      	uxtb	r2, r1
 8002496:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	0e19      	lsrs	r1, r3, #24
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	3303      	adds	r3, #3
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	3304      	adds	r3, #4
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d228      	bcs.n	8002510 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fd ff20 	bl	8000310 <strlen>
 80024d0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	6979      	ldr	r1, [r7, #20]
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 fa1c 	bl	8003918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	3304      	adds	r3, #4
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	18d0      	adds	r0, r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4619      	mov	r1, r3
 80024fc:	f00c fa1a 	bl	800e934 <memcpy>
      offset += length_stringsi;
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4413      	add	r3, r2
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	3301      	adds	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e7d1      	b.n	80024b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002512:	4618      	mov	r0, r3
 8002514:	3728      	adds	r7, #40	; 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800251a:	b580      	push	{r7, lr}
 800251c:	b08e      	sub	sp, #56	; 0x38
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002534:	3301      	adds	r3, #1
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	4313      	orrs	r3, r2
 8002542:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	3302      	adds	r3, #2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	4313      	orrs	r3, r2
 8002554:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	3303      	adds	r3, #3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	4413      	add	r3, r2
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	6a3a      	ldr	r2, [r7, #32]
 8002564:	4313      	orrs	r3, r2
 8002566:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	3304      	adds	r3, #4
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	6a3a      	ldr	r2, [r7, #32]
 8002574:	429a      	cmp	r2, r3
 8002576:	d90a      	bls.n	800258e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f00c f9ec 	bl	800e960 <realloc>
 8002588:	4602      	mov	r2, r0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002594:	2300      	movs	r3, #0
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800259e:	429a      	cmp	r2, r3
 80025a0:	d236      	bcs.n	8002610 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	440a      	add	r2, r1
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	3301      	adds	r3, #1
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	440b      	add	r3, r1
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ca:	3302      	adds	r3, #2
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	440b      	add	r3, r1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	3303      	adds	r3, #3
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	440b      	add	r3, r1
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	3304      	adds	r3, #4
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	3301      	adds	r3, #1
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
 800260e:	e7c3      	b.n	8002598 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	3301      	adds	r3, #1
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	4313      	orrs	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	3302      	adds	r3, #2
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	4413      	add	r3, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	4313      	orrs	r3, r2
 800263c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	3303      	adds	r3, #3
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	4313      	orrs	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	3304      	adds	r3, #4
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	429a      	cmp	r2, r3
 800265e:	d90a      	bls.n	8002676 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f00c f978 	bl	800e960 <realloc>
 8002670:	4602      	mov	r2, r0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002686:	429a      	cmp	r2, r3
 8002688:	d236      	bcs.n	80026f8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002692:	6839      	ldr	r1, [r7, #0]
 8002694:	440a      	add	r2, r1
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a0:	3301      	adds	r3, #1
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	440b      	add	r3, r1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b2:	3302      	adds	r3, #2
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	440b      	add	r3, r1
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c4:	3303      	adds	r3, #3
 80026c6:	6839      	ldr	r1, [r7, #0]
 80026c8:	440b      	add	r3, r1
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	3304      	adds	r3, #4
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	3214      	adds	r2, #20
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	3301      	adds	r3, #1
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f6:	e7c3      	b.n	8002680 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	3301      	adds	r3, #1
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	3302      	adds	r3, #2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	3303      	adds	r3, #3
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	4413      	add	r3, r2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	3304      	adds	r3, #4
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	429a      	cmp	r2, r3
 8002746:	d90a      	bls.n	800275e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f00c f904 	bl	800e960 <realloc>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800276e:	429a      	cmp	r2, r3
 8002770:	d23f      	bcs.n	80027f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	441a      	add	r2, r3
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f001 f8e8 	bl	8003954 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	3304      	adds	r3, #4
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	441a      	add	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	440b      	add	r3, r1
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	3301      	adds	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	e7ec      	b.n	800278e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80027b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4413      	add	r3, r2
 80027ba:	3b01      	subs	r3, #1
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	3b01      	subs	r3, #1
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	441a      	add	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80027d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4413      	add	r3, r2
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	3220      	adds	r2, #32
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	3301      	adds	r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f0:	e7ba      	b.n	8002768 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80027f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80027f4:	4618      	mov	r0, r3
 80027f6:	3738      	adds	r7, #56	; 0x38
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	0800ee18 	.word	0x0800ee18

08002818 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	0800ed30 	.word	0x0800ed30

08002834 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	611a      	str	r2, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
  }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a42      	ldr	r2, [pc, #264]	; (8002998 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d068      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a40      	ldr	r2, [pc, #256]	; (800299c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d061      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3d      	ldr	r2, [pc, #244]	; (80029a0 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d05a      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a3b      	ldr	r2, [pc, #236]	; (80029a4 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d053      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a38      	ldr	r2, [pc, #224]	; (80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04c      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a36      	ldr	r2, [pc, #216]	; (80029ac <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d045      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a33      	ldr	r2, [pc, #204]	; (80029b0 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d03e      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a31      	ldr	r2, [pc, #196]	; (80029b4 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d037      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2e      	ldr	r2, [pc, #184]	; (80029b8 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d030      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d029      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01b      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a24      	ldr	r2, [pc, #144]	; (80029c8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d014      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a22      	ldr	r2, [pc, #136]	; (80029cc <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d006      	beq.n	8002964 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d109      	bne.n	8002978 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002976:	e008      	b.n	800298a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40020010 	.word	0x40020010
 800299c:	40020028 	.word	0x40020028
 80029a0:	40020040 	.word	0x40020040
 80029a4:	40020058 	.word	0x40020058
 80029a8:	40020070 	.word	0x40020070
 80029ac:	40020088 	.word	0x40020088
 80029b0:	400200a0 	.word	0x400200a0
 80029b4:	400200b8 	.word	0x400200b8
 80029b8:	40020410 	.word	0x40020410
 80029bc:	40020428 	.word	0x40020428
 80029c0:	40020440 	.word	0x40020440
 80029c4:	40020458 	.word	0x40020458
 80029c8:	40020470 	.word	0x40020470
 80029cc:	40020488 	.word	0x40020488
 80029d0:	400204a0 	.word	0x400204a0
 80029d4:	400204b8 	.word	0x400204b8

080029d8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <_ZN13STM32HardwareC1Ev+0x34>)
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	24000390 	.word	0x24000390

08002a10 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f804 	bl	8002a26 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f009 fefc 	bl	800c838 <HAL_UART_Receive_DMA>
    }
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff0d 	bl	800287c <_ZN13STM32Hardware10getRdmaIndEv>
 8002a62:	4603      	mov	r3, r0
 8002a64:	429c      	cmp	r4, r3
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d012      	beq.n	8002a98 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002a98:	68fb      	ldr	r3, [r7, #12]
    }
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
	...

08002aa4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d108      	bne.n	8002aca <_ZN13STM32Hardware5flushEv+0x26>
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <_ZN13STM32Hardware5flushEv+0x26>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <_ZN13STM32Hardware5flushEv+0x28>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d03f      	beq.n	8002b50 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d031      	beq.n	8002b4a <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d20a      	bcs.n	8002b0c <_ZN13STM32Hardware5flushEv+0x68>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	e006      	b.n	8002b1a <_ZN13STM32Hardware5flushEv+0x76>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	89fa      	ldrh	r2, [r7, #14]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f009 fdef 	bl	800c714 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002b4a:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	240006b8 	.word	0x240006b8

08002b5c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b72:	bfa8      	it	ge
 8002b74:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b78:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b80:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	bf28      	it	cs
 8002b8a:	4613      	movcs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00b fec7 	bl	800e934 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d00b      	beq.n	8002bda <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	18d1      	adds	r1, r2, r3
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f00b fead 	bl	800e934 <memcpy>
      }

      flush();
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff ff62 	bl	8002aa4 <_ZN13STM32Hardware5flushEv>
    }
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	f002 f9da 	bl	8004fa8 <HAL_GetTick>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe ffdc 	bl	8001bc8 <_ZN3ros3MsgC1Ev>
 8002c10:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	0800ee80 	.word	0x0800ee80

08002c50 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c50:	b480      	push	{r7}
 8002c52:	b08b      	sub	sp, #44	; 0x2c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c64:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	4401      	add	r1, r0
 8002c72:	b2d3      	uxtb	r3, r2
 8002c74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002c76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	0a02      	lsrs	r2, r0, #8
 8002c84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c88:	0a0b      	lsrs	r3, r1, #8
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	3101      	adds	r1, #1
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	4401      	add	r1, r0
 8002c92:	b2d3      	uxtb	r3, r2
 8002c94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002c96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	0c02      	lsrs	r2, r0, #16
 8002ca4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ca8:	0c0b      	lsrs	r3, r1, #16
 8002caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cac:	3102      	adds	r1, #2
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	4401      	add	r1, r0
 8002cb2:	b2d3      	uxtb	r3, r2
 8002cb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002cb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	0e02      	lsrs	r2, r0, #24
 8002cc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cc8:	0e0b      	lsrs	r3, r1, #24
 8002cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ccc:	3103      	adds	r1, #3
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	4401      	add	r1, r0
 8002cd2:	b2d3      	uxtb	r3, r2
 8002cd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002cd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	000a      	movs	r2, r1
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce8:	3104      	adds	r1, #4
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	4401      	add	r1, r0
 8002cee:	b2d3      	uxtb	r3, r2
 8002cf0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	0a0a      	lsrs	r2, r1, #8
 8002d00:	2300      	movs	r3, #0
 8002d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d04:	3105      	adds	r1, #5
 8002d06:	6838      	ldr	r0, [r7, #0]
 8002d08:	4401      	add	r1, r0
 8002d0a:	b2d3      	uxtb	r3, r2
 8002d0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002d0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	0c0a      	lsrs	r2, r1, #16
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d20:	3106      	adds	r1, #6
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	4401      	add	r1, r0
 8002d26:	b2d3      	uxtb	r3, r2
 8002d28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002d2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	0e0a      	lsrs	r2, r1, #24
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3c:	3107      	adds	r1, #7
 8002d3e:	6838      	ldr	r0, [r7, #0]
 8002d40:	4401      	add	r1, r0
 8002d42:	b2d3      	uxtb	r3, r2
 8002d44:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	3308      	adds	r3, #8
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d52:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002d56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5c:	6838      	ldr	r0, [r7, #0]
 8002d5e:	4401      	add	r1, r0
 8002d60:	b2d3      	uxtb	r3, r2
 8002d62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002d64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	0a02      	lsrs	r2, r0, #8
 8002d72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d76:	0a0b      	lsrs	r3, r1, #8
 8002d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7a:	3101      	adds	r1, #1
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	4401      	add	r1, r0
 8002d80:	b2d3      	uxtb	r3, r2
 8002d82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002d84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	0c02      	lsrs	r2, r0, #16
 8002d92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d96:	0c0b      	lsrs	r3, r1, #16
 8002d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d9a:	3102      	adds	r1, #2
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	4401      	add	r1, r0
 8002da0:	b2d3      	uxtb	r3, r2
 8002da2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002da4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	0e02      	lsrs	r2, r0, #24
 8002db2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002db6:	0e0b      	lsrs	r3, r1, #24
 8002db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dba:	3103      	adds	r1, #3
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	4401      	add	r1, r0
 8002dc0:	b2d3      	uxtb	r3, r2
 8002dc2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002dc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	000a      	movs	r2, r1
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd6:	3104      	adds	r1, #4
 8002dd8:	6838      	ldr	r0, [r7, #0]
 8002dda:	4401      	add	r1, r0
 8002ddc:	b2d3      	uxtb	r3, r2
 8002dde:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002de0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	0a0a      	lsrs	r2, r1, #8
 8002dee:	2300      	movs	r3, #0
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	3105      	adds	r1, #5
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	4401      	add	r1, r0
 8002df8:	b2d3      	uxtb	r3, r2
 8002dfa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002dfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	0c0a      	lsrs	r2, r1, #16
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0e:	3106      	adds	r1, #6
 8002e10:	6838      	ldr	r0, [r7, #0]
 8002e12:	4401      	add	r1, r0
 8002e14:	b2d3      	uxtb	r3, r2
 8002e16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002e18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	0e0a      	lsrs	r2, r1, #24
 8002e26:	2300      	movs	r3, #0
 8002e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2a:	3107      	adds	r1, #7
 8002e2c:	6838      	ldr	r0, [r7, #0]
 8002e2e:	4401      	add	r1, r0
 8002e30:	b2d3      	uxtb	r3, r2
 8002e32:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	3308      	adds	r3, #8
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e40:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e4a:	6838      	ldr	r0, [r7, #0]
 8002e4c:	4401      	add	r1, r0
 8002e4e:	b2d3      	uxtb	r3, r2
 8002e50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	0a02      	lsrs	r2, r0, #8
 8002e60:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e64:	0a0b      	lsrs	r3, r1, #8
 8002e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e68:	3101      	adds	r1, #1
 8002e6a:	6838      	ldr	r0, [r7, #0]
 8002e6c:	4401      	add	r1, r0
 8002e6e:	b2d3      	uxtb	r3, r2
 8002e70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	0c02      	lsrs	r2, r0, #16
 8002e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e84:	0c0b      	lsrs	r3, r1, #16
 8002e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e88:	3102      	adds	r1, #2
 8002e8a:	6838      	ldr	r0, [r7, #0]
 8002e8c:	4401      	add	r1, r0
 8002e8e:	b2d3      	uxtb	r3, r2
 8002e90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	0e02      	lsrs	r2, r0, #24
 8002ea0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ea4:	0e0b      	lsrs	r3, r1, #24
 8002ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea8:	3103      	adds	r1, #3
 8002eaa:	6838      	ldr	r0, [r7, #0]
 8002eac:	4401      	add	r1, r0
 8002eae:	b2d3      	uxtb	r3, r2
 8002eb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	000a      	movs	r2, r1
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec4:	3104      	adds	r1, #4
 8002ec6:	6838      	ldr	r0, [r7, #0]
 8002ec8:	4401      	add	r1, r0
 8002eca:	b2d3      	uxtb	r3, r2
 8002ecc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	0a0a      	lsrs	r2, r1, #8
 8002edc:	2300      	movs	r3, #0
 8002ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee0:	3105      	adds	r1, #5
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	4401      	add	r1, r0
 8002ee6:	b2d3      	uxtb	r3, r2
 8002ee8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002eea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	0c0a      	lsrs	r2, r1, #16
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efc:	3106      	adds	r1, #6
 8002efe:	6838      	ldr	r0, [r7, #0]
 8002f00:	4401      	add	r1, r0
 8002f02:	b2d3      	uxtb	r3, r2
 8002f04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	0e0a      	lsrs	r2, r1, #24
 8002f14:	2300      	movs	r3, #0
 8002f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f18:	3107      	adds	r1, #7
 8002f1a:	6838      	ldr	r0, [r7, #0]
 8002f1c:	4401      	add	r1, r0
 8002f1e:	b2d3      	uxtb	r3, r2
 8002f20:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	3308      	adds	r3, #8
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	372c      	adds	r7, #44	; 0x2c
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f36:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f3a:	b0eb      	sub	sp, #428	; 0x1ac
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002f42:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f58:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f5c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	461c      	mov	r4, r3
 8002f6e:	4615      	mov	r5, r2
 8002f70:	ea40 0804 	orr.w	r8, r0, r4
 8002f74:	ea41 0905 	orr.w	r9, r1, r5
 8002f78:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f7c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2200      	movs	r2, #0
 8002f92:	469a      	mov	sl, r3
 8002f94:	4693      	mov	fp, r2
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002fa2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002fa6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002faa:	ea40 0402 	orr.w	r4, r0, r2
 8002fae:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fb8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002fbc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fc0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002fda:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002fea:	464c      	mov	r4, r9
 8002fec:	0423      	lsls	r3, r4, #16
 8002fee:	4644      	mov	r4, r8
 8002ff0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ff4:	4644      	mov	r4, r8
 8002ff6:	0422      	lsls	r2, r4, #16
 8002ff8:	ea40 0402 	orr.w	r4, r0, r2
 8002ffc:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003000:	430b      	orrs	r3, r1
 8003002:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003006:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800300a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800300e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003012:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003016:	1cda      	adds	r2, r3, #3
 8003018:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003028:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800302c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003030:	4623      	mov	r3, r4
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003038:	4623      	mov	r3, r4
 800303a:	061b      	lsls	r3, r3, #24
 800303c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003040:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003044:	4623      	mov	r3, r4
 8003046:	4303      	orrs	r3, r0
 8003048:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800304c:	462b      	mov	r3, r5
 800304e:	430b      	orrs	r3, r1
 8003050:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003054:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003058:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800305c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003060:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003064:	1d1a      	adds	r2, r3, #4
 8003066:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2200      	movs	r2, #0
 8003072:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003076:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003086:	0023      	movs	r3, r4
 8003088:	2200      	movs	r2, #0
 800308a:	ea40 0402 	orr.w	r4, r0, r2
 800308e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003092:	430b      	orrs	r3, r1
 8003094:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003098:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800309c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80030a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030a8:	1d5a      	adds	r2, r3, #5
 80030aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030ae:	4413      	add	r3, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80030ba:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80030ca:	0223      	lsls	r3, r4, #8
 80030cc:	2200      	movs	r2, #0
 80030ce:	ea40 0402 	orr.w	r4, r0, r2
 80030d2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80030d6:	430b      	orrs	r3, r1
 80030d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80030dc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80030e0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030e4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030ec:	1d9a      	adds	r2, r3, #6
 80030ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030fe:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800310e:	0423      	lsls	r3, r4, #16
 8003110:	2200      	movs	r2, #0
 8003112:	ea40 0402 	orr.w	r4, r0, r2
 8003116:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800311a:	430b      	orrs	r3, r1
 800311c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003120:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003124:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003128:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800312c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003130:	1dda      	adds	r2, r3, #7
 8003132:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003142:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003152:	0623      	lsls	r3, r4, #24
 8003154:	2200      	movs	r2, #0
 8003156:	ea40 0402 	orr.w	r4, r0, r2
 800315a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800315e:	430b      	orrs	r3, r1
 8003160:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003164:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003168:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 800316c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003170:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003174:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003178:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800317c:	3308      	adds	r3, #8
 800317e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800318e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003192:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003196:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800319a:	4413      	add	r3, r2
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80031a6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80031aa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80031ae:	4623      	mov	r3, r4
 80031b0:	4303      	orrs	r3, r0
 80031b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031b6:	462b      	mov	r3, r5
 80031b8:	430b      	orrs	r3, r1
 80031ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031be:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80031c2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031c6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031d4:	4413      	add	r3, r2
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80031e0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80031f0:	464c      	mov	r4, r9
 80031f2:	0223      	lsls	r3, r4, #8
 80031f4:	4644      	mov	r4, r8
 80031f6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031fa:	4644      	mov	r4, r8
 80031fc:	0222      	lsls	r2, r4, #8
 80031fe:	ea40 0402 	orr.w	r4, r0, r2
 8003202:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003206:	430b      	orrs	r3, r1
 8003208:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800320c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003210:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003214:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003218:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800322e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800323e:	464c      	mov	r4, r9
 8003240:	0423      	lsls	r3, r4, #16
 8003242:	4644      	mov	r4, r8
 8003244:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003248:	4644      	mov	r4, r8
 800324a:	0422      	lsls	r2, r4, #16
 800324c:	ea40 0402 	orr.w	r4, r0, r2
 8003250:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003254:	430b      	orrs	r3, r1
 8003256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800325a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800325e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003262:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003266:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800326a:	1cda      	adds	r2, r3, #3
 800326c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800327c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003280:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003284:	4623      	mov	r3, r4
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800328c:	4623      	mov	r3, r4
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003294:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003298:	4623      	mov	r3, r4
 800329a:	4303      	orrs	r3, r0
 800329c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a0:	462b      	mov	r3, r5
 80032a2:	430b      	orrs	r3, r1
 80032a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032a8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80032ac:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032b0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032b8:	1d1a      	adds	r2, r3, #4
 80032ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032be:	4413      	add	r3, r2
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032ca:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80032da:	0023      	movs	r3, r4
 80032dc:	2200      	movs	r2, #0
 80032de:	ea40 0402 	orr.w	r4, r0, r2
 80032e2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80032e6:	430b      	orrs	r3, r1
 80032e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032ec:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80032f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032fc:	1d5a      	adds	r2, r3, #5
 80032fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2200      	movs	r2, #0
 800330a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800330e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800331e:	0223      	lsls	r3, r4, #8
 8003320:	2200      	movs	r2, #0
 8003322:	ea40 0402 	orr.w	r4, r0, r2
 8003326:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800332a:	430b      	orrs	r3, r1
 800332c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003330:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003334:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003338:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800333c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003340:	1d9a      	adds	r2, r3, #6
 8003342:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003346:	4413      	add	r3, r2
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003352:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003362:	0423      	lsls	r3, r4, #16
 8003364:	2200      	movs	r2, #0
 8003366:	ea40 0402 	orr.w	r4, r0, r2
 800336a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800336e:	430b      	orrs	r3, r1
 8003370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003374:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003378:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800337c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003380:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003384:	1dda      	adds	r2, r3, #7
 8003386:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2200      	movs	r2, #0
 8003392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80033a6:	0623      	lsls	r3, r4, #24
 80033a8:	2200      	movs	r2, #0
 80033aa:	ea40 0402 	orr.w	r4, r0, r2
 80033ae:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80033b2:	430b      	orrs	r3, r1
 80033b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033b8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80033bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80033c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80033c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80033cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033d0:	3308      	adds	r3, #8
 80033d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033e6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80033ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033fa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033fe:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003402:	4623      	mov	r3, r4
 8003404:	4303      	orrs	r3, r0
 8003406:	67bb      	str	r3, [r7, #120]	; 0x78
 8003408:	462b      	mov	r3, r5
 800340a:	430b      	orrs	r3, r1
 800340c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800340e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003412:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003416:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800341a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003424:	4413      	add	r3, r2
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2200      	movs	r2, #0
 800342c:	673b      	str	r3, [r7, #112]	; 0x70
 800342e:	677a      	str	r2, [r7, #116]	; 0x74
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800343c:	464c      	mov	r4, r9
 800343e:	0223      	lsls	r3, r4, #8
 8003440:	4644      	mov	r4, r8
 8003442:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003446:	4644      	mov	r4, r8
 8003448:	0222      	lsls	r2, r4, #8
 800344a:	ea40 0402 	orr.w	r4, r0, r2
 800344e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003450:	430b      	orrs	r3, r1
 8003452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003454:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003458:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800345c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003460:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003464:	1c9a      	adds	r2, r3, #2
 8003466:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2200      	movs	r2, #0
 8003472:	663b      	str	r3, [r7, #96]	; 0x60
 8003474:	667a      	str	r2, [r7, #100]	; 0x64
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003482:	464c      	mov	r4, r9
 8003484:	0423      	lsls	r3, r4, #16
 8003486:	4644      	mov	r4, r8
 8003488:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800348c:	4644      	mov	r4, r8
 800348e:	0422      	lsls	r2, r4, #16
 8003490:	ea40 0402 	orr.w	r4, r0, r2
 8003494:	65bc      	str	r4, [r7, #88]	; 0x58
 8003496:	430b      	orrs	r3, r1
 8003498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800349a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800349e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034aa:	1cda      	adds	r2, r3, #3
 80034ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034b0:	4413      	add	r3, r2
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2200      	movs	r2, #0
 80034b8:	653b      	str	r3, [r7, #80]	; 0x50
 80034ba:	657a      	str	r2, [r7, #84]	; 0x54
 80034bc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80034c0:	4623      	mov	r3, r4
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c6:	4623      	mov	r3, r4
 80034c8:	061b      	lsls	r3, r3, #24
 80034ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80034cc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80034d0:	4623      	mov	r3, r4
 80034d2:	4303      	orrs	r3, r0
 80034d4:	643b      	str	r3, [r7, #64]	; 0x40
 80034d6:	462b      	mov	r3, r5
 80034d8:	430b      	orrs	r3, r1
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
 80034dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80034e0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034ec:	1d1a      	adds	r2, r3, #4
 80034ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034f2:	4413      	add	r3, r2
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80034fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003508:	0023      	movs	r3, r4
 800350a:	2200      	movs	r2, #0
 800350c:	ea40 0402 	orr.w	r4, r0, r2
 8003510:	633c      	str	r4, [r7, #48]	; 0x30
 8003512:	430b      	orrs	r3, r1
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
 8003516:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800351a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800351e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003522:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003526:	1d5a      	adds	r2, r3, #5
 8003528:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800352c:	4413      	add	r3, r2
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2200      	movs	r2, #0
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
 8003536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003542:	0223      	lsls	r3, r4, #8
 8003544:	2200      	movs	r2, #0
 8003546:	ea40 0402 	orr.w	r4, r0, r2
 800354a:	623c      	str	r4, [r7, #32]
 800354c:	430b      	orrs	r3, r1
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003554:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003558:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800355c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003560:	3306      	adds	r3, #6
 8003562:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2200      	movs	r2, #0
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	61fa      	str	r2, [r7, #28]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	69bc      	ldr	r4, [r7, #24]
 800357c:	0423      	lsls	r3, r4, #16
 800357e:	2200      	movs	r2, #0
 8003580:	ea40 0402 	orr.w	r4, r0, r2
 8003584:	613c      	str	r4, [r7, #16]
 8003586:	430b      	orrs	r3, r1
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800358e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003592:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003596:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800359a:	3307      	adds	r3, #7
 800359c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80035a0:	4413      	add	r3, r2
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2200      	movs	r2, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	60fa      	str	r2, [r7, #12]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	68bc      	ldr	r4, [r7, #8]
 80035b6:	0623      	lsls	r3, r4, #24
 80035b8:	2200      	movs	r2, #0
 80035ba:	ea40 0402 	orr.w	r4, r0, r2
 80035be:	603c      	str	r4, [r7, #0]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80035c8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80035cc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80035d0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80035d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80035d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035dc:	3308      	adds	r3, #8
 80035de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80035e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80035e6:	4618      	mov	r0, r3
 80035e8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80035ec:	46bd      	mov	sp, r7
 80035ee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035f2:	4770      	bx	lr

080035f4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	0800ed54 	.word	0x0800ed54

08003610 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	0800ed6c 	.word	0x0800ed6c

0800362c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fac6 	bl	8001bc8 <_ZN3ros3MsgC1Ev>
 800363c:	4a08      	ldr	r2, [pc, #32]	; (8003660 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3308      	adds	r3, #8
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fada 	bl	8002c00 <_ZN13geometry_msgs7Vector3C1Ev>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3328      	adds	r3, #40	; 0x28
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fad5 	bl	8002c00 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	0800ee68 	.word	0x0800ee68

08003664 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 0008 	add.w	r0, r3, #8
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	4413      	add	r3, r2
 800367e:	4619      	mov	r1, r3
 8003680:	f7ff fae6 	bl	8002c50 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4413      	add	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7ff fad9 	bl	8002c50 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800369e:	4602      	mov	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80036a6:	68fb      	ldr	r3, [r7, #12]
    }
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f103 0008 	add.w	r0, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	f7ff fc33 	bl	8002f36 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4413      	add	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7ff fc26 	bl	8002f36 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
     return offset;
 80036f2:	68fb      	ldr	r3, [r7, #12]
    }
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	0800ed90 	.word	0x0800ed90

08003718 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	0800eda4 	.word	0x0800eda4

08003734 <_Z8callbackRKN13geometry_msgs5TwistE>:
		*speed = (double) enc
				/ (4 * resolution * reduction_ratio) * frequency;
}

void callback(const geometry_msgs::Twist &msg)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003742:	490a      	ldr	r1, [pc, #40]	; (800376c <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8003744:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800374e:	4908      	ldr	r1, [pc, #32]	; (8003770 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003750:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800375a:	4906      	ldr	r1, [pc, #24]	; (8003774 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 800375c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	240006c0 	.word	0x240006c0
 8003770:	240006c8 	.word	0x240006c8
 8003774:	240006d0 	.word	0x240006d0

08003778 <_Z13Error_Handlerv>:
ros::Publisher pub("/ins_vel", &insVel);
//	std_msgs

/* UART Communication */
void Error_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800377c:	b672      	cpsid	i
}
 800377e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003780:	e7fe      	b.n	8003780 <_Z13Error_Handlerv+0x8>
	...

08003784 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 800378a:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <_ZL20MX_USART10_UART_Initv+0xbc>)
 800378c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003794:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8003796:	4b29      	ldr	r3, [pc, #164]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 800379e:	2200      	movs	r2, #0
 80037a0:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037aa:	220c      	movs	r2, #12
 80037ac:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037bc:	2200      	movs	r2, #0
 80037be:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80037cc:	481b      	ldr	r0, [pc, #108]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037ce:	f008 ff15 	bl	800c5fc <HAL_UART_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 80037e2:	f7ff ffc9 	bl	8003778 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037e6:	2100      	movs	r1, #0
 80037e8:	4814      	ldr	r0, [pc, #80]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037ea:	f00a ff93 	bl	800e714 <HAL_UARTEx_SetTxFifoThreshold>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 80037fe:	f7ff ffbb 	bl	8003778 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003802:	2100      	movs	r1, #0
 8003804:	480d      	ldr	r0, [pc, #52]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003806:	f00a ffc3 	bl	800e790 <HAL_UARTEx_SetRxFifoThreshold>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 800381a:	f7ff ffad 	bl	8003778 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800381e:	4807      	ldr	r0, [pc, #28]	; (800383c <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003820:	f00a ff3f 	bl	800e6a2 <HAL_UARTEx_DisableFifoMode>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 8003834:	f7ff ffa0 	bl	8003778 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}
 800383c:	24000390 	.word	0x24000390
 8003840:	40011c00 	.word	0x40011c00

08003844 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <HAL_UART_ErrorCallback+0x5c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d120      	bne.n	8003896 <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8003854:	4913      	ldr	r1, [pc, #76]	; (80038a4 <HAL_UART_ErrorCallback+0x60>)
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8003862:	4911      	ldr	r1, [pc, #68]	; (80038a8 <HAL_UART_ErrorCallback+0x64>)
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_UART_ErrorCallback+0x68>)
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 800387e:	4808      	ldr	r0, [pc, #32]	; (80038a0 <HAL_UART_ErrorCallback+0x5c>)
 8003880:	f008 ff0c 	bl	800c69c <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003884:	f7ff ff7e 	bl	8003784 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 8003888:	4809      	ldr	r0, [pc, #36]	; (80038b0 <HAL_UART_ErrorCallback+0x6c>)
 800388a:	f000 f94d 	bl	8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800388e:	4603      	mov	r3, r0
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff f8bd 	bl	8002a10 <_ZN13STM32Hardware4initEv>
    }
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	24000390 	.word	0x24000390
 80038a4:	240006c0 	.word	0x240006c0
 80038a8:	240006c8 	.word	0x240006c8
 80038ac:	240006d0 	.word	0x240006d0
 80038b0:	24000738 	.word	0x24000738

080038b4 <HAL_UART_RxCpltCallback>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//    nh.getHardware()->flush();
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80038bc:	4805      	ldr	r0, [pc, #20]	; (80038d4 <HAL_UART_RxCpltCallback+0x20>)
 80038be:	f000 f933 	bl	8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff f8ae 	bl	8002a26 <_ZN13STM32Hardware10reset_rbufEv>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	24000738 	.word	0x24000738

080038d8 <setup>:
void setup(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
    nh.initNode();
 80038dc:	4806      	ldr	r0, [pc, #24]	; (80038f8 <setup+0x20>)
 80038de:	f000 f92f 	bl	8003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80038e2:	4906      	ldr	r1, [pc, #24]	; (80038fc <setup+0x24>)
 80038e4:	4804      	ldr	r0, [pc, #16]	; (80038f8 <setup+0x20>)
 80038e6:	f000 f948 	bl	8003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80038ea:	4905      	ldr	r1, [pc, #20]	; (8003900 <setup+0x28>)
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <setup+0x20>)
 80038ee:	f000 f96f 	bl	8003bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	24000738 	.word	0x24000738
 80038fc:	24001078 	.word	0x24001078
 8003900:	240010d8 	.word	0x240010d8

08003904 <loop>:
void loop(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <loop+0x10>)
 800390a:	f000 f991 	bl	8003c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	24000738 	.word	0x24000738

08003918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d80d      	bhi.n	8003948 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	fa22 f103 	lsr.w	r1, r2, r3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	b2ca      	uxtb	r2, r1
 800393e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e7ee      	b.n	8003926 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d811      	bhi.n	8003992 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6839      	ldr	r1, [r7, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	440a      	add	r2, r1
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	4611      	mov	r1, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	00d2      	lsls	r2, r2, #3
 8003980:	fa01 f202 	lsl.w	r2, r1, r2
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3301      	adds	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e7ea      	b.n	8003968 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	0800eeb0 	.word	0x0800eeb0

080039c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ffe8 	bl	80039a0 <_ZN3ros15NodeHandleBase_C1Ev>
 80039d0:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3304      	adds	r3, #4
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fffc 	bl	80029d8 <_ZN13STM32HardwareC1Ev>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fc5e 	bl	80022b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b18      	cmp	r3, #24
 80039fc:	d80b      	bhi.n	8003a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e7f0      	b.n	80039f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b18      	cmp	r3, #24
 8003a1e:	d80a      	bhi.n	8003a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a28:	2100      	movs	r1, #0
 8003a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3301      	adds	r3, #1
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e7f1      	b.n	8003a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a40:	d20a      	bcs.n	8003a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e7f0      	b.n	8003a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a62:	d20a      	bcs.n	8003a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	e7f0      	b.n	8003a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	0800ee54 	.word	0x0800ee54

08003ac0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	0800ee98 	.word	0x0800ee98

08003ae0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ffe5 	bl	8003ac0 <_ZN3ros11Subscriber_C1Ev>
 8003af6:	4a0b      	ldr	r2, [pc, #44]	; (8003b24 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3310      	adds	r3, #16
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fd93 	bl	800362c <_ZN13geometry_msgs5TwistC1Ev>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]
  };
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	0800ee3c 	.word	0x0800ee3c

08003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
  }
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe ff5f 	bl	8002a10 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b18      	cmp	r3, #24
 8003b8c:	dc19      	bgt.n	8003bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
        return true;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e004      	b.n	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e7e2      	b.n	8003b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003bc2:	2300      	movs	r3, #0
  }
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b18      	cmp	r3, #24
 8003be2:	dc1e      	bgt.n	8003c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d111      	bne.n	8003c1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	60da      	str	r2, [r3, #12]
        return true;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e004      	b.n	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e7dd      	b.n	8003bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003c22:	2300      	movs	r3, #0
  }
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe ffd3 	bl	8002be8 <_ZN13STM32Hardware4timeEv>
 8003c42:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d903      	bls.n	8003c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d903      	bls.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d014      	beq.n	8003cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe ffac 	bl	8002be8 <_ZN13STM32Hardware4timeEv>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf8c      	ite	hi
 8003ca0:	2301      	movhi	r3, #1
 8003ca2:	2300      	movls	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003caa:	f06f 0301 	mvn.w	r3, #1
 8003cae:	e194      	b.n	8003fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fec7 	bl	8002a48 <_ZN13STM32Hardware4readEv>
 8003cba:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f2c0 8174 	blt.w	8003fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cda:	2b07      	cmp	r3, #7
 8003cdc:	d11e      	bne.n	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003ce4:	1c59      	adds	r1, r3, #1
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	b2d1      	uxtb	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	460a      	mov	r2, r1
 8003cf6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1b4      	bne.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2208      	movs	r2, #8
 8003d16:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d1a:	e7af      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d128      	bne.n	8003d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2bff      	cmp	r3, #255	; 0xff
 8003d2a:	d10d      	bne.n	8003d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f103 0214 	add.w	r2, r3, #20
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003d46:	e799      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe ff4b 	bl	8002be8 <_ZN13STM32Hardware4timeEv>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	bf8c      	ite	hi
 8003d60:	2301      	movhi	r3, #1
 8003d62:	2300      	movls	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d088      	beq.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003d72:	f06f 0301 	mvn.w	r3, #1
 8003d76:	e130      	b.n	8003fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d118      	bne.n	8003db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2bfe      	cmp	r3, #254	; 0xfe
 8003d86:	d107      	bne.n	8003d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d96:	e771      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f47f af68 	bne.w	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f918 	bl	8003fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003db2:	e763      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d113      	bne.n	8003de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003de4:	e74a      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d110      	bne.n	8003e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e10:	e734      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d116      	bne.n	8003e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003e22:	425a      	negs	r2, r3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	bf58      	it	pl
 8003e2a:	4253      	negpl	r3, r2
 8003e2c:	2bff      	cmp	r3, #255	; 0xff
 8003e2e:	d107      	bne.n	8003e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e3e:	e71d      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e48:	e718      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d10f      	bne.n	8003e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003e72:	e703      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d117      	bne.n	8003eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	441a      	add	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2207      	movs	r2, #7
 8003e94:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f47f aeec 	bne.w	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003eac:	e6e6      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	f47f aee1 	bne.w	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003ec8:	425a      	negs	r2, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	bf58      	it	pl
 8003ed0:	4253      	negpl	r3, r2
 8003ed2:	2bff      	cmp	r3, #255	; 0xff
 8003ed4:	f47f aed2 	bne.w	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d110      	bne.n	8003f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f87d 	bl	8003fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f898 	bl	800401e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	e06a      	b.n	8003fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f0a:	2b0a      	cmp	r3, #10
 8003f0c:	d107      	bne.n	8003f1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f960 	bl	80041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003f1c:	e6ae      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f24:	2b06      	cmp	r3, #6
 8003f26:	d10e      	bne.n	8003f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7fe faef 	bl	800251a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003f44:	e69a      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f4c:	2b0b      	cmp	r3, #11
 8003f4e:	d104      	bne.n	8003f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003f58:	e690      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f60:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f43f ae84 	beq.w	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f7a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f84:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f8e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4798      	blx	r3
    while (true)
 8003faa:	e667      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003fac:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00f      	beq.n	8003fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d906      	bls.n	8003fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f809 	bl	8003fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003fd8:	2300      	movs	r3, #0
  }
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd fdfa 	bl	8001be8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f107 020c 	add.w	r2, r7, #12
 8003ffe:	210a      	movs	r1, #10
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
    rt_time = hardware_.time();
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fded 	bl	8002be8 <_ZN13STM32Hardware4timeEv>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004016:	bf00      	nop
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800401e:	b590      	push	{r4, r7, lr}
 8004020:	b08b      	sub	sp, #44	; 0x2c
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004026:	f107 030c 	add.w	r3, r7, #12
 800402a:	4618      	mov	r0, r3
 800402c:	f7fd fecc 	bl	8001dc8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	2b18      	cmp	r3, #24
 8004038:	dc63      	bgt.n	8004102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d056      	beq.n	80040fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	b29b      	uxth	r3, r3
 800405e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3308      	adds	r3, #8
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4608      	mov	r0, r1
 800409a:	4798      	blx	r3
 800409c:	4603      	mov	r3, r0
 800409e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4608      	mov	r0, r1
 80040c8:	4798      	blx	r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80040ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681c      	ldr	r4, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fbba 	bl	8002862 <_ZN3ros9Publisher15getEndpointTypeEv>
 80040ee:	4601      	mov	r1, r0
 80040f0:	f107 030c 	add.w	r3, r7, #12
 80040f4:	461a      	mov	r2, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	3301      	adds	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	e798      	b.n	8004034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b18      	cmp	r3, #24
 800410a:	dc5f      	bgt.n	80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d053      	beq.n	80041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004120:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	b29b      	uxth	r3, r3
 800412c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004146:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4608      	mov	r0, r1
 800415e:	4798      	blx	r3
 8004160:	4603      	mov	r3, r0
 8004162:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	f202 2222 	addw	r2, r2, #546	; 0x222
 800416c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4608      	mov	r0, r1
 8004184:	4798      	blx	r3
 8004186:	4603      	mov	r3, r0
 8004188:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800418a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800418e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681c      	ldr	r4, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800419e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3304      	adds	r3, #4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4608      	mov	r0, r1
 80041b6:	4798      	blx	r3
 80041b8:	4601      	mov	r1, r0
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	461a      	mov	r2, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	3301      	adds	r3, #1
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ca:	e79c      	b.n	8004106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80041d4:	bf00      	nop
 80041d6:	372c      	adds	r7, #44	; 0x2c
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80041e6:	f107 0308 	add.w	r3, r7, #8
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd fcfc 	bl	8001be8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fcf7 	bl	8002be8 <_ZN13STM32Hardware4timeEv>
 80041fa:	4602      	mov	r2, r0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd fd5b 	bl	8001cc8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4915      	ldr	r1, [pc, #84]	; (800426c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004218:	fba1 1303 	umull	r1, r3, r1, r3
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	4413      	add	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004222:	6939      	ldr	r1, [r7, #16]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004228:	fba3 0302 	umull	r0, r3, r3, r2
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004232:	fb00 f303 	mul.w	r3, r0, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	440b      	add	r3, r1
 8004240:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004242:	f107 0308 	add.w	r3, r7, #8
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8a6 	bl	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fcc7 	bl	8002be8 <_ZN13STM32Hardware4timeEv>
 800425a:	4602      	mov	r2, r0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	10624dd3 	.word	0x10624dd3
 8004270:	000f4240 	.word	0x000f4240

08004274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b63      	cmp	r3, #99	; 0x63
 8004284:	dd09      	ble.n	800429a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800428c:	f083 0301 	eor.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004296:	2300      	movs	r3, #0
 8004298:	e079      	b.n	800438e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80042a6:	3207      	adds	r2, #7
 80042a8:	4611      	mov	r1, r2
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
 80042ae:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	22ff      	movs	r2, #255	; 0xff
 80042b4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	22fe      	movs	r2, #254	; 0xfe
 80042bc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80042e6:	4413      	add	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	b21b      	sxth	r3, r3
 8004302:	121b      	asrs	r3, r3, #8
 8004304:	b21b      	sxth	r3, r3
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004312:	2305      	movs	r3, #5
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	3306      	adds	r3, #6
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	429a      	cmp	r2, r3
 800431e:	dc0d      	bgt.n	800433c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	4413      	add	r3, r2
 8004326:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	3301      	adds	r3, #1
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e7ec      	b.n	8004316 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3307      	adds	r3, #7
 8004340:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	425a      	negs	r2, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	bf58      	it	pl
 800434c:	4253      	negpl	r3, r2
 800434e:	b2da      	uxtb	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	6179      	str	r1, [r7, #20]
 8004356:	43d2      	mvns	r2, r2
 8004358:	b2d1      	uxtb	r1, r2
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	460a      	mov	r2, r1
 8004360:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436a:	dc0a      	bgt.n	8004382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1d18      	adds	r0, r3, #4
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4619      	mov	r1, r3
 800437a:	f7fe fbef 	bl	8002b5c <_ZN13STM32Hardware5writeEPhi>
      return l;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	e005      	b.n	800438e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004382:	4905      	ldr	r1, [pc, #20]	; (8004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f849 	bl	800441c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	0800edc8 	.word	0x0800edc8

0800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fc1c 	bl	8002be8 <_ZN13STM32Hardware4timeEv>
 80043b0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4915      	ldr	r1, [pc, #84]	; (8004410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80043ba:	fba1 1303 	umull	r1, r3, r1, r3
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	1e5a      	subs	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80043d2:	fba3 0302 	umull	r0, r3, r3, r2
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043dc:	fb00 f303 	mul.w	r3, r0, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	1aca      	subs	r2, r1, r3
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80043ec:	4413      	add	r3, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7fc f90e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	10624dd3 	.word	0x10624dd3
 8004414:	000f4240 	.word	0x000f4240
 8004418:	3b9aca00 	.word	0x3b9aca00

0800441c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	2103      	movs	r1, #3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f804 	bl	8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	460b      	mov	r3, r1
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004446:	f107 0314 	add.w	r3, r7, #20
 800444a:	4618      	mov	r0, r3
 800444c:	f7fd fe80 	bl	8002150 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f107 0214 	add.w	r2, r7, #20
 8004462:	2107      	movs	r1, #7
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	4798      	blx	r3
  }
 8004468:	bf00      	nop
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_Z41__static_initialization_and_destruction_0ii>:
	insVel.angular.z = rW;
	run_inter0 ++;
	pub.publish(&insVel);

	run_inter1 ++;
}
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d116      	bne.n	80044ae <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004486:	4293      	cmp	r3, r2
 8004488:	d111      	bne.n	80044ae <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist insVel;
 800448a:	480b      	ldr	r0, [pc, #44]	; (80044b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800448c:	f7ff f8ce 	bl	800362c <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004490:	480a      	ldr	r0, [pc, #40]	; (80044bc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004492:	f7ff fa95 	bl	80039c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8004496:	2301      	movs	r3, #1
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800449a:	490a      	ldr	r1, [pc, #40]	; (80044c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800449c:	480a      	ldr	r0, [pc, #40]	; (80044c8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800449e:	f7ff fb1f 	bl	8003ae0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("/ins_vel", &insVel);
 80044a2:	2300      	movs	r3, #0
 80044a4:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80044a6:	4909      	ldr	r1, [pc, #36]	; (80044cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80044a8:	4809      	ldr	r0, [pc, #36]	; (80044d0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80044aa:	f7fe f9c3 	bl	8002834 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	240006f0 	.word	0x240006f0
 80044bc:	24000738 	.word	0x24000738
 80044c0:	08003735 	.word	0x08003735
 80044c4:	0800ee04 	.word	0x0800ee04
 80044c8:	24001078 	.word	0x24001078
 80044cc:	0800ee0c 	.word	0x0800ee0c
 80044d0:	240010d8 	.word	0x240010d8

080044d4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3310      	adds	r3, #16
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff f8e3 	bl	80036b0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	3210      	adds	r2, #16
 80044f2:	4610      	mov	r0, r2
 80044f4:	4798      	blx	r3
  }
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3310      	adds	r3, #16
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f8ea 	bl	80036fc <_ZN13geometry_msgs5Twist7getTypeEv>
 8004528:	4603      	mov	r3, r0
  }
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3310      	adds	r3, #16
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff f8ea 	bl	8003718 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004544:	4603      	mov	r3, r0
  }
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
    return configured_;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_GLOBAL__sub_I_count>:
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
 800456c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004570:	2001      	movs	r0, #1
 8004572:	f7ff ff7d 	bl	8004470 <_Z41__static_initialization_and_destruction_0ii>
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <HAL_MspInit+0x3c>)
 8004580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004584:	4a0b      	ldr	r2, [pc, #44]	; (80045b4 <HAL_MspInit+0x3c>)
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_MspInit+0x3c>)
 8004590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	2005      	movs	r0, #5
 80045a2:	f000 fe0c 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80045a6:	2005      	movs	r0, #5
 80045a8:	f000 fe23 	bl	80051f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	58024400 	.word	0x58024400

080045b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c8:	d117      	bne.n	80045fa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ca:	4b1c      	ldr	r3, [pc, #112]	; (800463c <HAL_TIM_Base_MspInit+0x84>)
 80045cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045d0:	4a1a      	ldr	r2, [pc, #104]	; (800463c <HAL_TIM_Base_MspInit+0x84>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045da:	4b18      	ldr	r3, [pc, #96]	; (800463c <HAL_TIM_Base_MspInit+0x84>)
 80045dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2100      	movs	r1, #0
 80045ec:	201c      	movs	r0, #28
 80045ee:	f000 fde6 	bl	80051be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045f2:	201c      	movs	r0, #28
 80045f4:	f000 fdfd 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80045f8:	e01b      	b.n	8004632 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a10      	ldr	r2, [pc, #64]	; (8004640 <HAL_TIM_Base_MspInit+0x88>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d116      	bne.n	8004632 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_TIM_Base_MspInit+0x84>)
 8004606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <HAL_TIM_Base_MspInit+0x84>)
 800460c:	f043 0308 	orr.w	r3, r3, #8
 8004610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_TIM_Base_MspInit+0x84>)
 8004616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004622:	2200      	movs	r2, #0
 8004624:	2100      	movs	r1, #0
 8004626:	2032      	movs	r0, #50	; 0x32
 8004628:	f000 fdc9 	bl	80051be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800462c:	2032      	movs	r0, #50	; 0x32
 800462e:	f000 fde0 	bl	80051f2 <HAL_NVIC_EnableIRQ>
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	58024400 	.word	0x58024400
 8004640:	40000c00 	.word	0x40000c00

08004644 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b090      	sub	sp, #64	; 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	60da      	str	r2, [r3, #12]
 800465a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a69      	ldr	r2, [pc, #420]	; (8004808 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d12e      	bne.n	80046c4 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004666:	4b69      	ldr	r3, [pc, #420]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800466c:	4a67      	ldr	r2, [pc, #412]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004676:	4b65      	ldr	r3, [pc, #404]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004684:	4b61      	ldr	r3, [pc, #388]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800468a:	4a60      	ldr	r2, [pc, #384]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004694:	4b5d      	ldr	r3, [pc, #372]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046a2:	23c0      	movs	r3, #192	; 0xc0
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a6:	2302      	movs	r3, #2
 80046a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ae:	2300      	movs	r3, #0
 80046b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046b2:	2302      	movs	r3, #2
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ba:	4619      	mov	r1, r3
 80046bc:	4854      	ldr	r0, [pc, #336]	; (8004810 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80046be:	f003 fdb1 	bl	8008224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80046c2:	e09c      	b.n	80047fe <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d12f      	bne.n	800472e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046ce:	4b4f      	ldr	r3, [pc, #316]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d4:	4a4d      	ldr	r2, [pc, #308]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046d6:	f043 0304 	orr.w	r3, r3, #4
 80046da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046de:	4b4b      	ldr	r3, [pc, #300]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ec:	4b47      	ldr	r3, [pc, #284]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f2:	4a46      	ldr	r2, [pc, #280]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046f4:	f043 0308 	orr.w	r3, r3, #8
 80046f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046fc:	4b43      	ldr	r3, [pc, #268]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800470a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	2300      	movs	r3, #0
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800471c:	2302      	movs	r3, #2
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004724:	4619      	mov	r1, r3
 8004726:	483c      	ldr	r0, [pc, #240]	; (8004818 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004728:	f003 fd7c 	bl	8008224 <HAL_GPIO_Init>
}
 800472c:	e067      	b.n	80047fe <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a3a      	ldr	r2, [pc, #232]	; (800481c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d12e      	bne.n	8004796 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800473a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800473e:	4a33      	ldr	r2, [pc, #204]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004744:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004748:	4b30      	ldr	r3, [pc, #192]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800474a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800474e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800475c:	4a2b      	ldr	r2, [pc, #172]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800475e:	f043 0320 	orr.w	r3, r3, #32
 8004762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004766:	4b29      	ldr	r3, [pc, #164]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004774:	2303      	movs	r3, #3
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004780:	2300      	movs	r3, #0
 8004782:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004784:	230d      	movs	r3, #13
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800478c:	4619      	mov	r1, r3
 800478e:	4824      	ldr	r0, [pc, #144]	; (8004820 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004790:	f003 fd48 	bl	8008224 <HAL_GPIO_Init>
}
 8004794:	e033      	b.n	80047fe <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d12e      	bne.n	80047fe <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80047a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80047a6:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80047a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80047b0:	4b16      	ldr	r3, [pc, #88]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80047b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80047c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047c4:	4a11      	ldr	r2, [pc, #68]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80047c6:	f043 0320 	orr.w	r3, r3, #32
 80047ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047ce:	4b0f      	ldr	r3, [pc, #60]	; (800480c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80047d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80047dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e2:	2302      	movs	r3, #2
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ea:	2300      	movs	r3, #0
 80047ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80047ee:	230e      	movs	r3, #14
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047f6:	4619      	mov	r1, r3
 80047f8:	4809      	ldr	r0, [pc, #36]	; (8004820 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80047fa:	f003 fd13 	bl	8008224 <HAL_GPIO_Init>
}
 80047fe:	bf00      	nop
 8004800:	3740      	adds	r7, #64	; 0x40
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40000400 	.word	0x40000400
 800480c:	58024400 	.word	0x58024400
 8004810:	58020000 	.word	0x58020000
 8004814:	40000800 	.word	0x40000800
 8004818:	58020c00 	.word	0x58020c00
 800481c:	4000e000 	.word	0x4000e000
 8004820:	58021400 	.word	0x58021400
 8004824:	4000e400 	.word	0x4000e400

08004828 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <HAL_TIM_PWM_MspInit+0x68>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10f      	bne.n	800485a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <HAL_TIM_PWM_MspInit+0x6c>)
 800483c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004840:	4a14      	ldr	r2, [pc, #80]	; (8004894 <HAL_TIM_PWM_MspInit+0x6c>)
 8004842:	f043 0302 	orr.w	r3, r3, #2
 8004846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_TIM_PWM_MspInit+0x6c>)
 800484c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004858:	e013      	b.n	8004882 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <HAL_TIM_PWM_MspInit+0x70>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10e      	bne.n	8004882 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_TIM_PWM_MspInit+0x6c>)
 8004866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <HAL_TIM_PWM_MspInit+0x6c>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_TIM_PWM_MspInit+0x6c>)
 8004876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800487a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010400 	.word	0x40010400
 8004894:	58024400 	.word	0x58024400
 8004898:	40014000 	.word	0x40014000

0800489c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a35      	ldr	r2, [pc, #212]	; (8004990 <HAL_TIM_MspPostInit+0xf4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d120      	bne.n	8004900 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048be:	4b35      	ldr	r3, [pc, #212]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 80048c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c4:	4a33      	ldr	r2, [pc, #204]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 80048c6:	f043 0304 	orr.w	r3, r3, #4
 80048ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 80048d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e2:	2302      	movs	r3, #2
 80048e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ea:	2300      	movs	r3, #0
 80048ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80048ee:	2303      	movs	r3, #3
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f2:	f107 0314 	add.w	r3, r7, #20
 80048f6:	4619      	mov	r1, r3
 80048f8:	4827      	ldr	r0, [pc, #156]	; (8004998 <HAL_TIM_MspPostInit+0xfc>)
 80048fa:	f003 fc93 	bl	8008224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80048fe:	e042      	b.n	8004986 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a25      	ldr	r2, [pc, #148]	; (800499c <HAL_TIM_MspPostInit+0x100>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d13d      	bne.n	8004986 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 800490c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004910:	4a20      	ldr	r2, [pc, #128]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 8004912:	f043 0310 	orr.w	r3, r3, #16
 8004916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800491a:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 800491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 800492a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800492e:	4a19      	ldr	r2, [pc, #100]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004938:	4b16      	ldr	r3, [pc, #88]	; (8004994 <HAL_TIM_MspPostInit+0xf8>)
 800493a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004946:	2320      	movs	r3, #32
 8004948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494a:	2302      	movs	r3, #2
 800494c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2300      	movs	r3, #0
 8004954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004956:	2304      	movs	r3, #4
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	4619      	mov	r1, r3
 8004960:	480f      	ldr	r0, [pc, #60]	; (80049a0 <HAL_TIM_MspPostInit+0x104>)
 8004962:	f003 fc5f 	bl	8008224 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004966:	2308      	movs	r3, #8
 8004968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496a:	2302      	movs	r3, #2
 800496c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004972:	2300      	movs	r3, #0
 8004974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004976:	2304      	movs	r3, #4
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800497a:	f107 0314 	add.w	r3, r7, #20
 800497e:	4619      	mov	r1, r3
 8004980:	4808      	ldr	r0, [pc, #32]	; (80049a4 <HAL_TIM_MspPostInit+0x108>)
 8004982:	f003 fc4f 	bl	8008224 <HAL_GPIO_Init>
}
 8004986:	bf00      	nop
 8004988:	3728      	adds	r7, #40	; 0x28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40010400 	.word	0x40010400
 8004994:	58024400 	.word	0x58024400
 8004998:	58020800 	.word	0x58020800
 800499c:	40014000 	.word	0x40014000
 80049a0:	58021000 	.word	0x58021000
 80049a4:	58020000 	.word	0x58020000

080049a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b0b6      	sub	sp, #216	; 0xd8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	22b4      	movs	r2, #180	; 0xb4
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f009 ffc1 	bl	800e950 <memset>
  if(huart->Instance==USART10)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a62      	ldr	r2, [pc, #392]	; (8004b5c <HAL_UART_MspInit+0x1b4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	f040 80bc 	bne.w	8004b52 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80049da:	2301      	movs	r3, #1
 80049dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049e4:	f107 0310 	add.w	r3, r7, #16
 80049e8:	4618      	mov	r0, r3
 80049ea:	f004 fe77 	bl	80096dc <HAL_RCCEx_PeriphCLKConfig>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80049f4:	f7fd f8d2 	bl	8001b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80049f8:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <HAL_UART_MspInit+0x1b8>)
 80049fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <HAL_UART_MspInit+0x1b8>)
 8004a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a08:	4b55      	ldr	r3, [pc, #340]	; (8004b60 <HAL_UART_MspInit+0x1b8>)
 8004a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a16:	4b52      	ldr	r3, [pc, #328]	; (8004b60 <HAL_UART_MspInit+0x1b8>)
 8004a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a1c:	4a50      	ldr	r2, [pc, #320]	; (8004b60 <HAL_UART_MspInit+0x1b8>)
 8004a1e:	f043 0310 	orr.w	r3, r3, #16
 8004a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a26:	4b4e      	ldr	r3, [pc, #312]	; (8004b60 <HAL_UART_MspInit+0x1b8>)
 8004a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a34:	2304      	movs	r3, #4
 8004a36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4842      	ldr	r0, [pc, #264]	; (8004b64 <HAL_UART_MspInit+0x1bc>)
 8004a5a:	f003 fbe3 	bl	8008224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a5e:	2308      	movs	r3, #8
 8004a60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a64:	2302      	movs	r3, #2
 8004a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8004a76:	230b      	movs	r3, #11
 8004a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4838      	ldr	r0, [pc, #224]	; (8004b64 <HAL_UART_MspInit+0x1bc>)
 8004a84:	f003 fbce 	bl	8008224 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 8004a88:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004a8a:	4a38      	ldr	r2, [pc, #224]	; (8004b6c <HAL_UART_MspInit+0x1c4>)
 8004a8c:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 8004a8e:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004a90:	2276      	movs	r2, #118	; 0x76
 8004a92:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a94:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004aa0:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aa6:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aa8:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aae:	4b2e      	ldr	r3, [pc, #184]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8004ab4:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aba:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ac2:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ac4:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 8004aca:	4827      	ldr	r0, [pc, #156]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004acc:	f000 fbba 	bl	8005244 <HAL_DMA_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8004ad6:	f7fd f861 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004ade:	67da      	str	r2, [r3, #124]	; 0x7c
 8004ae0:	4a21      	ldr	r2, [pc, #132]	; (8004b68 <HAL_UART_MspInit+0x1c0>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004ae8:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <HAL_UART_MspInit+0x1cc>)
 8004aea:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 8004aec:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004aee:	2277      	movs	r2, #119	; 0x77
 8004af0:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004af2:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004af4:	2240      	movs	r2, #64	; 0x40
 8004af6:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004afe:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b04:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b06:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b0c:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b18:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b1e:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b20:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 8004b26:	4812      	ldr	r0, [pc, #72]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b28:	f000 fb8c 	bl	8005244 <HAL_DMA_Init>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 8004b32:	f7fd f833 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b3a:	679a      	str	r2, [r3, #120]	; 0x78
 8004b3c:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <HAL_UART_MspInit+0x1c8>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8004b42:	2200      	movs	r2, #0
 8004b44:	2100      	movs	r1, #0
 8004b46:	209c      	movs	r0, #156	; 0x9c
 8004b48:	f000 fb39 	bl	80051be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004b4c:	209c      	movs	r0, #156	; 0x9c
 8004b4e:	f000 fb50 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004b52:	bf00      	nop
 8004b54:	37d8      	adds	r7, #216	; 0xd8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40011c00 	.word	0x40011c00
 8004b60:	58024400 	.word	0x58024400
 8004b64:	58021000 	.word	0x58021000
 8004b68:	24000420 	.word	0x24000420
 8004b6c:	40020010 	.word	0x40020010
 8004b70:	24000498 	.word	0x24000498
 8004b74:	40020028 	.word	0x40020028

08004b78 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <HAL_UART_MspDeInit+0x4c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d118      	bne.n	8004bbc <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_UART_MspDeInit+0x50>)
 8004b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b90:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <HAL_UART_MspDeInit+0x50>)
 8004b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 8004b9a:	210c      	movs	r1, #12
 8004b9c:	480b      	ldr	r0, [pc, #44]	; (8004bcc <HAL_UART_MspDeInit+0x54>)
 8004b9e:	f003 fce9 	bl	8008574 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fea6 	bl	80058f8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fea1 	bl	80058f8 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 8004bb6:	209c      	movs	r0, #156	; 0x9c
 8004bb8:	f000 fb29 	bl	800520e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40011c00 	.word	0x40011c00
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	58021000 	.word	0x58021000

08004bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bd4:	e7fe      	b.n	8004bd4 <NMI_Handler+0x4>

08004bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bda:	e7fe      	b.n	8004bda <HardFault_Handler+0x4>

08004bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004be0:	e7fe      	b.n	8004be0 <MemManage_Handler+0x4>

08004be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004be6:	e7fe      	b.n	8004be6 <BusFault_Handler+0x4>

08004be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bec:	e7fe      	b.n	8004bec <UsageFault_Handler+0x4>

08004bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c1c:	f000 f9b0 	bl	8004f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8004c38:	4802      	ldr	r0, [pc, #8]	; (8004c44 <DMA1_Stream0_IRQHandler+0x10>)
 8004c3a:	f001 ffe1 	bl	8006c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	24000420 	.word	0x24000420

08004c48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004c4c:	4802      	ldr	r0, [pc, #8]	; (8004c58 <DMA1_Stream1_IRQHandler+0x10>)
 8004c4e:	f001 ffd7 	bl	8006c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	24000498 	.word	0x24000498

08004c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c60:	4802      	ldr	r0, [pc, #8]	; (8004c6c <TIM2_IRQHandler+0x10>)
 8004c62:	f006 fbdd 	bl	800b420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	24000130 	.word	0x24000130

08004c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c78:	f003 fd97 	bl	80087aa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004c84:	4802      	ldr	r0, [pc, #8]	; (8004c90 <TIM5_IRQHandler+0x10>)
 8004c86:	f006 fbcb 	bl	800b420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	24000214 	.word	0x24000214

08004c94 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004c98:	4802      	ldr	r0, [pc, #8]	; (8004ca4 <USART10_IRQHandler+0x10>)
 8004c9a:	f007 fe23 	bl	800c8e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	24000390 	.word	0x24000390

08004ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
	return 1;
 8004cac:	2301      	movs	r3, #1
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <_kill>:

int _kill(int pid, int sig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004cc2:	f009 fe0d 	bl	800e8e0 <__errno>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2216      	movs	r2, #22
 8004cca:	601a      	str	r2, [r3, #0]
	return -1;
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <_exit>:

void _exit (int status)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ffe7 	bl	8004cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cea:	e7fe      	b.n	8004cea <_exit+0x12>

08004cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <_sbrk+0x5c>)
 8004cf6:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <_sbrk+0x60>)
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <_sbrk+0x64>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d08:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <_sbrk+0x64>)
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <_sbrk+0x68>)
 8004d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d0e:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <_sbrk+0x64>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4413      	add	r3, r2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d207      	bcs.n	8004d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d1c:	f009 fde0 	bl	800e8e0 <__errno>
 8004d20:	4603      	mov	r3, r0
 8004d22:	220c      	movs	r2, #12
 8004d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	e009      	b.n	8004d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <_sbrk+0x64>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <_sbrk+0x64>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <_sbrk+0x64>)
 8004d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	24050000 	.word	0x24050000
 8004d4c:	00000400 	.word	0x00000400
 8004d50:	240010ec 	.word	0x240010ec
 8004d54:	24001108 	.word	0x24001108

08004d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d5c:	4b32      	ldr	r3, [pc, #200]	; (8004e28 <SystemInit+0xd0>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	4a31      	ldr	r2, [pc, #196]	; (8004e28 <SystemInit+0xd0>)
 8004d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d6c:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <SystemInit+0xd4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d807      	bhi.n	8004d88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004d78:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <SystemInit+0xd4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 030f 	bic.w	r3, r3, #15
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <SystemInit+0xd4>)
 8004d82:	f043 0307 	orr.w	r3, r3, #7
 8004d86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004d88:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <SystemInit+0xd8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <SystemInit+0xd8>)
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <SystemInit+0xd8>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004d9a:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <SystemInit+0xd8>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4924      	ldr	r1, [pc, #144]	; (8004e30 <SystemInit+0xd8>)
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <SystemInit+0xdc>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <SystemInit+0xd4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <SystemInit+0xd4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 030f 	bic.w	r3, r3, #15
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <SystemInit+0xd4>)
 8004dbc:	f043 0307 	orr.w	r3, r3, #7
 8004dc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <SystemInit+0xd8>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <SystemInit+0xd8>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <SystemInit+0xd8>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <SystemInit+0xd8>)
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <SystemInit+0xe0>)
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <SystemInit+0xd8>)
 8004ddc:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <SystemInit+0xe4>)
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <SystemInit+0xd8>)
 8004de2:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <SystemInit+0xe8>)
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <SystemInit+0xd8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004dec:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <SystemInit+0xd8>)
 8004dee:	4a14      	ldr	r2, [pc, #80]	; (8004e40 <SystemInit+0xe8>)
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <SystemInit+0xd8>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <SystemInit+0xd8>)
 8004dfa:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <SystemInit+0xe8>)
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <SystemInit+0xd8>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <SystemInit+0xd8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <SystemInit+0xd8>)
 8004e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <SystemInit+0xd8>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <SystemInit+0xec>)
 8004e18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004e1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000ed00 	.word	0xe000ed00
 8004e2c:	52002000 	.word	0x52002000
 8004e30:	58024400 	.word	0x58024400
 8004e34:	eaf6ed7f 	.word	0xeaf6ed7f
 8004e38:	02020200 	.word	0x02020200
 8004e3c:	01ff0000 	.word	0x01ff0000
 8004e40:	01010280 	.word	0x01010280
 8004e44:	52004000 	.word	0x52004000

08004e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e4c:	f7ff ff84 	bl	8004d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e50:	480c      	ldr	r0, [pc, #48]	; (8004e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e52:	490d      	ldr	r1, [pc, #52]	; (8004e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e54:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e58:	e002      	b.n	8004e60 <LoopCopyDataInit>

08004e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e5e:	3304      	adds	r3, #4

08004e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e64:	d3f9      	bcc.n	8004e5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e68:	4c0a      	ldr	r4, [pc, #40]	; (8004e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e6c:	e001      	b.n	8004e72 <LoopFillZerobss>

08004e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e70:	3204      	adds	r2, #4

08004e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e74:	d3fb      	bcc.n	8004e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e76:	f009 fd39 	bl	800e8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e7a:	f7fb fc9d 	bl	80007b8 <main>
  bx  lr
 8004e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e80:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004e84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004e88:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8004e8c:	0800ef88 	.word	0x0800ef88
  ldr r2, =_sbss
 8004e90:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8004e94:	24001104 	.word	0x24001104

08004e98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e98:	e7fe      	b.n	8004e98 <ADC3_IRQHandler>
	...

08004e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea2:	2003      	movs	r0, #3
 8004ea4:	f000 f980 	bl	80051a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ea8:	f004 fa42 	bl	8009330 <HAL_RCC_GetSysClockFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <HAL_Init+0x68>)
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	4913      	ldr	r1, [pc, #76]	; (8004f08 <HAL_Init+0x6c>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_Init+0x68>)
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <HAL_Init+0x6c>)
 8004ed0:	5cd3      	ldrb	r3, [r2, r3]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8004edc:	4a0b      	ldr	r2, [pc, #44]	; (8004f0c <HAL_Init+0x70>)
 8004ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ee0:	4a0b      	ldr	r2, [pc, #44]	; (8004f10 <HAL_Init+0x74>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ee6:	200f      	movs	r0, #15
 8004ee8:	f000 f814 	bl	8004f14 <HAL_InitTick>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e002      	b.n	8004efc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004ef6:	f7ff fb3f 	bl	8004578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	58024400 	.word	0x58024400
 8004f08:	0800ef34 	.word	0x0800ef34
 8004f0c:	2400001c 	.word	0x2400001c
 8004f10:	24000018 	.word	0x24000018

08004f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_InitTick+0x60>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e021      	b.n	8004f6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_InitTick+0x64>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_InitTick+0x60>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f973 	bl	800522a <HAL_SYSTICK_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e00e      	b.n	8004f6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b0f      	cmp	r3, #15
 8004f52:	d80a      	bhi.n	8004f6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f54:	2200      	movs	r2, #0
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	f000 f92f 	bl	80051be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f60:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <HAL_InitTick+0x68>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	24000024 	.word	0x24000024
 8004f78:	24000018 	.word	0x24000018
 8004f7c:	24000020 	.word	0x24000020

08004f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_IncTick+0x20>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	24000024 	.word	0x24000024
 8004fa4:	240010f0 	.word	0x240010f0

08004fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return uwTick;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_GetTick+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	240010f0 	.word	0x240010f0

08004fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <__NVIC_SetPriorityGrouping+0x40>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <__NVIC_SetPriorityGrouping+0x44>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fee:	4a04      	ldr	r2, [pc, #16]	; (8005000 <__NVIC_SetPriorityGrouping+0x40>)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	60d3      	str	r3, [r2, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000ed00 	.word	0xe000ed00
 8005004:	05fa0000 	.word	0x05fa0000

08005008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <__NVIC_GetPriorityGrouping+0x18>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	0a1b      	lsrs	r3, r3, #8
 8005012:	f003 0307 	and.w	r3, r3, #7
}
 8005016:	4618      	mov	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800502e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005032:	2b00      	cmp	r3, #0
 8005034:	db0b      	blt.n	800504e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	f003 021f 	and.w	r2, r3, #31
 800503c:	4907      	ldr	r1, [pc, #28]	; (800505c <__NVIC_EnableIRQ+0x38>)
 800503e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	2001      	movs	r0, #1
 8005046:	fa00 f202 	lsl.w	r2, r0, r2
 800504a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	e000e100 	.word	0xe000e100

08005060 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800506a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800506e:	2b00      	cmp	r3, #0
 8005070:	db12      	blt.n	8005098 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f003 021f 	and.w	r2, r3, #31
 8005078:	490a      	ldr	r1, [pc, #40]	; (80050a4 <__NVIC_DisableIRQ+0x44>)
 800507a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	2001      	movs	r0, #1
 8005082:	fa00 f202 	lsl.w	r2, r0, r2
 8005086:	3320      	adds	r3, #32
 8005088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800508c:	f3bf 8f4f 	dsb	sy
}
 8005090:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005092:	f3bf 8f6f 	isb	sy
}
 8005096:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	e000e100 	.word	0xe000e100

080050a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	db0a      	blt.n	80050d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	490c      	ldr	r1, [pc, #48]	; (80050f4 <__NVIC_SetPriority+0x4c>)
 80050c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050c6:	0112      	lsls	r2, r2, #4
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	440b      	add	r3, r1
 80050cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050d0:	e00a      	b.n	80050e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	4908      	ldr	r1, [pc, #32]	; (80050f8 <__NVIC_SetPriority+0x50>)
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	3b04      	subs	r3, #4
 80050e0:	0112      	lsls	r2, r2, #4
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	440b      	add	r3, r1
 80050e6:	761a      	strb	r2, [r3, #24]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000e100 	.word	0xe000e100
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f1c3 0307 	rsb	r3, r3, #7
 8005116:	2b04      	cmp	r3, #4
 8005118:	bf28      	it	cs
 800511a:	2304      	movcs	r3, #4
 800511c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3304      	adds	r3, #4
 8005122:	2b06      	cmp	r3, #6
 8005124:	d902      	bls.n	800512c <NVIC_EncodePriority+0x30>
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3b03      	subs	r3, #3
 800512a:	e000      	b.n	800512e <NVIC_EncodePriority+0x32>
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005130:	f04f 32ff 	mov.w	r2, #4294967295
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	401a      	ands	r2, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005144:	f04f 31ff 	mov.w	r1, #4294967295
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	43d9      	mvns	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005154:	4313      	orrs	r3, r2
         );
}
 8005156:	4618      	mov	r0, r3
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3b01      	subs	r3, #1
 8005170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005174:	d301      	bcc.n	800517a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005176:	2301      	movs	r3, #1
 8005178:	e00f      	b.n	800519a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <SysTick_Config+0x40>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3b01      	subs	r3, #1
 8005180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005182:	210f      	movs	r1, #15
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	f7ff ff8e 	bl	80050a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <SysTick_Config+0x40>)
 800518e:	2200      	movs	r2, #0
 8005190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <SysTick_Config+0x40>)
 8005194:	2207      	movs	r2, #7
 8005196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	e000e010 	.word	0xe000e010

080051a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ff05 	bl	8004fc0 <__NVIC_SetPriorityGrouping>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b086      	sub	sp, #24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	4603      	mov	r3, r0
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051cc:	f7ff ff1c 	bl	8005008 <__NVIC_GetPriorityGrouping>
 80051d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	6978      	ldr	r0, [r7, #20]
 80051d8:	f7ff ff90 	bl	80050fc <NVIC_EncodePriority>
 80051dc:	4602      	mov	r2, r0
 80051de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff ff5f 	bl	80050a8 <__NVIC_SetPriority>
}
 80051ea:	bf00      	nop
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	4603      	mov	r3, r0
 80051fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff0f 	bl	8005024 <__NVIC_EnableIRQ>
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	4603      	mov	r3, r0
 8005216:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff1f 	bl	8005060 <__NVIC_DisableIRQ>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff ff96 	bl	8005164 <SysTick_Config>
 8005238:	4603      	mov	r3, r0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800524c:	f7ff feac 	bl	8004fa8 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e314      	b.n	8005886 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a66      	ldr	r2, [pc, #408]	; (80053fc <HAL_DMA_Init+0x1b8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d04a      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a65      	ldr	r2, [pc, #404]	; (8005400 <HAL_DMA_Init+0x1bc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d045      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a63      	ldr	r2, [pc, #396]	; (8005404 <HAL_DMA_Init+0x1c0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d040      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a62      	ldr	r2, [pc, #392]	; (8005408 <HAL_DMA_Init+0x1c4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d03b      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a60      	ldr	r2, [pc, #384]	; (800540c <HAL_DMA_Init+0x1c8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d036      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a5f      	ldr	r2, [pc, #380]	; (8005410 <HAL_DMA_Init+0x1cc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d031      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5d      	ldr	r2, [pc, #372]	; (8005414 <HAL_DMA_Init+0x1d0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02c      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a5c      	ldr	r2, [pc, #368]	; (8005418 <HAL_DMA_Init+0x1d4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d027      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a5a      	ldr	r2, [pc, #360]	; (800541c <HAL_DMA_Init+0x1d8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a59      	ldr	r2, [pc, #356]	; (8005420 <HAL_DMA_Init+0x1dc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01d      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a57      	ldr	r2, [pc, #348]	; (8005424 <HAL_DMA_Init+0x1e0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a56      	ldr	r2, [pc, #344]	; (8005428 <HAL_DMA_Init+0x1e4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a54      	ldr	r2, [pc, #336]	; (800542c <HAL_DMA_Init+0x1e8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a53      	ldr	r2, [pc, #332]	; (8005430 <HAL_DMA_Init+0x1ec>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a51      	ldr	r2, [pc, #324]	; (8005434 <HAL_DMA_Init+0x1f0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_DMA_Init+0xb8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a50      	ldr	r2, [pc, #320]	; (8005438 <HAL_DMA_Init+0x1f4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d101      	bne.n	8005300 <HAL_DMA_Init+0xbc>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_DMA_Init+0xbe>
 8005300:	2300      	movs	r3, #0
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 813c 	beq.w	8005580 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a37      	ldr	r2, [pc, #220]	; (80053fc <HAL_DMA_Init+0x1b8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d04a      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a36      	ldr	r2, [pc, #216]	; (8005400 <HAL_DMA_Init+0x1bc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d045      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a34      	ldr	r2, [pc, #208]	; (8005404 <HAL_DMA_Init+0x1c0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d040      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a33      	ldr	r2, [pc, #204]	; (8005408 <HAL_DMA_Init+0x1c4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d03b      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a31      	ldr	r2, [pc, #196]	; (800540c <HAL_DMA_Init+0x1c8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d036      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a30      	ldr	r2, [pc, #192]	; (8005410 <HAL_DMA_Init+0x1cc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d031      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2e      	ldr	r2, [pc, #184]	; (8005414 <HAL_DMA_Init+0x1d0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d02c      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2d      	ldr	r2, [pc, #180]	; (8005418 <HAL_DMA_Init+0x1d4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d027      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2b      	ldr	r2, [pc, #172]	; (800541c <HAL_DMA_Init+0x1d8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d022      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <HAL_DMA_Init+0x1dc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d01d      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a28      	ldr	r2, [pc, #160]	; (8005424 <HAL_DMA_Init+0x1e0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d018      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a27      	ldr	r2, [pc, #156]	; (8005428 <HAL_DMA_Init+0x1e4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a25      	ldr	r2, [pc, #148]	; (800542c <HAL_DMA_Init+0x1e8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a24      	ldr	r2, [pc, #144]	; (8005430 <HAL_DMA_Init+0x1ec>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_DMA_Init+0x1f0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_DMA_Init+0x174>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a21      	ldr	r2, [pc, #132]	; (8005438 <HAL_DMA_Init+0x1f4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d108      	bne.n	80053ca <HAL_DMA_Init+0x186>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e007      	b.n	80053da <HAL_DMA_Init+0x196>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053da:	e02f      	b.n	800543c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053dc:	f7ff fde4 	bl	8004fa8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d928      	bls.n	800543c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2203      	movs	r2, #3
 80053f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e244      	b.n	8005886 <HAL_DMA_Init+0x642>
 80053fc:	40020010 	.word	0x40020010
 8005400:	40020028 	.word	0x40020028
 8005404:	40020040 	.word	0x40020040
 8005408:	40020058 	.word	0x40020058
 800540c:	40020070 	.word	0x40020070
 8005410:	40020088 	.word	0x40020088
 8005414:	400200a0 	.word	0x400200a0
 8005418:	400200b8 	.word	0x400200b8
 800541c:	40020410 	.word	0x40020410
 8005420:	40020428 	.word	0x40020428
 8005424:	40020440 	.word	0x40020440
 8005428:	40020458 	.word	0x40020458
 800542c:	40020470 	.word	0x40020470
 8005430:	40020488 	.word	0x40020488
 8005434:	400204a0 	.word	0x400204a0
 8005438:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1c8      	bne.n	80053dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4b84      	ldr	r3, [pc, #528]	; (8005668 <HAL_DMA_Init+0x424>)
 8005456:	4013      	ands	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005462:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800546e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800547a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	2b04      	cmp	r3, #4
 800548e:	d107      	bne.n	80054a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	4313      	orrs	r3, r2
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b28      	cmp	r3, #40	; 0x28
 80054a6:	d903      	bls.n	80054b0 <HAL_DMA_Init+0x26c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b2e      	cmp	r3, #46	; 0x2e
 80054ae:	d91f      	bls.n	80054f0 <HAL_DMA_Init+0x2ac>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b3e      	cmp	r3, #62	; 0x3e
 80054b6:	d903      	bls.n	80054c0 <HAL_DMA_Init+0x27c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b42      	cmp	r3, #66	; 0x42
 80054be:	d917      	bls.n	80054f0 <HAL_DMA_Init+0x2ac>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b46      	cmp	r3, #70	; 0x46
 80054c6:	d903      	bls.n	80054d0 <HAL_DMA_Init+0x28c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b48      	cmp	r3, #72	; 0x48
 80054ce:	d90f      	bls.n	80054f0 <HAL_DMA_Init+0x2ac>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b4e      	cmp	r3, #78	; 0x4e
 80054d6:	d903      	bls.n	80054e0 <HAL_DMA_Init+0x29c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b52      	cmp	r3, #82	; 0x52
 80054de:	d907      	bls.n	80054f0 <HAL_DMA_Init+0x2ac>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b73      	cmp	r3, #115	; 0x73
 80054e6:	d905      	bls.n	80054f4 <HAL_DMA_Init+0x2b0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b77      	cmp	r3, #119	; 0x77
 80054ee:	d801      	bhi.n	80054f4 <HAL_DMA_Init+0x2b0>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_DMA_Init+0x2b2>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005500:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0307 	bic.w	r3, r3, #7
 8005518:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2b04      	cmp	r3, #4
 800552a:	d117      	bne.n	800555c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f002 fce6 	bl	8007f10 <DMA_CheckFifoParam>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e194      	b.n	8005886 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f002 fc21 	bl	8007dac <DMA_CalcBaseAndBitshift>
 800556a:	4603      	mov	r3, r0
 800556c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	223f      	movs	r2, #63	; 0x3f
 8005578:	409a      	lsls	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	609a      	str	r2, [r3, #8]
 800557e:	e0ca      	b.n	8005716 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a39      	ldr	r2, [pc, #228]	; (800566c <HAL_DMA_Init+0x428>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d022      	beq.n	80055d0 <HAL_DMA_Init+0x38c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a38      	ldr	r2, [pc, #224]	; (8005670 <HAL_DMA_Init+0x42c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_Init+0x38c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a36      	ldr	r2, [pc, #216]	; (8005674 <HAL_DMA_Init+0x430>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d018      	beq.n	80055d0 <HAL_DMA_Init+0x38c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a35      	ldr	r2, [pc, #212]	; (8005678 <HAL_DMA_Init+0x434>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_Init+0x38c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a33      	ldr	r2, [pc, #204]	; (800567c <HAL_DMA_Init+0x438>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_Init+0x38c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a32      	ldr	r2, [pc, #200]	; (8005680 <HAL_DMA_Init+0x43c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_DMA_Init+0x38c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a30      	ldr	r2, [pc, #192]	; (8005684 <HAL_DMA_Init+0x440>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_Init+0x38c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <HAL_DMA_Init+0x444>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_Init+0x390>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_DMA_Init+0x392>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8094 	beq.w	8005704 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a22      	ldr	r2, [pc, #136]	; (800566c <HAL_DMA_Init+0x428>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d021      	beq.n	800562a <HAL_DMA_Init+0x3e6>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a21      	ldr	r2, [pc, #132]	; (8005670 <HAL_DMA_Init+0x42c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01c      	beq.n	800562a <HAL_DMA_Init+0x3e6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1f      	ldr	r2, [pc, #124]	; (8005674 <HAL_DMA_Init+0x430>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d017      	beq.n	800562a <HAL_DMA_Init+0x3e6>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <HAL_DMA_Init+0x434>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d012      	beq.n	800562a <HAL_DMA_Init+0x3e6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1c      	ldr	r2, [pc, #112]	; (800567c <HAL_DMA_Init+0x438>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00d      	beq.n	800562a <HAL_DMA_Init+0x3e6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <HAL_DMA_Init+0x43c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d008      	beq.n	800562a <HAL_DMA_Init+0x3e6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <HAL_DMA_Init+0x440>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <HAL_DMA_Init+0x3e6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_DMA_Init+0x444>)
 8005628:	4293      	cmp	r3, r2
 800562a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4b11      	ldr	r3, [pc, #68]	; (800568c <HAL_DMA_Init+0x448>)
 8005648:	4013      	ands	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d01d      	beq.n	8005690 <HAL_DMA_Init+0x44c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d102      	bne.n	8005662 <HAL_DMA_Init+0x41e>
 800565c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005660:	e017      	b.n	8005692 <HAL_DMA_Init+0x44e>
 8005662:	2300      	movs	r3, #0
 8005664:	e015      	b.n	8005692 <HAL_DMA_Init+0x44e>
 8005666:	bf00      	nop
 8005668:	fe10803f 	.word	0xfe10803f
 800566c:	58025408 	.word	0x58025408
 8005670:	5802541c 	.word	0x5802541c
 8005674:	58025430 	.word	0x58025430
 8005678:	58025444 	.word	0x58025444
 800567c:	58025458 	.word	0x58025458
 8005680:	5802546c 	.word	0x5802546c
 8005684:	58025480 	.word	0x58025480
 8005688:	58025494 	.word	0x58025494
 800568c:	fffe000f 	.word	0xfffe000f
 8005690:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	4b6e      	ldr	r3, [pc, #440]	; (8005890 <HAL_DMA_Init+0x64c>)
 80056d8:	4413      	add	r3, r2
 80056da:	4a6e      	ldr	r2, [pc, #440]	; (8005894 <HAL_DMA_Init+0x650>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	009a      	lsls	r2, r3, #2
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f002 fb5f 	bl	8007dac <DMA_CalcBaseAndBitshift>
 80056ee:	4603      	mov	r3, r0
 80056f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	2201      	movs	r2, #1
 80056fc:	409a      	lsls	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	e008      	b.n	8005716 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2240      	movs	r2, #64	; 0x40
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2203      	movs	r2, #3
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e0b7      	b.n	8005886 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a5f      	ldr	r2, [pc, #380]	; (8005898 <HAL_DMA_Init+0x654>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d072      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a5d      	ldr	r2, [pc, #372]	; (800589c <HAL_DMA_Init+0x658>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d06d      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <HAL_DMA_Init+0x65c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d068      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5a      	ldr	r2, [pc, #360]	; (80058a4 <HAL_DMA_Init+0x660>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d063      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a59      	ldr	r2, [pc, #356]	; (80058a8 <HAL_DMA_Init+0x664>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d05e      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a57      	ldr	r2, [pc, #348]	; (80058ac <HAL_DMA_Init+0x668>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d059      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a56      	ldr	r2, [pc, #344]	; (80058b0 <HAL_DMA_Init+0x66c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d054      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a54      	ldr	r2, [pc, #336]	; (80058b4 <HAL_DMA_Init+0x670>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d04f      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a53      	ldr	r2, [pc, #332]	; (80058b8 <HAL_DMA_Init+0x674>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d04a      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a51      	ldr	r2, [pc, #324]	; (80058bc <HAL_DMA_Init+0x678>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d045      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a50      	ldr	r2, [pc, #320]	; (80058c0 <HAL_DMA_Init+0x67c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d040      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a4e      	ldr	r2, [pc, #312]	; (80058c4 <HAL_DMA_Init+0x680>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d03b      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a4d      	ldr	r2, [pc, #308]	; (80058c8 <HAL_DMA_Init+0x684>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d036      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a4b      	ldr	r2, [pc, #300]	; (80058cc <HAL_DMA_Init+0x688>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d031      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a4a      	ldr	r2, [pc, #296]	; (80058d0 <HAL_DMA_Init+0x68c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d02c      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a48      	ldr	r2, [pc, #288]	; (80058d4 <HAL_DMA_Init+0x690>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d027      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a47      	ldr	r2, [pc, #284]	; (80058d8 <HAL_DMA_Init+0x694>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d022      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a45      	ldr	r2, [pc, #276]	; (80058dc <HAL_DMA_Init+0x698>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01d      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a44      	ldr	r2, [pc, #272]	; (80058e0 <HAL_DMA_Init+0x69c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d018      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a42      	ldr	r2, [pc, #264]	; (80058e4 <HAL_DMA_Init+0x6a0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a41      	ldr	r2, [pc, #260]	; (80058e8 <HAL_DMA_Init+0x6a4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a3f      	ldr	r2, [pc, #252]	; (80058ec <HAL_DMA_Init+0x6a8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a3e      	ldr	r2, [pc, #248]	; (80058f0 <HAL_DMA_Init+0x6ac>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_DMA_Init+0x5c2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a3c      	ldr	r2, [pc, #240]	; (80058f4 <HAL_DMA_Init+0x6b0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d101      	bne.n	800580a <HAL_DMA_Init+0x5c6>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <HAL_DMA_Init+0x5c8>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d032      	beq.n	8005876 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f002 fbf9 	bl	8008008 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b80      	cmp	r3, #128	; 0x80
 800581c:	d102      	bne.n	8005824 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005838:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d010      	beq.n	8005864 <HAL_DMA_Init+0x620>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b08      	cmp	r3, #8
 8005848:	d80c      	bhi.n	8005864 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f002 fc76 	bl	800813c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	e008      	b.n	8005876 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	a7fdabf8 	.word	0xa7fdabf8
 8005894:	cccccccd 	.word	0xcccccccd
 8005898:	40020010 	.word	0x40020010
 800589c:	40020028 	.word	0x40020028
 80058a0:	40020040 	.word	0x40020040
 80058a4:	40020058 	.word	0x40020058
 80058a8:	40020070 	.word	0x40020070
 80058ac:	40020088 	.word	0x40020088
 80058b0:	400200a0 	.word	0x400200a0
 80058b4:	400200b8 	.word	0x400200b8
 80058b8:	40020410 	.word	0x40020410
 80058bc:	40020428 	.word	0x40020428
 80058c0:	40020440 	.word	0x40020440
 80058c4:	40020458 	.word	0x40020458
 80058c8:	40020470 	.word	0x40020470
 80058cc:	40020488 	.word	0x40020488
 80058d0:	400204a0 	.word	0x400204a0
 80058d4:	400204b8 	.word	0x400204b8
 80058d8:	58025408 	.word	0x58025408
 80058dc:	5802541c 	.word	0x5802541c
 80058e0:	58025430 	.word	0x58025430
 80058e4:	58025444 	.word	0x58025444
 80058e8:	58025458 	.word	0x58025458
 80058ec:	5802546c 	.word	0x5802546c
 80058f0:	58025480 	.word	0x58025480
 80058f4:	58025494 	.word	0x58025494

080058f8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e1a8      	b.n	8005c5c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a82      	ldr	r2, [pc, #520]	; (8005b18 <HAL_DMA_DeInit+0x220>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d04a      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a80      	ldr	r2, [pc, #512]	; (8005b1c <HAL_DMA_DeInit+0x224>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d045      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7f      	ldr	r2, [pc, #508]	; (8005b20 <HAL_DMA_DeInit+0x228>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d040      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a7d      	ldr	r2, [pc, #500]	; (8005b24 <HAL_DMA_DeInit+0x22c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d03b      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a7c      	ldr	r2, [pc, #496]	; (8005b28 <HAL_DMA_DeInit+0x230>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d036      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a7a      	ldr	r2, [pc, #488]	; (8005b2c <HAL_DMA_DeInit+0x234>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d031      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a79      	ldr	r2, [pc, #484]	; (8005b30 <HAL_DMA_DeInit+0x238>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d02c      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a77      	ldr	r2, [pc, #476]	; (8005b34 <HAL_DMA_DeInit+0x23c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d027      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a76      	ldr	r2, [pc, #472]	; (8005b38 <HAL_DMA_DeInit+0x240>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d022      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a74      	ldr	r2, [pc, #464]	; (8005b3c <HAL_DMA_DeInit+0x244>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01d      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a73      	ldr	r2, [pc, #460]	; (8005b40 <HAL_DMA_DeInit+0x248>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a71      	ldr	r2, [pc, #452]	; (8005b44 <HAL_DMA_DeInit+0x24c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a70      	ldr	r2, [pc, #448]	; (8005b48 <HAL_DMA_DeInit+0x250>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a6e      	ldr	r2, [pc, #440]	; (8005b4c <HAL_DMA_DeInit+0x254>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6d      	ldr	r2, [pc, #436]	; (8005b50 <HAL_DMA_DeInit+0x258>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_DMA_DeInit+0xb2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a6b      	ldr	r2, [pc, #428]	; (8005b54 <HAL_DMA_DeInit+0x25c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d108      	bne.n	80059bc <HAL_DMA_DeInit+0xc4>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e007      	b.n	80059cc <HAL_DMA_DeInit+0xd4>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a51      	ldr	r2, [pc, #324]	; (8005b18 <HAL_DMA_DeInit+0x220>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04a      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a50      	ldr	r2, [pc, #320]	; (8005b1c <HAL_DMA_DeInit+0x224>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d045      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a4e      	ldr	r2, [pc, #312]	; (8005b20 <HAL_DMA_DeInit+0x228>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d040      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4d      	ldr	r2, [pc, #308]	; (8005b24 <HAL_DMA_DeInit+0x22c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d03b      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a4b      	ldr	r2, [pc, #300]	; (8005b28 <HAL_DMA_DeInit+0x230>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d036      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a4a      	ldr	r2, [pc, #296]	; (8005b2c <HAL_DMA_DeInit+0x234>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d031      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a48      	ldr	r2, [pc, #288]	; (8005b30 <HAL_DMA_DeInit+0x238>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02c      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a47      	ldr	r2, [pc, #284]	; (8005b34 <HAL_DMA_DeInit+0x23c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d027      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a45      	ldr	r2, [pc, #276]	; (8005b38 <HAL_DMA_DeInit+0x240>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d022      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a44      	ldr	r2, [pc, #272]	; (8005b3c <HAL_DMA_DeInit+0x244>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01d      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a42      	ldr	r2, [pc, #264]	; (8005b40 <HAL_DMA_DeInit+0x248>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d018      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a41      	ldr	r2, [pc, #260]	; (8005b44 <HAL_DMA_DeInit+0x24c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a3f      	ldr	r2, [pc, #252]	; (8005b48 <HAL_DMA_DeInit+0x250>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a3e      	ldr	r2, [pc, #248]	; (8005b4c <HAL_DMA_DeInit+0x254>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a3c      	ldr	r2, [pc, #240]	; (8005b50 <HAL_DMA_DeInit+0x258>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_DeInit+0x174>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a3b      	ldr	r2, [pc, #236]	; (8005b54 <HAL_DMA_DeInit+0x25c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <HAL_DMA_DeInit+0x178>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_DMA_DeInit+0x17a>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d025      	beq.n	8005ac2 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f002 f980 	bl	8007dac <DMA_CalcBaseAndBitshift>
 8005aac:	4603      	mov	r3, r0
 8005aae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	223f      	movs	r2, #63	; 0x3f
 8005aba:	409a      	lsls	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	e081      	b.n	8005bc6 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a24      	ldr	r2, [pc, #144]	; (8005b58 <HAL_DMA_DeInit+0x260>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d022      	beq.n	8005b12 <HAL_DMA_DeInit+0x21a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a22      	ldr	r2, [pc, #136]	; (8005b5c <HAL_DMA_DeInit+0x264>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01d      	beq.n	8005b12 <HAL_DMA_DeInit+0x21a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a21      	ldr	r2, [pc, #132]	; (8005b60 <HAL_DMA_DeInit+0x268>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d018      	beq.n	8005b12 <HAL_DMA_DeInit+0x21a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <HAL_DMA_DeInit+0x26c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <HAL_DMA_DeInit+0x21a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <HAL_DMA_DeInit+0x270>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00e      	beq.n	8005b12 <HAL_DMA_DeInit+0x21a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <HAL_DMA_DeInit+0x274>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d009      	beq.n	8005b12 <HAL_DMA_DeInit+0x21a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <HAL_DMA_DeInit+0x278>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d004      	beq.n	8005b12 <HAL_DMA_DeInit+0x21a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <HAL_DMA_DeInit+0x27c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d132      	bne.n	8005b78 <HAL_DMA_DeInit+0x280>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e031      	b.n	8005b7a <HAL_DMA_DeInit+0x282>
 8005b16:	bf00      	nop
 8005b18:	40020010 	.word	0x40020010
 8005b1c:	40020028 	.word	0x40020028
 8005b20:	40020040 	.word	0x40020040
 8005b24:	40020058 	.word	0x40020058
 8005b28:	40020070 	.word	0x40020070
 8005b2c:	40020088 	.word	0x40020088
 8005b30:	400200a0 	.word	0x400200a0
 8005b34:	400200b8 	.word	0x400200b8
 8005b38:	40020410 	.word	0x40020410
 8005b3c:	40020428 	.word	0x40020428
 8005b40:	40020440 	.word	0x40020440
 8005b44:	40020458 	.word	0x40020458
 8005b48:	40020470 	.word	0x40020470
 8005b4c:	40020488 	.word	0x40020488
 8005b50:	400204a0 	.word	0x400204a0
 8005b54:	400204b8 	.word	0x400204b8
 8005b58:	58025408 	.word	0x58025408
 8005b5c:	5802541c 	.word	0x5802541c
 8005b60:	58025430 	.word	0x58025430
 8005b64:	58025444 	.word	0x58025444
 8005b68:	58025458 	.word	0x58025458
 8005b6c:	5802546c 	.word	0x5802546c
 8005b70:	58025480 	.word	0x58025480
 8005b74:	58025494 	.word	0x58025494
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d021      	beq.n	8005bc2 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f002 f900 	bl	8007dac <DMA_CalcBaseAndBitshift>
 8005bac:	4603      	mov	r3, r0
 8005bae:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	2201      	movs	r2, #1
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	e001      	b.n	8005bc6 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e04a      	b.n	8005c5c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f002 fa1e 	bl	8008008 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005be4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00f      	beq.n	8005c0e <HAL_DMA_DeInit+0x316>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d80b      	bhi.n	8005c0e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 faa0 	bl	800813c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c0c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e226      	b.n	80060ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_DMA_Start_IT+0x2a>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e21f      	b.n	80060ce <HAL_DMA_Start_IT+0x46a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	f040 820a 	bne.w	80060b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a68      	ldr	r2, [pc, #416]	; (8005e58 <HAL_DMA_Start_IT+0x1f4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d04a      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a66      	ldr	r2, [pc, #408]	; (8005e5c <HAL_DMA_Start_IT+0x1f8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d045      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a65      	ldr	r2, [pc, #404]	; (8005e60 <HAL_DMA_Start_IT+0x1fc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d040      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a63      	ldr	r2, [pc, #396]	; (8005e64 <HAL_DMA_Start_IT+0x200>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d03b      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a62      	ldr	r2, [pc, #392]	; (8005e68 <HAL_DMA_Start_IT+0x204>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d036      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a60      	ldr	r2, [pc, #384]	; (8005e6c <HAL_DMA_Start_IT+0x208>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d031      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a5f      	ldr	r2, [pc, #380]	; (8005e70 <HAL_DMA_Start_IT+0x20c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d02c      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a5d      	ldr	r2, [pc, #372]	; (8005e74 <HAL_DMA_Start_IT+0x210>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d027      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a5c      	ldr	r2, [pc, #368]	; (8005e78 <HAL_DMA_Start_IT+0x214>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d022      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a5a      	ldr	r2, [pc, #360]	; (8005e7c <HAL_DMA_Start_IT+0x218>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01d      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a59      	ldr	r2, [pc, #356]	; (8005e80 <HAL_DMA_Start_IT+0x21c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d018      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a57      	ldr	r2, [pc, #348]	; (8005e84 <HAL_DMA_Start_IT+0x220>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a56      	ldr	r2, [pc, #344]	; (8005e88 <HAL_DMA_Start_IT+0x224>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00e      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a54      	ldr	r2, [pc, #336]	; (8005e8c <HAL_DMA_Start_IT+0x228>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d009      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a53      	ldr	r2, [pc, #332]	; (8005e90 <HAL_DMA_Start_IT+0x22c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <HAL_DMA_Start_IT+0xee>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a51      	ldr	r2, [pc, #324]	; (8005e94 <HAL_DMA_Start_IT+0x230>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <HAL_DMA_Start_IT+0x100>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	e007      	b.n	8005d74 <HAL_DMA_Start_IT+0x110>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f001 fe6a 	bl	8007a54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a34      	ldr	r2, [pc, #208]	; (8005e58 <HAL_DMA_Start_IT+0x1f4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d04a      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a33      	ldr	r2, [pc, #204]	; (8005e5c <HAL_DMA_Start_IT+0x1f8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d045      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a31      	ldr	r2, [pc, #196]	; (8005e60 <HAL_DMA_Start_IT+0x1fc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d040      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a30      	ldr	r2, [pc, #192]	; (8005e64 <HAL_DMA_Start_IT+0x200>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d03b      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <HAL_DMA_Start_IT+0x204>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d036      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <HAL_DMA_Start_IT+0x208>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d031      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <HAL_DMA_Start_IT+0x20c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d02c      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <HAL_DMA_Start_IT+0x210>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d027      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <HAL_DMA_Start_IT+0x214>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d022      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <HAL_DMA_Start_IT+0x218>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01d      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_DMA_Start_IT+0x21c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d018      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a24      	ldr	r2, [pc, #144]	; (8005e84 <HAL_DMA_Start_IT+0x220>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <HAL_DMA_Start_IT+0x224>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00e      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <HAL_DMA_Start_IT+0x228>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <HAL_DMA_Start_IT+0x22c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_DMA_Start_IT+0x1bc>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <HAL_DMA_Start_IT+0x230>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <HAL_DMA_Start_IT+0x1c0>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <HAL_DMA_Start_IT+0x1c2>
 8005e24:	2300      	movs	r3, #0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d036      	beq.n	8005e98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 021e 	bic.w	r2, r3, #30
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0216 	orr.w	r2, r2, #22
 8005e3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d03e      	beq.n	8005ec4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0208 	orr.w	r2, r2, #8
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e035      	b.n	8005ec4 <HAL_DMA_Start_IT+0x260>
 8005e58:	40020010 	.word	0x40020010
 8005e5c:	40020028 	.word	0x40020028
 8005e60:	40020040 	.word	0x40020040
 8005e64:	40020058 	.word	0x40020058
 8005e68:	40020070 	.word	0x40020070
 8005e6c:	40020088 	.word	0x40020088
 8005e70:	400200a0 	.word	0x400200a0
 8005e74:	400200b8 	.word	0x400200b8
 8005e78:	40020410 	.word	0x40020410
 8005e7c:	40020428 	.word	0x40020428
 8005e80:	40020440 	.word	0x40020440
 8005e84:	40020458 	.word	0x40020458
 8005e88:	40020470 	.word	0x40020470
 8005e8c:	40020488 	.word	0x40020488
 8005e90:	400204a0 	.word	0x400204a0
 8005e94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f023 020e 	bic.w	r2, r3, #14
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 020a 	orr.w	r2, r2, #10
 8005eaa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d007      	beq.n	8005ec4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0204 	orr.w	r2, r2, #4
 8005ec2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a83      	ldr	r2, [pc, #524]	; (80060d8 <HAL_DMA_Start_IT+0x474>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d072      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a82      	ldr	r2, [pc, #520]	; (80060dc <HAL_DMA_Start_IT+0x478>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d06d      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a80      	ldr	r2, [pc, #512]	; (80060e0 <HAL_DMA_Start_IT+0x47c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d068      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a7f      	ldr	r2, [pc, #508]	; (80060e4 <HAL_DMA_Start_IT+0x480>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d063      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a7d      	ldr	r2, [pc, #500]	; (80060e8 <HAL_DMA_Start_IT+0x484>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d05e      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a7c      	ldr	r2, [pc, #496]	; (80060ec <HAL_DMA_Start_IT+0x488>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d059      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a7a      	ldr	r2, [pc, #488]	; (80060f0 <HAL_DMA_Start_IT+0x48c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d054      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a79      	ldr	r2, [pc, #484]	; (80060f4 <HAL_DMA_Start_IT+0x490>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d04f      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a77      	ldr	r2, [pc, #476]	; (80060f8 <HAL_DMA_Start_IT+0x494>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d04a      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a76      	ldr	r2, [pc, #472]	; (80060fc <HAL_DMA_Start_IT+0x498>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d045      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a74      	ldr	r2, [pc, #464]	; (8006100 <HAL_DMA_Start_IT+0x49c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d040      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a73      	ldr	r2, [pc, #460]	; (8006104 <HAL_DMA_Start_IT+0x4a0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d03b      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a71      	ldr	r2, [pc, #452]	; (8006108 <HAL_DMA_Start_IT+0x4a4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d036      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a70      	ldr	r2, [pc, #448]	; (800610c <HAL_DMA_Start_IT+0x4a8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d031      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a6e      	ldr	r2, [pc, #440]	; (8006110 <HAL_DMA_Start_IT+0x4ac>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d02c      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6d      	ldr	r2, [pc, #436]	; (8006114 <HAL_DMA_Start_IT+0x4b0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d027      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6b      	ldr	r2, [pc, #428]	; (8006118 <HAL_DMA_Start_IT+0x4b4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d022      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6a      	ldr	r2, [pc, #424]	; (800611c <HAL_DMA_Start_IT+0x4b8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d01d      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a68      	ldr	r2, [pc, #416]	; (8006120 <HAL_DMA_Start_IT+0x4bc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a67      	ldr	r2, [pc, #412]	; (8006124 <HAL_DMA_Start_IT+0x4c0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a65      	ldr	r2, [pc, #404]	; (8006128 <HAL_DMA_Start_IT+0x4c4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a64      	ldr	r2, [pc, #400]	; (800612c <HAL_DMA_Start_IT+0x4c8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a62      	ldr	r2, [pc, #392]	; (8006130 <HAL_DMA_Start_IT+0x4cc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x350>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a61      	ldr	r2, [pc, #388]	; (8006134 <HAL_DMA_Start_IT+0x4d0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_DMA_Start_IT+0x354>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_DMA_Start_IT+0x356>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01a      	beq.n	8005ff4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a37      	ldr	r2, [pc, #220]	; (80060d8 <HAL_DMA_Start_IT+0x474>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d04a      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a36      	ldr	r2, [pc, #216]	; (80060dc <HAL_DMA_Start_IT+0x478>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d045      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a34      	ldr	r2, [pc, #208]	; (80060e0 <HAL_DMA_Start_IT+0x47c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d040      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a33      	ldr	r2, [pc, #204]	; (80060e4 <HAL_DMA_Start_IT+0x480>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d03b      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a31      	ldr	r2, [pc, #196]	; (80060e8 <HAL_DMA_Start_IT+0x484>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d036      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a30      	ldr	r2, [pc, #192]	; (80060ec <HAL_DMA_Start_IT+0x488>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d031      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2e      	ldr	r2, [pc, #184]	; (80060f0 <HAL_DMA_Start_IT+0x48c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02c      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a2d      	ldr	r2, [pc, #180]	; (80060f4 <HAL_DMA_Start_IT+0x490>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d027      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2b      	ldr	r2, [pc, #172]	; (80060f8 <HAL_DMA_Start_IT+0x494>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d022      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2a      	ldr	r2, [pc, #168]	; (80060fc <HAL_DMA_Start_IT+0x498>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d01d      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a28      	ldr	r2, [pc, #160]	; (8006100 <HAL_DMA_Start_IT+0x49c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a27      	ldr	r2, [pc, #156]	; (8006104 <HAL_DMA_Start_IT+0x4a0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a25      	ldr	r2, [pc, #148]	; (8006108 <HAL_DMA_Start_IT+0x4a4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a24      	ldr	r2, [pc, #144]	; (800610c <HAL_DMA_Start_IT+0x4a8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a22      	ldr	r2, [pc, #136]	; (8006110 <HAL_DMA_Start_IT+0x4ac>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_DMA_Start_IT+0x430>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_DMA_Start_IT+0x4b0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d108      	bne.n	80060a6 <HAL_DMA_Start_IT+0x442>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e012      	b.n	80060cc <HAL_DMA_Start_IT+0x468>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0201 	orr.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e009      	b.n	80060cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40020010 	.word	0x40020010
 80060dc:	40020028 	.word	0x40020028
 80060e0:	40020040 	.word	0x40020040
 80060e4:	40020058 	.word	0x40020058
 80060e8:	40020070 	.word	0x40020070
 80060ec:	40020088 	.word	0x40020088
 80060f0:	400200a0 	.word	0x400200a0
 80060f4:	400200b8 	.word	0x400200b8
 80060f8:	40020410 	.word	0x40020410
 80060fc:	40020428 	.word	0x40020428
 8006100:	40020440 	.word	0x40020440
 8006104:	40020458 	.word	0x40020458
 8006108:	40020470 	.word	0x40020470
 800610c:	40020488 	.word	0x40020488
 8006110:	400204a0 	.word	0x400204a0
 8006114:	400204b8 	.word	0x400204b8
 8006118:	58025408 	.word	0x58025408
 800611c:	5802541c 	.word	0x5802541c
 8006120:	58025430 	.word	0x58025430
 8006124:	58025444 	.word	0x58025444
 8006128:	58025458 	.word	0x58025458
 800612c:	5802546c 	.word	0x5802546c
 8006130:	58025480 	.word	0x58025480
 8006134:	58025494 	.word	0x58025494

08006138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006140:	f7fe ff32 	bl	8004fa8 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e2dc      	b.n	800670a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d008      	beq.n	800616e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2280      	movs	r2, #128	; 0x80
 8006160:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e2cd      	b.n	800670a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a76      	ldr	r2, [pc, #472]	; (800634c <HAL_DMA_Abort+0x214>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04a      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a74      	ldr	r2, [pc, #464]	; (8006350 <HAL_DMA_Abort+0x218>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d045      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a73      	ldr	r2, [pc, #460]	; (8006354 <HAL_DMA_Abort+0x21c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d040      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a71      	ldr	r2, [pc, #452]	; (8006358 <HAL_DMA_Abort+0x220>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d03b      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a70      	ldr	r2, [pc, #448]	; (800635c <HAL_DMA_Abort+0x224>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d036      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a6e      	ldr	r2, [pc, #440]	; (8006360 <HAL_DMA_Abort+0x228>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d031      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a6d      	ldr	r2, [pc, #436]	; (8006364 <HAL_DMA_Abort+0x22c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d02c      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6b      	ldr	r2, [pc, #428]	; (8006368 <HAL_DMA_Abort+0x230>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d027      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6a      	ldr	r2, [pc, #424]	; (800636c <HAL_DMA_Abort+0x234>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d022      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a68      	ldr	r2, [pc, #416]	; (8006370 <HAL_DMA_Abort+0x238>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a67      	ldr	r2, [pc, #412]	; (8006374 <HAL_DMA_Abort+0x23c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d018      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a65      	ldr	r2, [pc, #404]	; (8006378 <HAL_DMA_Abort+0x240>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a64      	ldr	r2, [pc, #400]	; (800637c <HAL_DMA_Abort+0x244>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a62      	ldr	r2, [pc, #392]	; (8006380 <HAL_DMA_Abort+0x248>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a61      	ldr	r2, [pc, #388]	; (8006384 <HAL_DMA_Abort+0x24c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_DMA_Abort+0xd6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5f      	ldr	r2, [pc, #380]	; (8006388 <HAL_DMA_Abort+0x250>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d101      	bne.n	8006212 <HAL_DMA_Abort+0xda>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <HAL_DMA_Abort+0xdc>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d013      	beq.n	8006240 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 021e 	bic.w	r2, r2, #30
 8006226:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006236:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e00a      	b.n	8006256 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 020e 	bic.w	r2, r2, #14
 800624e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3c      	ldr	r2, [pc, #240]	; (800634c <HAL_DMA_Abort+0x214>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d072      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a3a      	ldr	r2, [pc, #232]	; (8006350 <HAL_DMA_Abort+0x218>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d06d      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a39      	ldr	r2, [pc, #228]	; (8006354 <HAL_DMA_Abort+0x21c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d068      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a37      	ldr	r2, [pc, #220]	; (8006358 <HAL_DMA_Abort+0x220>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d063      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a36      	ldr	r2, [pc, #216]	; (800635c <HAL_DMA_Abort+0x224>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d05e      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a34      	ldr	r2, [pc, #208]	; (8006360 <HAL_DMA_Abort+0x228>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d059      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a33      	ldr	r2, [pc, #204]	; (8006364 <HAL_DMA_Abort+0x22c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d054      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a31      	ldr	r2, [pc, #196]	; (8006368 <HAL_DMA_Abort+0x230>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04f      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a30      	ldr	r2, [pc, #192]	; (800636c <HAL_DMA_Abort+0x234>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d04a      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2e      	ldr	r2, [pc, #184]	; (8006370 <HAL_DMA_Abort+0x238>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d045      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2d      	ldr	r2, [pc, #180]	; (8006374 <HAL_DMA_Abort+0x23c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d040      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <HAL_DMA_Abort+0x240>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d03b      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a2a      	ldr	r2, [pc, #168]	; (800637c <HAL_DMA_Abort+0x244>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d036      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a28      	ldr	r2, [pc, #160]	; (8006380 <HAL_DMA_Abort+0x248>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d031      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a27      	ldr	r2, [pc, #156]	; (8006384 <HAL_DMA_Abort+0x24c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d02c      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a25      	ldr	r2, [pc, #148]	; (8006388 <HAL_DMA_Abort+0x250>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d027      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a24      	ldr	r2, [pc, #144]	; (800638c <HAL_DMA_Abort+0x254>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a22      	ldr	r2, [pc, #136]	; (8006390 <HAL_DMA_Abort+0x258>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01d      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a21      	ldr	r2, [pc, #132]	; (8006394 <HAL_DMA_Abort+0x25c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <HAL_DMA_Abort+0x260>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <HAL_DMA_Abort+0x264>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <HAL_DMA_Abort+0x268>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <HAL_DMA_Abort+0x26c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_DMA_Abort+0x20e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_DMA_Abort+0x270>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d132      	bne.n	80063ac <HAL_DMA_Abort+0x274>
 8006346:	2301      	movs	r3, #1
 8006348:	e031      	b.n	80063ae <HAL_DMA_Abort+0x276>
 800634a:	bf00      	nop
 800634c:	40020010 	.word	0x40020010
 8006350:	40020028 	.word	0x40020028
 8006354:	40020040 	.word	0x40020040
 8006358:	40020058 	.word	0x40020058
 800635c:	40020070 	.word	0x40020070
 8006360:	40020088 	.word	0x40020088
 8006364:	400200a0 	.word	0x400200a0
 8006368:	400200b8 	.word	0x400200b8
 800636c:	40020410 	.word	0x40020410
 8006370:	40020428 	.word	0x40020428
 8006374:	40020440 	.word	0x40020440
 8006378:	40020458 	.word	0x40020458
 800637c:	40020470 	.word	0x40020470
 8006380:	40020488 	.word	0x40020488
 8006384:	400204a0 	.word	0x400204a0
 8006388:	400204b8 	.word	0x400204b8
 800638c:	58025408 	.word	0x58025408
 8006390:	5802541c 	.word	0x5802541c
 8006394:	58025430 	.word	0x58025430
 8006398:	58025444 	.word	0x58025444
 800639c:	58025458 	.word	0x58025458
 80063a0:	5802546c 	.word	0x5802546c
 80063a4:	58025480 	.word	0x58025480
 80063a8:	58025494 	.word	0x58025494
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6d      	ldr	r2, [pc, #436]	; (800657c <HAL_DMA_Abort+0x444>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d04a      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6b      	ldr	r2, [pc, #428]	; (8006580 <HAL_DMA_Abort+0x448>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d045      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6a      	ldr	r2, [pc, #424]	; (8006584 <HAL_DMA_Abort+0x44c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d040      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a68      	ldr	r2, [pc, #416]	; (8006588 <HAL_DMA_Abort+0x450>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d03b      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a67      	ldr	r2, [pc, #412]	; (800658c <HAL_DMA_Abort+0x454>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d036      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a65      	ldr	r2, [pc, #404]	; (8006590 <HAL_DMA_Abort+0x458>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d031      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a64      	ldr	r2, [pc, #400]	; (8006594 <HAL_DMA_Abort+0x45c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d02c      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a62      	ldr	r2, [pc, #392]	; (8006598 <HAL_DMA_Abort+0x460>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d027      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a61      	ldr	r2, [pc, #388]	; (800659c <HAL_DMA_Abort+0x464>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d022      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a5f      	ldr	r2, [pc, #380]	; (80065a0 <HAL_DMA_Abort+0x468>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01d      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a5e      	ldr	r2, [pc, #376]	; (80065a4 <HAL_DMA_Abort+0x46c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d018      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a5c      	ldr	r2, [pc, #368]	; (80065a8 <HAL_DMA_Abort+0x470>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a5b      	ldr	r2, [pc, #364]	; (80065ac <HAL_DMA_Abort+0x474>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00e      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a59      	ldr	r2, [pc, #356]	; (80065b0 <HAL_DMA_Abort+0x478>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a58      	ldr	r2, [pc, #352]	; (80065b4 <HAL_DMA_Abort+0x47c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_DMA_Abort+0x32a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a56      	ldr	r2, [pc, #344]	; (80065b8 <HAL_DMA_Abort+0x480>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d108      	bne.n	8006474 <HAL_DMA_Abort+0x33c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0201 	bic.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e007      	b.n	8006484 <HAL_DMA_Abort+0x34c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006484:	e013      	b.n	80064ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006486:	f7fe fd8f 	bl	8004fa8 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b05      	cmp	r3, #5
 8006492:	d90c      	bls.n	80064ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2203      	movs	r2, #3
 800649e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e12d      	b.n	800670a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e5      	bne.n	8006486 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a2f      	ldr	r2, [pc, #188]	; (800657c <HAL_DMA_Abort+0x444>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d04a      	beq.n	800655a <HAL_DMA_Abort+0x422>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a2d      	ldr	r2, [pc, #180]	; (8006580 <HAL_DMA_Abort+0x448>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d045      	beq.n	800655a <HAL_DMA_Abort+0x422>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a2c      	ldr	r2, [pc, #176]	; (8006584 <HAL_DMA_Abort+0x44c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d040      	beq.n	800655a <HAL_DMA_Abort+0x422>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <HAL_DMA_Abort+0x450>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d03b      	beq.n	800655a <HAL_DMA_Abort+0x422>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a29      	ldr	r2, [pc, #164]	; (800658c <HAL_DMA_Abort+0x454>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d036      	beq.n	800655a <HAL_DMA_Abort+0x422>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a27      	ldr	r2, [pc, #156]	; (8006590 <HAL_DMA_Abort+0x458>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d031      	beq.n	800655a <HAL_DMA_Abort+0x422>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a26      	ldr	r2, [pc, #152]	; (8006594 <HAL_DMA_Abort+0x45c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d02c      	beq.n	800655a <HAL_DMA_Abort+0x422>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a24      	ldr	r2, [pc, #144]	; (8006598 <HAL_DMA_Abort+0x460>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d027      	beq.n	800655a <HAL_DMA_Abort+0x422>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a23      	ldr	r2, [pc, #140]	; (800659c <HAL_DMA_Abort+0x464>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_DMA_Abort+0x422>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_DMA_Abort+0x468>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01d      	beq.n	800655a <HAL_DMA_Abort+0x422>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a20      	ldr	r2, [pc, #128]	; (80065a4 <HAL_DMA_Abort+0x46c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_DMA_Abort+0x422>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1e      	ldr	r2, [pc, #120]	; (80065a8 <HAL_DMA_Abort+0x470>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_DMA_Abort+0x422>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <HAL_DMA_Abort+0x474>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_DMA_Abort+0x422>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <HAL_DMA_Abort+0x478>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_DMA_Abort+0x422>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_DMA_Abort+0x47c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_DMA_Abort+0x422>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <HAL_DMA_Abort+0x480>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d101      	bne.n	800655e <HAL_DMA_Abort+0x426>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_DMA_Abort+0x428>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d02b      	beq.n	80065bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	223f      	movs	r2, #63	; 0x3f
 8006574:	409a      	lsls	r2, r3
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	609a      	str	r2, [r3, #8]
 800657a:	e02a      	b.n	80065d2 <HAL_DMA_Abort+0x49a>
 800657c:	40020010 	.word	0x40020010
 8006580:	40020028 	.word	0x40020028
 8006584:	40020040 	.word	0x40020040
 8006588:	40020058 	.word	0x40020058
 800658c:	40020070 	.word	0x40020070
 8006590:	40020088 	.word	0x40020088
 8006594:	400200a0 	.word	0x400200a0
 8006598:	400200b8 	.word	0x400200b8
 800659c:	40020410 	.word	0x40020410
 80065a0:	40020428 	.word	0x40020428
 80065a4:	40020440 	.word	0x40020440
 80065a8:	40020458 	.word	0x40020458
 80065ac:	40020470 	.word	0x40020470
 80065b0:	40020488 	.word	0x40020488
 80065b4:	400204a0 	.word	0x400204a0
 80065b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	2201      	movs	r2, #1
 80065cc:	409a      	lsls	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a4f      	ldr	r2, [pc, #316]	; (8006714 <HAL_DMA_Abort+0x5dc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d072      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a4d      	ldr	r2, [pc, #308]	; (8006718 <HAL_DMA_Abort+0x5e0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d06d      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a4c      	ldr	r2, [pc, #304]	; (800671c <HAL_DMA_Abort+0x5e4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d068      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a4a      	ldr	r2, [pc, #296]	; (8006720 <HAL_DMA_Abort+0x5e8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d063      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a49      	ldr	r2, [pc, #292]	; (8006724 <HAL_DMA_Abort+0x5ec>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d05e      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a47      	ldr	r2, [pc, #284]	; (8006728 <HAL_DMA_Abort+0x5f0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d059      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a46      	ldr	r2, [pc, #280]	; (800672c <HAL_DMA_Abort+0x5f4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d054      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a44      	ldr	r2, [pc, #272]	; (8006730 <HAL_DMA_Abort+0x5f8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d04f      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a43      	ldr	r2, [pc, #268]	; (8006734 <HAL_DMA_Abort+0x5fc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d04a      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a41      	ldr	r2, [pc, #260]	; (8006738 <HAL_DMA_Abort+0x600>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d045      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a40      	ldr	r2, [pc, #256]	; (800673c <HAL_DMA_Abort+0x604>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d040      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a3e      	ldr	r2, [pc, #248]	; (8006740 <HAL_DMA_Abort+0x608>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d03b      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a3d      	ldr	r2, [pc, #244]	; (8006744 <HAL_DMA_Abort+0x60c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d036      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a3b      	ldr	r2, [pc, #236]	; (8006748 <HAL_DMA_Abort+0x610>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d031      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a3a      	ldr	r2, [pc, #232]	; (800674c <HAL_DMA_Abort+0x614>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d02c      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a38      	ldr	r2, [pc, #224]	; (8006750 <HAL_DMA_Abort+0x618>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d027      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a37      	ldr	r2, [pc, #220]	; (8006754 <HAL_DMA_Abort+0x61c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d022      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a35      	ldr	r2, [pc, #212]	; (8006758 <HAL_DMA_Abort+0x620>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01d      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a34      	ldr	r2, [pc, #208]	; (800675c <HAL_DMA_Abort+0x624>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a32      	ldr	r2, [pc, #200]	; (8006760 <HAL_DMA_Abort+0x628>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a31      	ldr	r2, [pc, #196]	; (8006764 <HAL_DMA_Abort+0x62c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2f      	ldr	r2, [pc, #188]	; (8006768 <HAL_DMA_Abort+0x630>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2e      	ldr	r2, [pc, #184]	; (800676c <HAL_DMA_Abort+0x634>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_DMA_Abort+0x58a>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a2c      	ldr	r2, [pc, #176]	; (8006770 <HAL_DMA_Abort+0x638>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <HAL_DMA_Abort+0x58e>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_DMA_Abort+0x590>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00c      	beq.n	80066f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40020010 	.word	0x40020010
 8006718:	40020028 	.word	0x40020028
 800671c:	40020040 	.word	0x40020040
 8006720:	40020058 	.word	0x40020058
 8006724:	40020070 	.word	0x40020070
 8006728:	40020088 	.word	0x40020088
 800672c:	400200a0 	.word	0x400200a0
 8006730:	400200b8 	.word	0x400200b8
 8006734:	40020410 	.word	0x40020410
 8006738:	40020428 	.word	0x40020428
 800673c:	40020440 	.word	0x40020440
 8006740:	40020458 	.word	0x40020458
 8006744:	40020470 	.word	0x40020470
 8006748:	40020488 	.word	0x40020488
 800674c:	400204a0 	.word	0x400204a0
 8006750:	400204b8 	.word	0x400204b8
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494

08006774 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e237      	b.n	8006bf6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d004      	beq.n	800679c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2280      	movs	r2, #128	; 0x80
 8006796:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e22c      	b.n	8006bf6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a5c      	ldr	r2, [pc, #368]	; (8006914 <HAL_DMA_Abort_IT+0x1a0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d04a      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a5b      	ldr	r2, [pc, #364]	; (8006918 <HAL_DMA_Abort_IT+0x1a4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d045      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a59      	ldr	r2, [pc, #356]	; (800691c <HAL_DMA_Abort_IT+0x1a8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d040      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a58      	ldr	r2, [pc, #352]	; (8006920 <HAL_DMA_Abort_IT+0x1ac>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d03b      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a56      	ldr	r2, [pc, #344]	; (8006924 <HAL_DMA_Abort_IT+0x1b0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d036      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a55      	ldr	r2, [pc, #340]	; (8006928 <HAL_DMA_Abort_IT+0x1b4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d031      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a53      	ldr	r2, [pc, #332]	; (800692c <HAL_DMA_Abort_IT+0x1b8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d02c      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a52      	ldr	r2, [pc, #328]	; (8006930 <HAL_DMA_Abort_IT+0x1bc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d027      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a50      	ldr	r2, [pc, #320]	; (8006934 <HAL_DMA_Abort_IT+0x1c0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d022      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a4f      	ldr	r2, [pc, #316]	; (8006938 <HAL_DMA_Abort_IT+0x1c4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d01d      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a4d      	ldr	r2, [pc, #308]	; (800693c <HAL_DMA_Abort_IT+0x1c8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d018      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a4c      	ldr	r2, [pc, #304]	; (8006940 <HAL_DMA_Abort_IT+0x1cc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a4a      	ldr	r2, [pc, #296]	; (8006944 <HAL_DMA_Abort_IT+0x1d0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00e      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a49      	ldr	r2, [pc, #292]	; (8006948 <HAL_DMA_Abort_IT+0x1d4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d009      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a47      	ldr	r2, [pc, #284]	; (800694c <HAL_DMA_Abort_IT+0x1d8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d004      	beq.n	800683c <HAL_DMA_Abort_IT+0xc8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a46      	ldr	r2, [pc, #280]	; (8006950 <HAL_DMA_Abort_IT+0x1dc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d101      	bne.n	8006840 <HAL_DMA_Abort_IT+0xcc>
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_DMA_Abort_IT+0xce>
 8006840:	2300      	movs	r3, #0
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8086 	beq.w	8006954 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2204      	movs	r2, #4
 800684c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a2f      	ldr	r2, [pc, #188]	; (8006914 <HAL_DMA_Abort_IT+0x1a0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d04a      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a2e      	ldr	r2, [pc, #184]	; (8006918 <HAL_DMA_Abort_IT+0x1a4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d045      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a2c      	ldr	r2, [pc, #176]	; (800691c <HAL_DMA_Abort_IT+0x1a8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d040      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a2b      	ldr	r2, [pc, #172]	; (8006920 <HAL_DMA_Abort_IT+0x1ac>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d03b      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a29      	ldr	r2, [pc, #164]	; (8006924 <HAL_DMA_Abort_IT+0x1b0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d036      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a28      	ldr	r2, [pc, #160]	; (8006928 <HAL_DMA_Abort_IT+0x1b4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d031      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <HAL_DMA_Abort_IT+0x1b8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02c      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a25      	ldr	r2, [pc, #148]	; (8006930 <HAL_DMA_Abort_IT+0x1bc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d027      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a23      	ldr	r2, [pc, #140]	; (8006934 <HAL_DMA_Abort_IT+0x1c0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d022      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a22      	ldr	r2, [pc, #136]	; (8006938 <HAL_DMA_Abort_IT+0x1c4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01d      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <HAL_DMA_Abort_IT+0x1c8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d018      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <HAL_DMA_Abort_IT+0x1cc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <HAL_DMA_Abort_IT+0x1d0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00e      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <HAL_DMA_Abort_IT+0x1d4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d009      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <HAL_DMA_Abort_IT+0x1d8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x17c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a19      	ldr	r2, [pc, #100]	; (8006950 <HAL_DMA_Abort_IT+0x1dc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d108      	bne.n	8006902 <HAL_DMA_Abort_IT+0x18e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e178      	b.n	8006bf4 <HAL_DMA_Abort_IT+0x480>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e16f      	b.n	8006bf4 <HAL_DMA_Abort_IT+0x480>
 8006914:	40020010 	.word	0x40020010
 8006918:	40020028 	.word	0x40020028
 800691c:	40020040 	.word	0x40020040
 8006920:	40020058 	.word	0x40020058
 8006924:	40020070 	.word	0x40020070
 8006928:	40020088 	.word	0x40020088
 800692c:	400200a0 	.word	0x400200a0
 8006930:	400200b8 	.word	0x400200b8
 8006934:	40020410 	.word	0x40020410
 8006938:	40020428 	.word	0x40020428
 800693c:	40020440 	.word	0x40020440
 8006940:	40020458 	.word	0x40020458
 8006944:	40020470 	.word	0x40020470
 8006948:	40020488 	.word	0x40020488
 800694c:	400204a0 	.word	0x400204a0
 8006950:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 020e 	bic.w	r2, r2, #14
 8006962:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6c      	ldr	r2, [pc, #432]	; (8006b1c <HAL_DMA_Abort_IT+0x3a8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d04a      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a6b      	ldr	r2, [pc, #428]	; (8006b20 <HAL_DMA_Abort_IT+0x3ac>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d045      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a69      	ldr	r2, [pc, #420]	; (8006b24 <HAL_DMA_Abort_IT+0x3b0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d040      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a68      	ldr	r2, [pc, #416]	; (8006b28 <HAL_DMA_Abort_IT+0x3b4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d03b      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a66      	ldr	r2, [pc, #408]	; (8006b2c <HAL_DMA_Abort_IT+0x3b8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d036      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a65      	ldr	r2, [pc, #404]	; (8006b30 <HAL_DMA_Abort_IT+0x3bc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d031      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a63      	ldr	r2, [pc, #396]	; (8006b34 <HAL_DMA_Abort_IT+0x3c0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d02c      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a62      	ldr	r2, [pc, #392]	; (8006b38 <HAL_DMA_Abort_IT+0x3c4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d027      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a60      	ldr	r2, [pc, #384]	; (8006b3c <HAL_DMA_Abort_IT+0x3c8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d022      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5f      	ldr	r2, [pc, #380]	; (8006b40 <HAL_DMA_Abort_IT+0x3cc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d01d      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5d      	ldr	r2, [pc, #372]	; (8006b44 <HAL_DMA_Abort_IT+0x3d0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a5c      	ldr	r2, [pc, #368]	; (8006b48 <HAL_DMA_Abort_IT+0x3d4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a5a      	ldr	r2, [pc, #360]	; (8006b4c <HAL_DMA_Abort_IT+0x3d8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00e      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a59      	ldr	r2, [pc, #356]	; (8006b50 <HAL_DMA_Abort_IT+0x3dc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a57      	ldr	r2, [pc, #348]	; (8006b54 <HAL_DMA_Abort_IT+0x3e0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x290>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a56      	ldr	r2, [pc, #344]	; (8006b58 <HAL_DMA_Abort_IT+0x3e4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <HAL_DMA_Abort_IT+0x2a2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e007      	b.n	8006a26 <HAL_DMA_Abort_IT+0x2b2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3c      	ldr	r2, [pc, #240]	; (8006b1c <HAL_DMA_Abort_IT+0x3a8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d072      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a3a      	ldr	r2, [pc, #232]	; (8006b20 <HAL_DMA_Abort_IT+0x3ac>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d06d      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a39      	ldr	r2, [pc, #228]	; (8006b24 <HAL_DMA_Abort_IT+0x3b0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d068      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a37      	ldr	r2, [pc, #220]	; (8006b28 <HAL_DMA_Abort_IT+0x3b4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d063      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a36      	ldr	r2, [pc, #216]	; (8006b2c <HAL_DMA_Abort_IT+0x3b8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d05e      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a34      	ldr	r2, [pc, #208]	; (8006b30 <HAL_DMA_Abort_IT+0x3bc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d059      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a33      	ldr	r2, [pc, #204]	; (8006b34 <HAL_DMA_Abort_IT+0x3c0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d054      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a31      	ldr	r2, [pc, #196]	; (8006b38 <HAL_DMA_Abort_IT+0x3c4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04f      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a30      	ldr	r2, [pc, #192]	; (8006b3c <HAL_DMA_Abort_IT+0x3c8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d04a      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2e      	ldr	r2, [pc, #184]	; (8006b40 <HAL_DMA_Abort_IT+0x3cc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d045      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2d      	ldr	r2, [pc, #180]	; (8006b44 <HAL_DMA_Abort_IT+0x3d0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2b      	ldr	r2, [pc, #172]	; (8006b48 <HAL_DMA_Abort_IT+0x3d4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <HAL_DMA_Abort_IT+0x3d8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d036      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a28      	ldr	r2, [pc, #160]	; (8006b50 <HAL_DMA_Abort_IT+0x3dc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d031      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a27      	ldr	r2, [pc, #156]	; (8006b54 <HAL_DMA_Abort_IT+0x3e0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d02c      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a25      	ldr	r2, [pc, #148]	; (8006b58 <HAL_DMA_Abort_IT+0x3e4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <HAL_DMA_Abort_IT+0x3e8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d022      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <HAL_DMA_Abort_IT+0x3ec>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <HAL_DMA_Abort_IT+0x3f0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <HAL_DMA_Abort_IT+0x3f4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <HAL_DMA_Abort_IT+0x3f8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <HAL_DMA_Abort_IT+0x3fc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1b      	ldr	r2, [pc, #108]	; (8006b74 <HAL_DMA_Abort_IT+0x400>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x3a2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <HAL_DMA_Abort_IT+0x404>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d132      	bne.n	8006b7c <HAL_DMA_Abort_IT+0x408>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e031      	b.n	8006b7e <HAL_DMA_Abort_IT+0x40a>
 8006b1a:	bf00      	nop
 8006b1c:	40020010 	.word	0x40020010
 8006b20:	40020028 	.word	0x40020028
 8006b24:	40020040 	.word	0x40020040
 8006b28:	40020058 	.word	0x40020058
 8006b2c:	40020070 	.word	0x40020070
 8006b30:	40020088 	.word	0x40020088
 8006b34:	400200a0 	.word	0x400200a0
 8006b38:	400200b8 	.word	0x400200b8
 8006b3c:	40020410 	.word	0x40020410
 8006b40:	40020428 	.word	0x40020428
 8006b44:	40020440 	.word	0x40020440
 8006b48:	40020458 	.word	0x40020458
 8006b4c:	40020470 	.word	0x40020470
 8006b50:	40020488 	.word	0x40020488
 8006b54:	400204a0 	.word	0x400204a0
 8006b58:	400204b8 	.word	0x400204b8
 8006b5c:	58025408 	.word	0x58025408
 8006b60:	5802541c 	.word	0x5802541c
 8006b64:	58025430 	.word	0x58025430
 8006b68:	58025444 	.word	0x58025444
 8006b6c:	58025458 	.word	0x58025458
 8006b70:	5802546c 	.word	0x5802546c
 8006b74:	58025480 	.word	0x58025480
 8006b78:	58025494 	.word	0x58025494
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d028      	beq.n	8006bd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006bb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop

08006c00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c0c:	4b67      	ldr	r3, [pc, #412]	; (8006dac <HAL_DMA_IRQHandler+0x1ac>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a67      	ldr	r2, [pc, #412]	; (8006db0 <HAL_DMA_IRQHandler+0x1b0>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	0a9b      	lsrs	r3, r3, #10
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5f      	ldr	r2, [pc, #380]	; (8006db4 <HAL_DMA_IRQHandler+0x1b4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d04a      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a5d      	ldr	r2, [pc, #372]	; (8006db8 <HAL_DMA_IRQHandler+0x1b8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d045      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a5c      	ldr	r2, [pc, #368]	; (8006dbc <HAL_DMA_IRQHandler+0x1bc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d040      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a5a      	ldr	r2, [pc, #360]	; (8006dc0 <HAL_DMA_IRQHandler+0x1c0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d03b      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a59      	ldr	r2, [pc, #356]	; (8006dc4 <HAL_DMA_IRQHandler+0x1c4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d036      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a57      	ldr	r2, [pc, #348]	; (8006dc8 <HAL_DMA_IRQHandler+0x1c8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d031      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a56      	ldr	r2, [pc, #344]	; (8006dcc <HAL_DMA_IRQHandler+0x1cc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d02c      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a54      	ldr	r2, [pc, #336]	; (8006dd0 <HAL_DMA_IRQHandler+0x1d0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d027      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a53      	ldr	r2, [pc, #332]	; (8006dd4 <HAL_DMA_IRQHandler+0x1d4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d022      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a51      	ldr	r2, [pc, #324]	; (8006dd8 <HAL_DMA_IRQHandler+0x1d8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d01d      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a50      	ldr	r2, [pc, #320]	; (8006ddc <HAL_DMA_IRQHandler+0x1dc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a4e      	ldr	r2, [pc, #312]	; (8006de0 <HAL_DMA_IRQHandler+0x1e0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a4d      	ldr	r2, [pc, #308]	; (8006de4 <HAL_DMA_IRQHandler+0x1e4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a4b      	ldr	r2, [pc, #300]	; (8006de8 <HAL_DMA_IRQHandler+0x1e8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a4a      	ldr	r2, [pc, #296]	; (8006dec <HAL_DMA_IRQHandler+0x1ec>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a48      	ldr	r2, [pc, #288]	; (8006df0 <HAL_DMA_IRQHandler+0x1f0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <HAL_DMA_IRQHandler+0xd6>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xd8>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 842b 	beq.w	8007534 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	4013      	ands	r3, r2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80a2 	beq.w	8006e38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2e      	ldr	r2, [pc, #184]	; (8006db4 <HAL_DMA_IRQHandler+0x1b4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d04a      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <HAL_DMA_IRQHandler+0x1b8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d045      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <HAL_DMA_IRQHandler+0x1bc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d040      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <HAL_DMA_IRQHandler+0x1c0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d03b      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a28      	ldr	r2, [pc, #160]	; (8006dc4 <HAL_DMA_IRQHandler+0x1c4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d036      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <HAL_DMA_IRQHandler+0x1c8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d031      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <HAL_DMA_IRQHandler+0x1cc>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d02c      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <HAL_DMA_IRQHandler+0x1d0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d027      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <HAL_DMA_IRQHandler+0x1d4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d022      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <HAL_DMA_IRQHandler+0x1d8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d01d      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <HAL_DMA_IRQHandler+0x1dc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d018      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <HAL_DMA_IRQHandler+0x1e0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <HAL_DMA_IRQHandler+0x1e4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00e      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <HAL_DMA_IRQHandler+0x1e8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d009      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_DMA_IRQHandler+0x1ec>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d004      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <HAL_DMA_IRQHandler+0x1f0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d12f      	bne.n	8006df4 <HAL_DMA_IRQHandler+0x1f4>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf14      	ite	ne
 8006da2:	2301      	movne	r3, #1
 8006da4:	2300      	moveq	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	e02e      	b.n	8006e08 <HAL_DMA_IRQHandler+0x208>
 8006daa:	bf00      	nop
 8006dac:	24000018 	.word	0x24000018
 8006db0:	1b4e81b5 	.word	0x1b4e81b5
 8006db4:	40020010 	.word	0x40020010
 8006db8:	40020028 	.word	0x40020028
 8006dbc:	40020040 	.word	0x40020040
 8006dc0:	40020058 	.word	0x40020058
 8006dc4:	40020070 	.word	0x40020070
 8006dc8:	40020088 	.word	0x40020088
 8006dcc:	400200a0 	.word	0x400200a0
 8006dd0:	400200b8 	.word	0x400200b8
 8006dd4:	40020410 	.word	0x40020410
 8006dd8:	40020428 	.word	0x40020428
 8006ddc:	40020440 	.word	0x40020440
 8006de0:	40020458 	.word	0x40020458
 8006de4:	40020470 	.word	0x40020470
 8006de8:	40020488 	.word	0x40020488
 8006dec:	400204a0 	.word	0x400204a0
 8006df0:	400204b8 	.word	0x400204b8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d015      	beq.n	8006e38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0204 	bic.w	r2, r2, #4
 8006e1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2208      	movs	r2, #8
 8006e26:	409a      	lsls	r2, r3
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	f043 0201 	orr.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	fa22 f303 	lsr.w	r3, r2, r3
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d06e      	beq.n	8006f2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a69      	ldr	r2, [pc, #420]	; (8006ff8 <HAL_DMA_IRQHandler+0x3f8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d04a      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a67      	ldr	r2, [pc, #412]	; (8006ffc <HAL_DMA_IRQHandler+0x3fc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d045      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a66      	ldr	r2, [pc, #408]	; (8007000 <HAL_DMA_IRQHandler+0x400>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d040      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a64      	ldr	r2, [pc, #400]	; (8007004 <HAL_DMA_IRQHandler+0x404>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d03b      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a63      	ldr	r2, [pc, #396]	; (8007008 <HAL_DMA_IRQHandler+0x408>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d036      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a61      	ldr	r2, [pc, #388]	; (800700c <HAL_DMA_IRQHandler+0x40c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a60      	ldr	r2, [pc, #384]	; (8007010 <HAL_DMA_IRQHandler+0x410>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d02c      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a5e      	ldr	r2, [pc, #376]	; (8007014 <HAL_DMA_IRQHandler+0x414>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d027      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a5d      	ldr	r2, [pc, #372]	; (8007018 <HAL_DMA_IRQHandler+0x418>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a5b      	ldr	r2, [pc, #364]	; (800701c <HAL_DMA_IRQHandler+0x41c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a5a      	ldr	r2, [pc, #360]	; (8007020 <HAL_DMA_IRQHandler+0x420>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a58      	ldr	r2, [pc, #352]	; (8007024 <HAL_DMA_IRQHandler+0x424>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a57      	ldr	r2, [pc, #348]	; (8007028 <HAL_DMA_IRQHandler+0x428>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a55      	ldr	r2, [pc, #340]	; (800702c <HAL_DMA_IRQHandler+0x42c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a54      	ldr	r2, [pc, #336]	; (8007030 <HAL_DMA_IRQHandler+0x430>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a52      	ldr	r2, [pc, #328]	; (8007034 <HAL_DMA_IRQHandler+0x434>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10a      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x304>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e003      	b.n	8006f0c <HAL_DMA_IRQHandler+0x30c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2201      	movs	r2, #1
 8006f1a:	409a      	lsls	r2, r3
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	f043 0202 	orr.w	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2204      	movs	r2, #4
 8006f36:	409a      	lsls	r2, r3
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 808f 	beq.w	8007060 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2c      	ldr	r2, [pc, #176]	; (8006ff8 <HAL_DMA_IRQHandler+0x3f8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d04a      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <HAL_DMA_IRQHandler+0x3fc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d045      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a29      	ldr	r2, [pc, #164]	; (8007000 <HAL_DMA_IRQHandler+0x400>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d040      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a27      	ldr	r2, [pc, #156]	; (8007004 <HAL_DMA_IRQHandler+0x404>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d03b      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a26      	ldr	r2, [pc, #152]	; (8007008 <HAL_DMA_IRQHandler+0x408>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d036      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a24      	ldr	r2, [pc, #144]	; (800700c <HAL_DMA_IRQHandler+0x40c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d031      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a23      	ldr	r2, [pc, #140]	; (8007010 <HAL_DMA_IRQHandler+0x410>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d02c      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	; (8007014 <HAL_DMA_IRQHandler+0x414>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d027      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_DMA_IRQHandler+0x418>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d022      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1e      	ldr	r2, [pc, #120]	; (800701c <HAL_DMA_IRQHandler+0x41c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01d      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_DMA_IRQHandler+0x420>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d018      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1b      	ldr	r2, [pc, #108]	; (8007024 <HAL_DMA_IRQHandler+0x424>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <HAL_DMA_IRQHandler+0x428>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00e      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a18      	ldr	r2, [pc, #96]	; (800702c <HAL_DMA_IRQHandler+0x42c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	; (8007030 <HAL_DMA_IRQHandler+0x430>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d004      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a15      	ldr	r2, [pc, #84]	; (8007034 <HAL_DMA_IRQHandler+0x434>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d12a      	bne.n	8007038 <HAL_DMA_IRQHandler+0x438>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf14      	ite	ne
 8006ff0:	2301      	movne	r3, #1
 8006ff2:	2300      	moveq	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e023      	b.n	8007040 <HAL_DMA_IRQHandler+0x440>
 8006ff8:	40020010 	.word	0x40020010
 8006ffc:	40020028 	.word	0x40020028
 8007000:	40020040 	.word	0x40020040
 8007004:	40020058 	.word	0x40020058
 8007008:	40020070 	.word	0x40020070
 800700c:	40020088 	.word	0x40020088
 8007010:	400200a0 	.word	0x400200a0
 8007014:	400200b8 	.word	0x400200b8
 8007018:	40020410 	.word	0x40020410
 800701c:	40020428 	.word	0x40020428
 8007020:	40020440 	.word	0x40020440
 8007024:	40020458 	.word	0x40020458
 8007028:	40020470 	.word	0x40020470
 800702c:	40020488 	.word	0x40020488
 8007030:	400204a0 	.word	0x400204a0
 8007034:	400204b8 	.word	0x400204b8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2204      	movs	r2, #4
 800704e:	409a      	lsls	r2, r3
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	f043 0204 	orr.w	r2, r3, #4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	2210      	movs	r2, #16
 800706a:	409a      	lsls	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	4013      	ands	r3, r2
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a6 	beq.w	80071c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a85      	ldr	r2, [pc, #532]	; (8007290 <HAL_DMA_IRQHandler+0x690>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d04a      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a83      	ldr	r2, [pc, #524]	; (8007294 <HAL_DMA_IRQHandler+0x694>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d045      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a82      	ldr	r2, [pc, #520]	; (8007298 <HAL_DMA_IRQHandler+0x698>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d040      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a80      	ldr	r2, [pc, #512]	; (800729c <HAL_DMA_IRQHandler+0x69c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d03b      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a7f      	ldr	r2, [pc, #508]	; (80072a0 <HAL_DMA_IRQHandler+0x6a0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d036      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a7d      	ldr	r2, [pc, #500]	; (80072a4 <HAL_DMA_IRQHandler+0x6a4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d031      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a7c      	ldr	r2, [pc, #496]	; (80072a8 <HAL_DMA_IRQHandler+0x6a8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d02c      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a7a      	ldr	r2, [pc, #488]	; (80072ac <HAL_DMA_IRQHandler+0x6ac>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d027      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a79      	ldr	r2, [pc, #484]	; (80072b0 <HAL_DMA_IRQHandler+0x6b0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d022      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a77      	ldr	r2, [pc, #476]	; (80072b4 <HAL_DMA_IRQHandler+0x6b4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01d      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a76      	ldr	r2, [pc, #472]	; (80072b8 <HAL_DMA_IRQHandler+0x6b8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d018      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a74      	ldr	r2, [pc, #464]	; (80072bc <HAL_DMA_IRQHandler+0x6bc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a73      	ldr	r2, [pc, #460]	; (80072c0 <HAL_DMA_IRQHandler+0x6c0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a71      	ldr	r2, [pc, #452]	; (80072c4 <HAL_DMA_IRQHandler+0x6c4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a70      	ldr	r2, [pc, #448]	; (80072c8 <HAL_DMA_IRQHandler+0x6c8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a6e      	ldr	r2, [pc, #440]	; (80072cc <HAL_DMA_IRQHandler+0x6cc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10a      	bne.n	800712c <HAL_DMA_IRQHandler+0x52c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf14      	ite	ne
 8007124:	2301      	movne	r3, #1
 8007126:	2300      	moveq	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	e009      	b.n	8007140 <HAL_DMA_IRQHandler+0x540>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	bf14      	ite	ne
 800713a:	2301      	movne	r3, #1
 800713c:	2300      	moveq	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d03e      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	2210      	movs	r2, #16
 800714e:	409a      	lsls	r2, r3
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d018      	beq.n	8007194 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d108      	bne.n	8007182 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d024      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
 8007180:	e01f      	b.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007186:	2b00      	cmp	r3, #0
 8007188:	d01b      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	e016      	b.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0208 	bic.w	r2, r2, #8
 80071b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	2220      	movs	r2, #32
 80071cc:	409a      	lsls	r2, r3
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 8110 	beq.w	80073f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <HAL_DMA_IRQHandler+0x690>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d04a      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2b      	ldr	r2, [pc, #172]	; (8007294 <HAL_DMA_IRQHandler+0x694>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d045      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a29      	ldr	r2, [pc, #164]	; (8007298 <HAL_DMA_IRQHandler+0x698>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d040      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a28      	ldr	r2, [pc, #160]	; (800729c <HAL_DMA_IRQHandler+0x69c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03b      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <HAL_DMA_IRQHandler+0x6a0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d036      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <HAL_DMA_IRQHandler+0x6a4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d031      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a23      	ldr	r2, [pc, #140]	; (80072a8 <HAL_DMA_IRQHandler+0x6a8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a22      	ldr	r2, [pc, #136]	; (80072ac <HAL_DMA_IRQHandler+0x6ac>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d027      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a20      	ldr	r2, [pc, #128]	; (80072b0 <HAL_DMA_IRQHandler+0x6b0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <HAL_DMA_IRQHandler+0x6b4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <HAL_DMA_IRQHandler+0x6b8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1c      	ldr	r2, [pc, #112]	; (80072bc <HAL_DMA_IRQHandler+0x6bc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1a      	ldr	r2, [pc, #104]	; (80072c0 <HAL_DMA_IRQHandler+0x6c0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <HAL_DMA_IRQHandler+0x6c4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <HAL_DMA_IRQHandler+0x6c8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a16      	ldr	r2, [pc, #88]	; (80072cc <HAL_DMA_IRQHandler+0x6cc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d12b      	bne.n	80072d0 <HAL_DMA_IRQHandler+0x6d0>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b00      	cmp	r3, #0
 8007284:	bf14      	ite	ne
 8007286:	2301      	movne	r3, #1
 8007288:	2300      	moveq	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	e02a      	b.n	80072e4 <HAL_DMA_IRQHandler+0x6e4>
 800728e:	bf00      	nop
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8087 	beq.w	80073f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	2220      	movs	r2, #32
 80072f4:	409a      	lsls	r2, r3
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b04      	cmp	r3, #4
 8007304:	d139      	bne.n	800737a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0216 	bic.w	r2, r2, #22
 8007314:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695a      	ldr	r2, [r3, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007324:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <HAL_DMA_IRQHandler+0x736>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0208 	bic.w	r2, r2, #8
 8007344:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	223f      	movs	r2, #63	; 0x3f
 8007350:	409a      	lsls	r2, r3
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 834a 	beq.w	8007a04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
          }
          return;
 8007378:	e344      	b.n	8007a04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d018      	beq.n	80073ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739a:	2b00      	cmp	r3, #0
 800739c:	d02c      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
 80073a6:	e027      	b.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d023      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	e01e      	b.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0210 	bic.w	r2, r2, #16
 80073d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8306 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8088 	beq.w	8007520 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2204      	movs	r2, #4
 8007414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a7a      	ldr	r2, [pc, #488]	; (8007608 <HAL_DMA_IRQHandler+0xa08>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d04a      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a79      	ldr	r2, [pc, #484]	; (800760c <HAL_DMA_IRQHandler+0xa0c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d045      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a77      	ldr	r2, [pc, #476]	; (8007610 <HAL_DMA_IRQHandler+0xa10>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d040      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a76      	ldr	r2, [pc, #472]	; (8007614 <HAL_DMA_IRQHandler+0xa14>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d03b      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a74      	ldr	r2, [pc, #464]	; (8007618 <HAL_DMA_IRQHandler+0xa18>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d036      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a73      	ldr	r2, [pc, #460]	; (800761c <HAL_DMA_IRQHandler+0xa1c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d031      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a71      	ldr	r2, [pc, #452]	; (8007620 <HAL_DMA_IRQHandler+0xa20>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d02c      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a70      	ldr	r2, [pc, #448]	; (8007624 <HAL_DMA_IRQHandler+0xa24>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d027      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a6e      	ldr	r2, [pc, #440]	; (8007628 <HAL_DMA_IRQHandler+0xa28>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d022      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a6d      	ldr	r2, [pc, #436]	; (800762c <HAL_DMA_IRQHandler+0xa2c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d01d      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a6b      	ldr	r2, [pc, #428]	; (8007630 <HAL_DMA_IRQHandler+0xa30>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d018      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a6a      	ldr	r2, [pc, #424]	; (8007634 <HAL_DMA_IRQHandler+0xa34>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a68      	ldr	r2, [pc, #416]	; (8007638 <HAL_DMA_IRQHandler+0xa38>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00e      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a67      	ldr	r2, [pc, #412]	; (800763c <HAL_DMA_IRQHandler+0xa3c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d009      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a65      	ldr	r2, [pc, #404]	; (8007640 <HAL_DMA_IRQHandler+0xa40>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a64      	ldr	r2, [pc, #400]	; (8007644 <HAL_DMA_IRQHandler+0xa44>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d108      	bne.n	80074ca <HAL_DMA_IRQHandler+0x8ca>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e007      	b.n	80074da <HAL_DMA_IRQHandler+0x8da>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d307      	bcc.n	80074f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f2      	bne.n	80074da <HAL_DMA_IRQHandler+0x8da>
 80074f4:	e000      	b.n	80074f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80074f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2203      	movs	r2, #3
 800750a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800750e:	e003      	b.n	8007518 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8272 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
 8007532:	e26c      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a43      	ldr	r2, [pc, #268]	; (8007648 <HAL_DMA_IRQHandler+0xa48>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d022      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a42      	ldr	r2, [pc, #264]	; (800764c <HAL_DMA_IRQHandler+0xa4c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d01d      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a40      	ldr	r2, [pc, #256]	; (8007650 <HAL_DMA_IRQHandler+0xa50>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <HAL_DMA_IRQHandler+0xa54>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a3d      	ldr	r2, [pc, #244]	; (8007658 <HAL_DMA_IRQHandler+0xa58>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3c      	ldr	r2, [pc, #240]	; (800765c <HAL_DMA_IRQHandler+0xa5c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a3a      	ldr	r2, [pc, #232]	; (8007660 <HAL_DMA_IRQHandler+0xa60>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a39      	ldr	r2, [pc, #228]	; (8007664 <HAL_DMA_IRQHandler+0xa64>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d101      	bne.n	8007588 <HAL_DMA_IRQHandler+0x988>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <HAL_DMA_IRQHandler+0x98a>
 8007588:	2300      	movs	r3, #0
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 823f 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2204      	movs	r2, #4
 80075a2:	409a      	lsls	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80cd 	beq.w	8007748 <HAL_DMA_IRQHandler+0xb48>
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80c7 	beq.w	8007748 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2204      	movs	r2, #4
 80075c4:	409a      	lsls	r2, r3
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d049      	beq.n	8007668 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 8210 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f0:	e20a      	b.n	8007a08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8206 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007604:	e200      	b.n	8007a08 <HAL_DMA_IRQHandler+0xe08>
 8007606:	bf00      	nop
 8007608:	40020010 	.word	0x40020010
 800760c:	40020028 	.word	0x40020028
 8007610:	40020040 	.word	0x40020040
 8007614:	40020058 	.word	0x40020058
 8007618:	40020070 	.word	0x40020070
 800761c:	40020088 	.word	0x40020088
 8007620:	400200a0 	.word	0x400200a0
 8007624:	400200b8 	.word	0x400200b8
 8007628:	40020410 	.word	0x40020410
 800762c:	40020428 	.word	0x40020428
 8007630:	40020440 	.word	0x40020440
 8007634:	40020458 	.word	0x40020458
 8007638:	40020470 	.word	0x40020470
 800763c:	40020488 	.word	0x40020488
 8007640:	400204a0 	.word	0x400204a0
 8007644:	400204b8 	.word	0x400204b8
 8007648:	58025408 	.word	0x58025408
 800764c:	5802541c 	.word	0x5802541c
 8007650:	58025430 	.word	0x58025430
 8007654:	58025444 	.word	0x58025444
 8007658:	58025458 	.word	0x58025458
 800765c:	5802546c 	.word	0x5802546c
 8007660:	58025480 	.word	0x58025480
 8007664:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d160      	bne.n	8007734 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a7f      	ldr	r2, [pc, #508]	; (8007874 <HAL_DMA_IRQHandler+0xc74>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d04a      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a7d      	ldr	r2, [pc, #500]	; (8007878 <HAL_DMA_IRQHandler+0xc78>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d045      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a7c      	ldr	r2, [pc, #496]	; (800787c <HAL_DMA_IRQHandler+0xc7c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d040      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a7a      	ldr	r2, [pc, #488]	; (8007880 <HAL_DMA_IRQHandler+0xc80>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d03b      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a79      	ldr	r2, [pc, #484]	; (8007884 <HAL_DMA_IRQHandler+0xc84>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d036      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a77      	ldr	r2, [pc, #476]	; (8007888 <HAL_DMA_IRQHandler+0xc88>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d031      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a76      	ldr	r2, [pc, #472]	; (800788c <HAL_DMA_IRQHandler+0xc8c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d02c      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a74      	ldr	r2, [pc, #464]	; (8007890 <HAL_DMA_IRQHandler+0xc90>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d027      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a73      	ldr	r2, [pc, #460]	; (8007894 <HAL_DMA_IRQHandler+0xc94>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d022      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a71      	ldr	r2, [pc, #452]	; (8007898 <HAL_DMA_IRQHandler+0xc98>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01d      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a70      	ldr	r2, [pc, #448]	; (800789c <HAL_DMA_IRQHandler+0xc9c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d018      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a6e      	ldr	r2, [pc, #440]	; (80078a0 <HAL_DMA_IRQHandler+0xca0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a6d      	ldr	r2, [pc, #436]	; (80078a4 <HAL_DMA_IRQHandler+0xca4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a6b      	ldr	r2, [pc, #428]	; (80078a8 <HAL_DMA_IRQHandler+0xca8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a6a      	ldr	r2, [pc, #424]	; (80078ac <HAL_DMA_IRQHandler+0xcac>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a68      	ldr	r2, [pc, #416]	; (80078b0 <HAL_DMA_IRQHandler+0xcb0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d108      	bne.n	8007724 <HAL_DMA_IRQHandler+0xb24>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0208 	bic.w	r2, r2, #8
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e007      	b.n	8007734 <HAL_DMA_IRQHandler+0xb34>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0204 	bic.w	r2, r2, #4
 8007732:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8165 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007746:	e15f      	b.n	8007a08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	2202      	movs	r2, #2
 8007752:	409a      	lsls	r2, r3
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	4013      	ands	r3, r2
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80c5 	beq.w	80078e8 <HAL_DMA_IRQHandler+0xce8>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80bf 	beq.w	80078e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2202      	movs	r2, #2
 8007774:	409a      	lsls	r2, r3
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d018      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 813a 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077a0:	e134      	b.n	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8130 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077b4:	e12a      	b.n	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 8089 	bne.w	80078d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2b      	ldr	r2, [pc, #172]	; (8007874 <HAL_DMA_IRQHandler+0xc74>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d04a      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a29      	ldr	r2, [pc, #164]	; (8007878 <HAL_DMA_IRQHandler+0xc78>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d045      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a28      	ldr	r2, [pc, #160]	; (800787c <HAL_DMA_IRQHandler+0xc7c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d040      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a26      	ldr	r2, [pc, #152]	; (8007880 <HAL_DMA_IRQHandler+0xc80>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d03b      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a25      	ldr	r2, [pc, #148]	; (8007884 <HAL_DMA_IRQHandler+0xc84>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d036      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a23      	ldr	r2, [pc, #140]	; (8007888 <HAL_DMA_IRQHandler+0xc88>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d031      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a22      	ldr	r2, [pc, #136]	; (800788c <HAL_DMA_IRQHandler+0xc8c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d02c      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a20      	ldr	r2, [pc, #128]	; (8007890 <HAL_DMA_IRQHandler+0xc90>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d027      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1f      	ldr	r2, [pc, #124]	; (8007894 <HAL_DMA_IRQHandler+0xc94>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d022      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <HAL_DMA_IRQHandler+0xc98>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d01d      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1c      	ldr	r2, [pc, #112]	; (800789c <HAL_DMA_IRQHandler+0xc9c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d018      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1a      	ldr	r2, [pc, #104]	; (80078a0 <HAL_DMA_IRQHandler+0xca0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d013      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a19      	ldr	r2, [pc, #100]	; (80078a4 <HAL_DMA_IRQHandler+0xca4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00e      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <HAL_DMA_IRQHandler+0xca8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d009      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a16      	ldr	r2, [pc, #88]	; (80078ac <HAL_DMA_IRQHandler+0xcac>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_DMA_IRQHandler+0xc62>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <HAL_DMA_IRQHandler+0xcb0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d128      	bne.n	80078b4 <HAL_DMA_IRQHandler+0xcb4>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0214 	bic.w	r2, r2, #20
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	e027      	b.n	80078c4 <HAL_DMA_IRQHandler+0xcc4>
 8007874:	40020010 	.word	0x40020010
 8007878:	40020028 	.word	0x40020028
 800787c:	40020040 	.word	0x40020040
 8007880:	40020058 	.word	0x40020058
 8007884:	40020070 	.word	0x40020070
 8007888:	40020088 	.word	0x40020088
 800788c:	400200a0 	.word	0x400200a0
 8007890:	400200b8 	.word	0x400200b8
 8007894:	40020410 	.word	0x40020410
 8007898:	40020428 	.word	0x40020428
 800789c:	40020440 	.word	0x40020440
 80078a0:	40020458 	.word	0x40020458
 80078a4:	40020470 	.word	0x40020470
 80078a8:	40020488 	.word	0x40020488
 80078ac:	400204a0 	.word	0x400204a0
 80078b0:	400204b8 	.word	0x400204b8
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 020a 	bic.w	r2, r2, #10
 80078c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 8097 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078e6:	e091      	b.n	8007a0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2208      	movs	r2, #8
 80078f2:	409a      	lsls	r2, r3
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8088 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8082 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a41      	ldr	r2, [pc, #260]	; (8007a14 <HAL_DMA_IRQHandler+0xe14>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d04a      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a3f      	ldr	r2, [pc, #252]	; (8007a18 <HAL_DMA_IRQHandler+0xe18>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d045      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a3e      	ldr	r2, [pc, #248]	; (8007a1c <HAL_DMA_IRQHandler+0xe1c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d040      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a3c      	ldr	r2, [pc, #240]	; (8007a20 <HAL_DMA_IRQHandler+0xe20>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d03b      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a3b      	ldr	r2, [pc, #236]	; (8007a24 <HAL_DMA_IRQHandler+0xe24>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d036      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a39      	ldr	r2, [pc, #228]	; (8007a28 <HAL_DMA_IRQHandler+0xe28>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d031      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a38      	ldr	r2, [pc, #224]	; (8007a2c <HAL_DMA_IRQHandler+0xe2c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d02c      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a36      	ldr	r2, [pc, #216]	; (8007a30 <HAL_DMA_IRQHandler+0xe30>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d027      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a35      	ldr	r2, [pc, #212]	; (8007a34 <HAL_DMA_IRQHandler+0xe34>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d022      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a33      	ldr	r2, [pc, #204]	; (8007a38 <HAL_DMA_IRQHandler+0xe38>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01d      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a32      	ldr	r2, [pc, #200]	; (8007a3c <HAL_DMA_IRQHandler+0xe3c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d018      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a30      	ldr	r2, [pc, #192]	; (8007a40 <HAL_DMA_IRQHandler+0xe40>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2f      	ldr	r2, [pc, #188]	; (8007a44 <HAL_DMA_IRQHandler+0xe44>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00e      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a2d      	ldr	r2, [pc, #180]	; (8007a48 <HAL_DMA_IRQHandler+0xe48>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a2c      	ldr	r2, [pc, #176]	; (8007a4c <HAL_DMA_IRQHandler+0xe4c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a2a      	ldr	r2, [pc, #168]	; (8007a50 <HAL_DMA_IRQHandler+0xe50>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d108      	bne.n	80079bc <HAL_DMA_IRQHandler+0xdbc>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 021c 	bic.w	r2, r2, #28
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e007      	b.n	80079cc <HAL_DMA_IRQHandler+0xdcc>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 020e 	bic.w	r2, r2, #14
 80079ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2201      	movs	r2, #1
 80079d6:	409a      	lsls	r2, r3
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	e004      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a0e:	3728      	adds	r7, #40	; 0x28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	40020010 	.word	0x40020010
 8007a18:	40020028 	.word	0x40020028
 8007a1c:	40020040 	.word	0x40020040
 8007a20:	40020058 	.word	0x40020058
 8007a24:	40020070 	.word	0x40020070
 8007a28:	40020088 	.word	0x40020088
 8007a2c:	400200a0 	.word	0x400200a0
 8007a30:	400200b8 	.word	0x400200b8
 8007a34:	40020410 	.word	0x40020410
 8007a38:	40020428 	.word	0x40020428
 8007a3c:	40020440 	.word	0x40020440
 8007a40:	40020458 	.word	0x40020458
 8007a44:	40020470 	.word	0x40020470
 8007a48:	40020488 	.word	0x40020488
 8007a4c:	400204a0 	.word	0x400204a0
 8007a50:	400204b8 	.word	0x400204b8

08007a54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a7f      	ldr	r2, [pc, #508]	; (8007c70 <DMA_SetConfig+0x21c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d072      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a7d      	ldr	r2, [pc, #500]	; (8007c74 <DMA_SetConfig+0x220>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d06d      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a7c      	ldr	r2, [pc, #496]	; (8007c78 <DMA_SetConfig+0x224>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d068      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a7a      	ldr	r2, [pc, #488]	; (8007c7c <DMA_SetConfig+0x228>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d063      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a79      	ldr	r2, [pc, #484]	; (8007c80 <DMA_SetConfig+0x22c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d05e      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a77      	ldr	r2, [pc, #476]	; (8007c84 <DMA_SetConfig+0x230>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d059      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a76      	ldr	r2, [pc, #472]	; (8007c88 <DMA_SetConfig+0x234>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d054      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a74      	ldr	r2, [pc, #464]	; (8007c8c <DMA_SetConfig+0x238>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d04f      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a73      	ldr	r2, [pc, #460]	; (8007c90 <DMA_SetConfig+0x23c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d04a      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a71      	ldr	r2, [pc, #452]	; (8007c94 <DMA_SetConfig+0x240>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d045      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a70      	ldr	r2, [pc, #448]	; (8007c98 <DMA_SetConfig+0x244>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d040      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a6e      	ldr	r2, [pc, #440]	; (8007c9c <DMA_SetConfig+0x248>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d03b      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a6d      	ldr	r2, [pc, #436]	; (8007ca0 <DMA_SetConfig+0x24c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d036      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a6b      	ldr	r2, [pc, #428]	; (8007ca4 <DMA_SetConfig+0x250>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d031      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a6a      	ldr	r2, [pc, #424]	; (8007ca8 <DMA_SetConfig+0x254>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d02c      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a68      	ldr	r2, [pc, #416]	; (8007cac <DMA_SetConfig+0x258>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d027      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a67      	ldr	r2, [pc, #412]	; (8007cb0 <DMA_SetConfig+0x25c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a65      	ldr	r2, [pc, #404]	; (8007cb4 <DMA_SetConfig+0x260>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01d      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a64      	ldr	r2, [pc, #400]	; (8007cb8 <DMA_SetConfig+0x264>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a62      	ldr	r2, [pc, #392]	; (8007cbc <DMA_SetConfig+0x268>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a61      	ldr	r2, [pc, #388]	; (8007cc0 <DMA_SetConfig+0x26c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a5f      	ldr	r2, [pc, #380]	; (8007cc4 <DMA_SetConfig+0x270>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a5e      	ldr	r2, [pc, #376]	; (8007cc8 <DMA_SetConfig+0x274>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <DMA_SetConfig+0x10a>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a5c      	ldr	r2, [pc, #368]	; (8007ccc <DMA_SetConfig+0x278>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d101      	bne.n	8007b62 <DMA_SetConfig+0x10e>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <DMA_SetConfig+0x110>
 8007b62:	2300      	movs	r3, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00d      	beq.n	8007b84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a39      	ldr	r2, [pc, #228]	; (8007c70 <DMA_SetConfig+0x21c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d04a      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a38      	ldr	r2, [pc, #224]	; (8007c74 <DMA_SetConfig+0x220>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d045      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a36      	ldr	r2, [pc, #216]	; (8007c78 <DMA_SetConfig+0x224>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d040      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a35      	ldr	r2, [pc, #212]	; (8007c7c <DMA_SetConfig+0x228>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d03b      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a33      	ldr	r2, [pc, #204]	; (8007c80 <DMA_SetConfig+0x22c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d036      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a32      	ldr	r2, [pc, #200]	; (8007c84 <DMA_SetConfig+0x230>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d031      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a30      	ldr	r2, [pc, #192]	; (8007c88 <DMA_SetConfig+0x234>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d02c      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a2f      	ldr	r2, [pc, #188]	; (8007c8c <DMA_SetConfig+0x238>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d027      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a2d      	ldr	r2, [pc, #180]	; (8007c90 <DMA_SetConfig+0x23c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d022      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a2c      	ldr	r2, [pc, #176]	; (8007c94 <DMA_SetConfig+0x240>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d01d      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <DMA_SetConfig+0x244>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d018      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a29      	ldr	r2, [pc, #164]	; (8007c9c <DMA_SetConfig+0x248>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d013      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a27      	ldr	r2, [pc, #156]	; (8007ca0 <DMA_SetConfig+0x24c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00e      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a26      	ldr	r2, [pc, #152]	; (8007ca4 <DMA_SetConfig+0x250>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d009      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <DMA_SetConfig+0x254>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <DMA_SetConfig+0x1d0>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a23      	ldr	r2, [pc, #140]	; (8007cac <DMA_SetConfig+0x258>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d101      	bne.n	8007c28 <DMA_SetConfig+0x1d4>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <DMA_SetConfig+0x1d6>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d059      	beq.n	8007ce2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	223f      	movs	r2, #63	; 0x3f
 8007c38:	409a      	lsls	r2, r3
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d138      	bne.n	8007cd0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c6e:	e086      	b.n	8007d7e <DMA_SetConfig+0x32a>
 8007c70:	40020010 	.word	0x40020010
 8007c74:	40020028 	.word	0x40020028
 8007c78:	40020040 	.word	0x40020040
 8007c7c:	40020058 	.word	0x40020058
 8007c80:	40020070 	.word	0x40020070
 8007c84:	40020088 	.word	0x40020088
 8007c88:	400200a0 	.word	0x400200a0
 8007c8c:	400200b8 	.word	0x400200b8
 8007c90:	40020410 	.word	0x40020410
 8007c94:	40020428 	.word	0x40020428
 8007c98:	40020440 	.word	0x40020440
 8007c9c:	40020458 	.word	0x40020458
 8007ca0:	40020470 	.word	0x40020470
 8007ca4:	40020488 	.word	0x40020488
 8007ca8:	400204a0 	.word	0x400204a0
 8007cac:	400204b8 	.word	0x400204b8
 8007cb0:	58025408 	.word	0x58025408
 8007cb4:	5802541c 	.word	0x5802541c
 8007cb8:	58025430 	.word	0x58025430
 8007cbc:	58025444 	.word	0x58025444
 8007cc0:	58025458 	.word	0x58025458
 8007cc4:	5802546c 	.word	0x5802546c
 8007cc8:	58025480 	.word	0x58025480
 8007ccc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	60da      	str	r2, [r3, #12]
}
 8007ce0:	e04d      	b.n	8007d7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a29      	ldr	r2, [pc, #164]	; (8007d8c <DMA_SetConfig+0x338>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d022      	beq.n	8007d32 <DMA_SetConfig+0x2de>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a27      	ldr	r2, [pc, #156]	; (8007d90 <DMA_SetConfig+0x33c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d01d      	beq.n	8007d32 <DMA_SetConfig+0x2de>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a26      	ldr	r2, [pc, #152]	; (8007d94 <DMA_SetConfig+0x340>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d018      	beq.n	8007d32 <DMA_SetConfig+0x2de>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a24      	ldr	r2, [pc, #144]	; (8007d98 <DMA_SetConfig+0x344>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d013      	beq.n	8007d32 <DMA_SetConfig+0x2de>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a23      	ldr	r2, [pc, #140]	; (8007d9c <DMA_SetConfig+0x348>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00e      	beq.n	8007d32 <DMA_SetConfig+0x2de>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a21      	ldr	r2, [pc, #132]	; (8007da0 <DMA_SetConfig+0x34c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d009      	beq.n	8007d32 <DMA_SetConfig+0x2de>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a20      	ldr	r2, [pc, #128]	; (8007da4 <DMA_SetConfig+0x350>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d004      	beq.n	8007d32 <DMA_SetConfig+0x2de>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1e      	ldr	r2, [pc, #120]	; (8007da8 <DMA_SetConfig+0x354>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d101      	bne.n	8007d36 <DMA_SetConfig+0x2e2>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e000      	b.n	8007d38 <DMA_SetConfig+0x2e4>
 8007d36:	2300      	movs	r3, #0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d020      	beq.n	8007d7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2201      	movs	r2, #1
 8007d46:	409a      	lsls	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d108      	bne.n	8007d6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	60da      	str	r2, [r3, #12]
}
 8007d6c:	e007      	b.n	8007d7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	60da      	str	r2, [r3, #12]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	58025408 	.word	0x58025408
 8007d90:	5802541c 	.word	0x5802541c
 8007d94:	58025430 	.word	0x58025430
 8007d98:	58025444 	.word	0x58025444
 8007d9c:	58025458 	.word	0x58025458
 8007da0:	5802546c 	.word	0x5802546c
 8007da4:	58025480 	.word	0x58025480
 8007da8:	58025494 	.word	0x58025494

08007dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a42      	ldr	r2, [pc, #264]	; (8007ec4 <DMA_CalcBaseAndBitshift+0x118>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d04a      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a41      	ldr	r2, [pc, #260]	; (8007ec8 <DMA_CalcBaseAndBitshift+0x11c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d045      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a3f      	ldr	r2, [pc, #252]	; (8007ecc <DMA_CalcBaseAndBitshift+0x120>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d040      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a3e      	ldr	r2, [pc, #248]	; (8007ed0 <DMA_CalcBaseAndBitshift+0x124>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d03b      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a3c      	ldr	r2, [pc, #240]	; (8007ed4 <DMA_CalcBaseAndBitshift+0x128>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d036      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a3b      	ldr	r2, [pc, #236]	; (8007ed8 <DMA_CalcBaseAndBitshift+0x12c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d031      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a39      	ldr	r2, [pc, #228]	; (8007edc <DMA_CalcBaseAndBitshift+0x130>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d02c      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a38      	ldr	r2, [pc, #224]	; (8007ee0 <DMA_CalcBaseAndBitshift+0x134>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d027      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a36      	ldr	r2, [pc, #216]	; (8007ee4 <DMA_CalcBaseAndBitshift+0x138>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d022      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a35      	ldr	r2, [pc, #212]	; (8007ee8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d01d      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a33      	ldr	r2, [pc, #204]	; (8007eec <DMA_CalcBaseAndBitshift+0x140>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d018      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a32      	ldr	r2, [pc, #200]	; (8007ef0 <DMA_CalcBaseAndBitshift+0x144>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d013      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a30      	ldr	r2, [pc, #192]	; (8007ef4 <DMA_CalcBaseAndBitshift+0x148>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00e      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a2f      	ldr	r2, [pc, #188]	; (8007ef8 <DMA_CalcBaseAndBitshift+0x14c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d009      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a2d      	ldr	r2, [pc, #180]	; (8007efc <DMA_CalcBaseAndBitshift+0x150>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d004      	beq.n	8007e54 <DMA_CalcBaseAndBitshift+0xa8>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a2c      	ldr	r2, [pc, #176]	; (8007f00 <DMA_CalcBaseAndBitshift+0x154>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d101      	bne.n	8007e58 <DMA_CalcBaseAndBitshift+0xac>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <DMA_CalcBaseAndBitshift+0xae>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d024      	beq.n	8007ea8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	3b10      	subs	r3, #16
 8007e66:	4a27      	ldr	r2, [pc, #156]	; (8007f04 <DMA_CalcBaseAndBitshift+0x158>)
 8007e68:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6c:	091b      	lsrs	r3, r3, #4
 8007e6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	4a24      	ldr	r2, [pc, #144]	; (8007f08 <DMA_CalcBaseAndBitshift+0x15c>)
 8007e78:	5cd3      	ldrb	r3, [r2, r3]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d908      	bls.n	8007e98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4b1f      	ldr	r3, [pc, #124]	; (8007f0c <DMA_CalcBaseAndBitshift+0x160>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	1d1a      	adds	r2, r3, #4
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	659a      	str	r2, [r3, #88]	; 0x58
 8007e96:	e00d      	b.n	8007eb4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4b1b      	ldr	r3, [pc, #108]	; (8007f0c <DMA_CalcBaseAndBitshift+0x160>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ea6:	e005      	b.n	8007eb4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	40020010 	.word	0x40020010
 8007ec8:	40020028 	.word	0x40020028
 8007ecc:	40020040 	.word	0x40020040
 8007ed0:	40020058 	.word	0x40020058
 8007ed4:	40020070 	.word	0x40020070
 8007ed8:	40020088 	.word	0x40020088
 8007edc:	400200a0 	.word	0x400200a0
 8007ee0:	400200b8 	.word	0x400200b8
 8007ee4:	40020410 	.word	0x40020410
 8007ee8:	40020428 	.word	0x40020428
 8007eec:	40020440 	.word	0x40020440
 8007ef0:	40020458 	.word	0x40020458
 8007ef4:	40020470 	.word	0x40020470
 8007ef8:	40020488 	.word	0x40020488
 8007efc:	400204a0 	.word	0x400204a0
 8007f00:	400204b8 	.word	0x400204b8
 8007f04:	aaaaaaab 	.word	0xaaaaaaab
 8007f08:	0800ef44 	.word	0x0800ef44
 8007f0c:	fffffc00 	.word	0xfffffc00

08007f10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d120      	bne.n	8007f66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d858      	bhi.n	8007fde <DMA_CheckFifoParam+0xce>
 8007f2c:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <DMA_CheckFifoParam+0x24>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f57 	.word	0x08007f57
 8007f3c:	08007f45 	.word	0x08007f45
 8007f40:	08007fdf 	.word	0x08007fdf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d048      	beq.n	8007fe2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f54:	e045      	b.n	8007fe2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f5e:	d142      	bne.n	8007fe6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f64:	e03f      	b.n	8007fe6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f6e:	d123      	bne.n	8007fb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d838      	bhi.n	8007fea <DMA_CheckFifoParam+0xda>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <DMA_CheckFifoParam+0x70>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007f97 	.word	0x08007f97
 8007f88:	08007f91 	.word	0x08007f91
 8007f8c:	08007fa9 	.word	0x08007fa9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
        break;
 8007f94:	e030      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d025      	beq.n	8007fee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fa6:	e022      	b.n	8007fee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fb0:	d11f      	bne.n	8007ff2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fb6:	e01c      	b.n	8007ff2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d902      	bls.n	8007fc6 <DMA_CheckFifoParam+0xb6>
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d003      	beq.n	8007fcc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007fc4:	e018      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8007fca:	e015      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00e      	beq.n	8007ff6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
    break;
 8007fdc:	e00b      	b.n	8007ff6 <DMA_CheckFifoParam+0xe6>
        break;
 8007fde:	bf00      	nop
 8007fe0:	e00a      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8007fe2:	bf00      	nop
 8007fe4:	e008      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8007fe6:	bf00      	nop
 8007fe8:	e006      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8007fea:	bf00      	nop
 8007fec:	e004      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8007fee:	bf00      	nop
 8007ff0:	e002      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ff2:	bf00      	nop
 8007ff4:	e000      	b.n	8007ff8 <DMA_CheckFifoParam+0xe8>
    break;
 8007ff6:	bf00      	nop
    }
  }

  return status;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop

08008008 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a38      	ldr	r2, [pc, #224]	; (80080fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d022      	beq.n	8008066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a36      	ldr	r2, [pc, #216]	; (8008100 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d01d      	beq.n	8008066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a35      	ldr	r2, [pc, #212]	; (8008104 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d018      	beq.n	8008066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a33      	ldr	r2, [pc, #204]	; (8008108 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a32      	ldr	r2, [pc, #200]	; (800810c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00e      	beq.n	8008066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a30      	ldr	r2, [pc, #192]	; (8008110 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d009      	beq.n	8008066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a2f      	ldr	r2, [pc, #188]	; (8008114 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d004      	beq.n	8008066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a2d      	ldr	r2, [pc, #180]	; (8008118 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d101      	bne.n	800806a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008066:	2301      	movs	r3, #1
 8008068:	e000      	b.n	800806c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800806a:	2300      	movs	r3, #0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01a      	beq.n	80080a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	3b08      	subs	r3, #8
 8008078:	4a28      	ldr	r2, [pc, #160]	; (800811c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	091b      	lsrs	r3, r3, #4
 8008080:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4b26      	ldr	r3, [pc, #152]	; (8008120 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a24      	ldr	r2, [pc, #144]	; (8008124 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008094:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f003 031f 	and.w	r3, r3, #31
 800809c:	2201      	movs	r2, #1
 800809e:	409a      	lsls	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80080a4:	e024      	b.n	80080f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	3b10      	subs	r3, #16
 80080ae:	4a1e      	ldr	r2, [pc, #120]	; (8008128 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80080b0:	fba2 2303 	umull	r2, r3, r2, r3
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4a1c      	ldr	r2, [pc, #112]	; (800812c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d806      	bhi.n	80080ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4a1b      	ldr	r2, [pc, #108]	; (8008130 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d902      	bls.n	80080ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3308      	adds	r3, #8
 80080cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4b18      	ldr	r3, [pc, #96]	; (8008134 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a16      	ldr	r2, [pc, #88]	; (8008138 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80080e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80080f0:	bf00      	nop
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	58025408 	.word	0x58025408
 8008100:	5802541c 	.word	0x5802541c
 8008104:	58025430 	.word	0x58025430
 8008108:	58025444 	.word	0x58025444
 800810c:	58025458 	.word	0x58025458
 8008110:	5802546c 	.word	0x5802546c
 8008114:	58025480 	.word	0x58025480
 8008118:	58025494 	.word	0x58025494
 800811c:	cccccccd 	.word	0xcccccccd
 8008120:	16009600 	.word	0x16009600
 8008124:	58025880 	.word	0x58025880
 8008128:	aaaaaaab 	.word	0xaaaaaaab
 800812c:	400204b8 	.word	0x400204b8
 8008130:	4002040f 	.word	0x4002040f
 8008134:	10008200 	.word	0x10008200
 8008138:	40020880 	.word	0x40020880

0800813c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d04a      	beq.n	80081e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d847      	bhi.n	80081e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a25      	ldr	r2, [pc, #148]	; (80081f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d022      	beq.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a24      	ldr	r2, [pc, #144]	; (80081f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d01d      	beq.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a22      	ldr	r2, [pc, #136]	; (80081fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d018      	beq.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a21      	ldr	r2, [pc, #132]	; (8008200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d013      	beq.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00e      	beq.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1e      	ldr	r2, [pc, #120]	; (8008208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d009      	beq.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1c      	ldr	r2, [pc, #112]	; (800820c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d101      	bne.n	80081ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80081ac:	2300      	movs	r3, #0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4b17      	ldr	r3, [pc, #92]	; (8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a15      	ldr	r2, [pc, #84]	; (8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80081c4:	671a      	str	r2, [r3, #112]	; 0x70
 80081c6:	e009      	b.n	80081dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	461a      	mov	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a11      	ldr	r2, [pc, #68]	; (8008220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80081da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3b01      	subs	r3, #1
 80081e0:	2201      	movs	r2, #1
 80081e2:	409a      	lsls	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80081e8:	bf00      	nop
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	58025408 	.word	0x58025408
 80081f8:	5802541c 	.word	0x5802541c
 80081fc:	58025430 	.word	0x58025430
 8008200:	58025444 	.word	0x58025444
 8008204:	58025458 	.word	0x58025458
 8008208:	5802546c 	.word	0x5802546c
 800820c:	58025480 	.word	0x58025480
 8008210:	58025494 	.word	0x58025494
 8008214:	1600963f 	.word	0x1600963f
 8008218:	58025940 	.word	0x58025940
 800821c:	1000823f 	.word	0x1000823f
 8008220:	40020940 	.word	0x40020940

08008224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008224:	b480      	push	{r7}
 8008226:	b089      	sub	sp, #36	; 0x24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800822e:	2300      	movs	r3, #0
 8008230:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008232:	4b86      	ldr	r3, [pc, #536]	; (800844c <HAL_GPIO_Init+0x228>)
 8008234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008236:	e18c      	b.n	8008552 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	2101      	movs	r1, #1
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	fa01 f303 	lsl.w	r3, r1, r3
 8008244:	4013      	ands	r3, r2
 8008246:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 817e 	beq.w	800854c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	2b01      	cmp	r3, #1
 800825a:	d005      	beq.n	8008268 <HAL_GPIO_Init+0x44>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d130      	bne.n	80082ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	2203      	movs	r2, #3
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	43db      	mvns	r3, r3
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	4013      	ands	r3, r2
 800827e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	4313      	orrs	r3, r2
 8008290:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800829e:	2201      	movs	r2, #1
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	fa02 f303 	lsl.w	r3, r2, r3
 80082a6:	43db      	mvns	r3, r3
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	4013      	ands	r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	091b      	lsrs	r3, r3, #4
 80082b4:	f003 0201 	and.w	r2, r3, #1
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d017      	beq.n	8008306 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	2203      	movs	r2, #3
 80082e2:	fa02 f303 	lsl.w	r3, r2, r3
 80082e6:	43db      	mvns	r3, r3
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	4013      	ands	r3, r2
 80082ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689a      	ldr	r2, [r3, #8]
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d123      	bne.n	800835a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	08da      	lsrs	r2, r3, #3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3208      	adds	r2, #8
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	220f      	movs	r2, #15
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	43db      	mvns	r3, r3
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	4013      	ands	r3, r2
 8008334:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691a      	ldr	r2, [r3, #16]
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	fa02 f303 	lsl.w	r3, r2, r3
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	4313      	orrs	r3, r2
 800834a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	08da      	lsrs	r2, r3, #3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3208      	adds	r2, #8
 8008354:	69b9      	ldr	r1, [r7, #24]
 8008356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	2203      	movs	r2, #3
 8008366:	fa02 f303 	lsl.w	r3, r2, r3
 800836a:	43db      	mvns	r3, r3
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	4013      	ands	r3, r2
 8008370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f003 0203 	and.w	r2, r3, #3
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	4313      	orrs	r3, r2
 8008386:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80d8 	beq.w	800854c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800839c:	4b2c      	ldr	r3, [pc, #176]	; (8008450 <HAL_GPIO_Init+0x22c>)
 800839e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083a2:	4a2b      	ldr	r2, [pc, #172]	; (8008450 <HAL_GPIO_Init+0x22c>)
 80083a4:	f043 0302 	orr.w	r3, r3, #2
 80083a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80083ac:	4b28      	ldr	r3, [pc, #160]	; (8008450 <HAL_GPIO_Init+0x22c>)
 80083ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083ba:	4a26      	ldr	r2, [pc, #152]	; (8008454 <HAL_GPIO_Init+0x230>)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	089b      	lsrs	r3, r3, #2
 80083c0:	3302      	adds	r3, #2
 80083c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	220f      	movs	r2, #15
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	43db      	mvns	r3, r3
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	4013      	ands	r3, r2
 80083dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <HAL_GPIO_Init+0x234>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d04a      	beq.n	800847c <HAL_GPIO_Init+0x258>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a1c      	ldr	r2, [pc, #112]	; (800845c <HAL_GPIO_Init+0x238>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d02b      	beq.n	8008446 <HAL_GPIO_Init+0x222>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a1b      	ldr	r2, [pc, #108]	; (8008460 <HAL_GPIO_Init+0x23c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d025      	beq.n	8008442 <HAL_GPIO_Init+0x21e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a1a      	ldr	r2, [pc, #104]	; (8008464 <HAL_GPIO_Init+0x240>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d01f      	beq.n	800843e <HAL_GPIO_Init+0x21a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a19      	ldr	r2, [pc, #100]	; (8008468 <HAL_GPIO_Init+0x244>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d019      	beq.n	800843a <HAL_GPIO_Init+0x216>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a18      	ldr	r2, [pc, #96]	; (800846c <HAL_GPIO_Init+0x248>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d013      	beq.n	8008436 <HAL_GPIO_Init+0x212>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a17      	ldr	r2, [pc, #92]	; (8008470 <HAL_GPIO_Init+0x24c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00d      	beq.n	8008432 <HAL_GPIO_Init+0x20e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a16      	ldr	r2, [pc, #88]	; (8008474 <HAL_GPIO_Init+0x250>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <HAL_GPIO_Init+0x20a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a15      	ldr	r2, [pc, #84]	; (8008478 <HAL_GPIO_Init+0x254>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d101      	bne.n	800842a <HAL_GPIO_Init+0x206>
 8008426:	2309      	movs	r3, #9
 8008428:	e029      	b.n	800847e <HAL_GPIO_Init+0x25a>
 800842a:	230a      	movs	r3, #10
 800842c:	e027      	b.n	800847e <HAL_GPIO_Init+0x25a>
 800842e:	2307      	movs	r3, #7
 8008430:	e025      	b.n	800847e <HAL_GPIO_Init+0x25a>
 8008432:	2306      	movs	r3, #6
 8008434:	e023      	b.n	800847e <HAL_GPIO_Init+0x25a>
 8008436:	2305      	movs	r3, #5
 8008438:	e021      	b.n	800847e <HAL_GPIO_Init+0x25a>
 800843a:	2304      	movs	r3, #4
 800843c:	e01f      	b.n	800847e <HAL_GPIO_Init+0x25a>
 800843e:	2303      	movs	r3, #3
 8008440:	e01d      	b.n	800847e <HAL_GPIO_Init+0x25a>
 8008442:	2302      	movs	r3, #2
 8008444:	e01b      	b.n	800847e <HAL_GPIO_Init+0x25a>
 8008446:	2301      	movs	r3, #1
 8008448:	e019      	b.n	800847e <HAL_GPIO_Init+0x25a>
 800844a:	bf00      	nop
 800844c:	58000080 	.word	0x58000080
 8008450:	58024400 	.word	0x58024400
 8008454:	58000400 	.word	0x58000400
 8008458:	58020000 	.word	0x58020000
 800845c:	58020400 	.word	0x58020400
 8008460:	58020800 	.word	0x58020800
 8008464:	58020c00 	.word	0x58020c00
 8008468:	58021000 	.word	0x58021000
 800846c:	58021400 	.word	0x58021400
 8008470:	58021800 	.word	0x58021800
 8008474:	58021c00 	.word	0x58021c00
 8008478:	58022400 	.word	0x58022400
 800847c:	2300      	movs	r3, #0
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	f002 0203 	and.w	r2, r2, #3
 8008484:	0092      	lsls	r2, r2, #2
 8008486:	4093      	lsls	r3, r2
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	4313      	orrs	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800848e:	4938      	ldr	r1, [pc, #224]	; (8008570 <HAL_GPIO_Init+0x34c>)
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	089b      	lsrs	r3, r3, #2
 8008494:	3302      	adds	r3, #2
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800849c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	43db      	mvns	r3, r3
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	4013      	ands	r3, r2
 80084ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80084c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80084ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	43db      	mvns	r3, r3
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	4013      	ands	r3, r2
 80084da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80084f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	43db      	mvns	r3, r3
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	4013      	ands	r3, r2
 8008506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	43db      	mvns	r3, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4013      	ands	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	3301      	adds	r3, #1
 8008550:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	fa22 f303 	lsr.w	r3, r2, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	f47f ae6b 	bne.w	8008238 <HAL_GPIO_Init+0x14>
  }
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	3724      	adds	r7, #36	; 0x24
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	58000400 	.word	0x58000400

08008574 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008582:	4b72      	ldr	r3, [pc, #456]	; (800874c <HAL_GPIO_DeInit+0x1d8>)
 8008584:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008586:	e0d3      	b.n	8008730 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008588:	2201      	movs	r2, #1
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	4013      	ands	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80c6 	beq.w	800872a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800859e:	4a6c      	ldr	r2, [pc, #432]	; (8008750 <HAL_GPIO_DeInit+0x1dc>)
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	089b      	lsrs	r3, r3, #2
 80085a4:	3302      	adds	r3, #2
 80085a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085aa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	220f      	movs	r2, #15
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4013      	ands	r3, r2
 80085be:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a64      	ldr	r2, [pc, #400]	; (8008754 <HAL_GPIO_DeInit+0x1e0>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d031      	beq.n	800862c <HAL_GPIO_DeInit+0xb8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a63      	ldr	r2, [pc, #396]	; (8008758 <HAL_GPIO_DeInit+0x1e4>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d02b      	beq.n	8008628 <HAL_GPIO_DeInit+0xb4>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a62      	ldr	r2, [pc, #392]	; (800875c <HAL_GPIO_DeInit+0x1e8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d025      	beq.n	8008624 <HAL_GPIO_DeInit+0xb0>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a61      	ldr	r2, [pc, #388]	; (8008760 <HAL_GPIO_DeInit+0x1ec>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d01f      	beq.n	8008620 <HAL_GPIO_DeInit+0xac>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a60      	ldr	r2, [pc, #384]	; (8008764 <HAL_GPIO_DeInit+0x1f0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d019      	beq.n	800861c <HAL_GPIO_DeInit+0xa8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a5f      	ldr	r2, [pc, #380]	; (8008768 <HAL_GPIO_DeInit+0x1f4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <HAL_GPIO_DeInit+0xa4>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a5e      	ldr	r2, [pc, #376]	; (800876c <HAL_GPIO_DeInit+0x1f8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00d      	beq.n	8008614 <HAL_GPIO_DeInit+0xa0>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a5d      	ldr	r2, [pc, #372]	; (8008770 <HAL_GPIO_DeInit+0x1fc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d007      	beq.n	8008610 <HAL_GPIO_DeInit+0x9c>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a5c      	ldr	r2, [pc, #368]	; (8008774 <HAL_GPIO_DeInit+0x200>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d101      	bne.n	800860c <HAL_GPIO_DeInit+0x98>
 8008608:	2309      	movs	r3, #9
 800860a:	e010      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 800860c:	230a      	movs	r3, #10
 800860e:	e00e      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 8008610:	2307      	movs	r3, #7
 8008612:	e00c      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 8008614:	2306      	movs	r3, #6
 8008616:	e00a      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 8008618:	2305      	movs	r3, #5
 800861a:	e008      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 800861c:	2304      	movs	r3, #4
 800861e:	e006      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 8008620:	2303      	movs	r3, #3
 8008622:	e004      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 8008624:	2302      	movs	r3, #2
 8008626:	e002      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <HAL_GPIO_DeInit+0xba>
 800862c:	2300      	movs	r3, #0
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	f002 0203 	and.w	r2, r2, #3
 8008634:	0092      	lsls	r2, r2, #2
 8008636:	4093      	lsls	r3, r2
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	d136      	bne.n	80086ac <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	43db      	mvns	r3, r3
 8008646:	401a      	ands	r2, r3
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	43db      	mvns	r3, r3
 8008654:	401a      	ands	r2, r3
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800865a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	43db      	mvns	r3, r3
 8008664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008668:	4013      	ands	r3, r2
 800866a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800866c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	43db      	mvns	r3, r3
 8008676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800867a:	4013      	ands	r3, r2
 800867c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	220f      	movs	r2, #15
 8008688:	fa02 f303 	lsl.w	r3, r2, r3
 800868c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800868e:	4a30      	ldr	r2, [pc, #192]	; (8008750 <HAL_GPIO_DeInit+0x1dc>)
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	089b      	lsrs	r3, r3, #2
 8008694:	3302      	adds	r3, #2
 8008696:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	43da      	mvns	r2, r3
 800869e:	482c      	ldr	r0, [pc, #176]	; (8008750 <HAL_GPIO_DeInit+0x1dc>)
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	089b      	lsrs	r3, r3, #2
 80086a4:	400a      	ands	r2, r1
 80086a6:	3302      	adds	r3, #2
 80086a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	2103      	movs	r1, #3
 80086b6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	08da      	lsrs	r2, r3, #3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3208      	adds	r2, #8
 80086c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	220f      	movs	r2, #15
 80086d6:	fa02 f303 	lsl.w	r3, r2, r3
 80086da:	43db      	mvns	r3, r3
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	08d2      	lsrs	r2, r2, #3
 80086e0:	4019      	ands	r1, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3208      	adds	r2, #8
 80086e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	2103      	movs	r1, #3
 80086f4:	fa01 f303 	lsl.w	r3, r1, r3
 80086f8:	43db      	mvns	r3, r3
 80086fa:	401a      	ands	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	2101      	movs	r1, #1
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	fa01 f303 	lsl.w	r3, r1, r3
 800870c:	43db      	mvns	r3, r3
 800870e:	401a      	ands	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	2103      	movs	r1, #3
 800871e:	fa01 f303 	lsl.w	r3, r1, r3
 8008722:	43db      	mvns	r3, r3
 8008724:	401a      	ands	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	609a      	str	r2, [r3, #8]
    }

    position++;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	3301      	adds	r3, #1
 800872e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	f47f af25 	bne.w	8008588 <HAL_GPIO_DeInit+0x14>
  }
}
 800873e:	bf00      	nop
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	58000080 	.word	0x58000080
 8008750:	58000400 	.word	0x58000400
 8008754:	58020000 	.word	0x58020000
 8008758:	58020400 	.word	0x58020400
 800875c:	58020800 	.word	0x58020800
 8008760:	58020c00 	.word	0x58020c00
 8008764:	58021000 	.word	0x58021000
 8008768:	58021400 	.word	0x58021400
 800876c:	58021800 	.word	0x58021800
 8008770:	58021c00 	.word	0x58021c00
 8008774:	58022400 	.word	0x58022400

08008778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	807b      	strh	r3, [r7, #2]
 8008784:	4613      	mov	r3, r2
 8008786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008788:	787b      	ldrb	r3, [r7, #1]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800878e:	887a      	ldrh	r2, [r7, #2]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008794:	e003      	b.n	800879e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008796:	887b      	ldrh	r3, [r7, #2]
 8008798:	041a      	lsls	r2, r3, #16
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	619a      	str	r2, [r3, #24]
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	4603      	mov	r3, r0
 80087b2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80087b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087bc:	88fb      	ldrh	r3, [r7, #6]
 80087be:	4013      	ands	r3, r2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80087c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80087ce:	88fb      	ldrh	r3, [r7, #6]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f804 	bl	80087de <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	4603      	mov	r3, r0
 80087e6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80087fc:	4b19      	ldr	r3, [pc, #100]	; (8008864 <HAL_PWREx_ConfigSupply+0x70>)
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b04      	cmp	r3, #4
 8008806:	d00a      	beq.n	800881e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008808:	4b16      	ldr	r3, [pc, #88]	; (8008864 <HAL_PWREx_ConfigSupply+0x70>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f003 0307 	and.w	r3, r3, #7
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	429a      	cmp	r2, r3
 8008814:	d001      	beq.n	800881a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e01f      	b.n	800885a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	e01d      	b.n	800885a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800881e:	4b11      	ldr	r3, [pc, #68]	; (8008864 <HAL_PWREx_ConfigSupply+0x70>)
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f023 0207 	bic.w	r2, r3, #7
 8008826:	490f      	ldr	r1, [pc, #60]	; (8008864 <HAL_PWREx_ConfigSupply+0x70>)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4313      	orrs	r3, r2
 800882c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800882e:	f7fc fbbb 	bl	8004fa8 <HAL_GetTick>
 8008832:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008834:	e009      	b.n	800884a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008836:	f7fc fbb7 	bl	8004fa8 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008844:	d901      	bls.n	800884a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e007      	b.n	800885a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <HAL_PWREx_ConfigSupply+0x70>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008856:	d1ee      	bne.n	8008836 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	58024800 	.word	0x58024800

08008868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08c      	sub	sp, #48	; 0x30
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e39d      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 8087 	beq.w	8008996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008888:	4b88      	ldr	r3, [pc, #544]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008890:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008892:	4b86      	ldr	r3, [pc, #536]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	2b10      	cmp	r3, #16
 800889c:	d007      	beq.n	80088ae <HAL_RCC_OscConfig+0x46>
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	2b18      	cmp	r3, #24
 80088a2:	d110      	bne.n	80088c6 <HAL_RCC_OscConfig+0x5e>
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d10b      	bne.n	80088c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ae:	4b7f      	ldr	r3, [pc, #508]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d06c      	beq.n	8008994 <HAL_RCC_OscConfig+0x12c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d168      	bne.n	8008994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e377      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ce:	d106      	bne.n	80088de <HAL_RCC_OscConfig+0x76>
 80088d0:	4b76      	ldr	r3, [pc, #472]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a75      	ldr	r2, [pc, #468]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80088d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	e02e      	b.n	800893c <HAL_RCC_OscConfig+0xd4>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10c      	bne.n	8008900 <HAL_RCC_OscConfig+0x98>
 80088e6:	4b71      	ldr	r3, [pc, #452]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a70      	ldr	r2, [pc, #448]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80088ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	4b6e      	ldr	r3, [pc, #440]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a6d      	ldr	r2, [pc, #436]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80088f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e01d      	b.n	800893c <HAL_RCC_OscConfig+0xd4>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008908:	d10c      	bne.n	8008924 <HAL_RCC_OscConfig+0xbc>
 800890a:	4b68      	ldr	r3, [pc, #416]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a67      	ldr	r2, [pc, #412]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	4b65      	ldr	r3, [pc, #404]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a64      	ldr	r2, [pc, #400]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 800891c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	e00b      	b.n	800893c <HAL_RCC_OscConfig+0xd4>
 8008924:	4b61      	ldr	r3, [pc, #388]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a60      	ldr	r2, [pc, #384]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 800892a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	4b5e      	ldr	r3, [pc, #376]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a5d      	ldr	r2, [pc, #372]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800893a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d013      	beq.n	800896c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7fc fb30 	bl	8004fa8 <HAL_GetTick>
 8008948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800894c:	f7fc fb2c 	bl	8004fa8 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b64      	cmp	r3, #100	; 0x64
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e32b      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800895e:	4b53      	ldr	r3, [pc, #332]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0xe4>
 800896a:	e014      	b.n	8008996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896c:	f7fc fb1c 	bl	8004fa8 <HAL_GetTick>
 8008970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008974:	f7fc fb18 	bl	8004fa8 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b64      	cmp	r3, #100	; 0x64
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e317      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008986:	4b49      	ldr	r3, [pc, #292]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f0      	bne.n	8008974 <HAL_RCC_OscConfig+0x10c>
 8008992:	e000      	b.n	8008996 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 808c 	beq.w	8008abc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089a4:	4b41      	ldr	r3, [pc, #260]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089ae:	4b3f      	ldr	r3, [pc, #252]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d007      	beq.n	80089ca <HAL_RCC_OscConfig+0x162>
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	2b18      	cmp	r3, #24
 80089be:	d137      	bne.n	8008a30 <HAL_RCC_OscConfig+0x1c8>
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d132      	bne.n	8008a30 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089ca:	4b38      	ldr	r3, [pc, #224]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <HAL_RCC_OscConfig+0x17a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e2e9      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089e2:	4b32      	ldr	r3, [pc, #200]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f023 0219 	bic.w	r2, r3, #25
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	492f      	ldr	r1, [pc, #188]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089f4:	f7fc fad8 	bl	8004fa8 <HAL_GetTick>
 80089f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089fc:	f7fc fad4 	bl	8004fa8 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e2d3      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a0e:	4b27      	ldr	r3, [pc, #156]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0304 	and.w	r3, r3, #4
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f0      	beq.n	80089fc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a1a:	4b24      	ldr	r3, [pc, #144]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	061b      	lsls	r3, r3, #24
 8008a28:	4920      	ldr	r1, [pc, #128]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a2e:	e045      	b.n	8008abc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d026      	beq.n	8008a86 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a38:	4b1c      	ldr	r3, [pc, #112]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f023 0219 	bic.w	r2, r3, #25
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4919      	ldr	r1, [pc, #100]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4a:	f7fc faad 	bl	8004fa8 <HAL_GetTick>
 8008a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a52:	f7fc faa9 	bl	8004fa8 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e2a8      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a64:	4b11      	ldr	r3, [pc, #68]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0f0      	beq.n	8008a52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	061b      	lsls	r3, r3, #24
 8008a7e:	490b      	ldr	r1, [pc, #44]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	604b      	str	r3, [r1, #4]
 8008a84:	e01a      	b.n	8008abc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a86:	4b09      	ldr	r3, [pc, #36]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a08      	ldr	r2, [pc, #32]	; (8008aac <HAL_RCC_OscConfig+0x244>)
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a92:	f7fc fa89 	bl	8004fa8 <HAL_GetTick>
 8008a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a98:	e00a      	b.n	8008ab0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a9a:	f7fc fa85 	bl	8004fa8 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d903      	bls.n	8008ab0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e284      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
 8008aac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ab0:	4b96      	ldr	r3, [pc, #600]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1ee      	bne.n	8008a9a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d06a      	beq.n	8008b9e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ac8:	4b90      	ldr	r3, [pc, #576]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ad0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ad2:	4b8e      	ldr	r3, [pc, #568]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d007      	beq.n	8008aee <HAL_RCC_OscConfig+0x286>
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b18      	cmp	r3, #24
 8008ae2:	d11b      	bne.n	8008b1c <HAL_RCC_OscConfig+0x2b4>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d116      	bne.n	8008b1c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008aee:	4b87      	ldr	r3, [pc, #540]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <HAL_RCC_OscConfig+0x29e>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	2b80      	cmp	r3, #128	; 0x80
 8008b00:	d001      	beq.n	8008b06 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e257      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b06:	4b81      	ldr	r3, [pc, #516]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	061b      	lsls	r3, r3, #24
 8008b14:	497d      	ldr	r1, [pc, #500]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b1a:	e040      	b.n	8008b9e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d023      	beq.n	8008b6c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008b24:	4b79      	ldr	r3, [pc, #484]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a78      	ldr	r2, [pc, #480]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b30:	f7fc fa3a 	bl	8004fa8 <HAL_GetTick>
 8008b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b38:	f7fc fa36 	bl	8004fa8 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e235      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b4a:	4b70      	ldr	r3, [pc, #448]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f0      	beq.n	8008b38 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b56:	4b6d      	ldr	r3, [pc, #436]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	061b      	lsls	r3, r3, #24
 8008b64:	4969      	ldr	r1, [pc, #420]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60cb      	str	r3, [r1, #12]
 8008b6a:	e018      	b.n	8008b9e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b6c:	4b67      	ldr	r3, [pc, #412]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a66      	ldr	r2, [pc, #408]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b78:	f7fc fa16 	bl	8004fa8 <HAL_GetTick>
 8008b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b7e:	e008      	b.n	8008b92 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b80:	f7fc fa12 	bl	8004fa8 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e211      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b92:	4b5e      	ldr	r3, [pc, #376]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1f0      	bne.n	8008b80 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d036      	beq.n	8008c18 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d019      	beq.n	8008be6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bb2:	4b56      	ldr	r3, [pc, #344]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb6:	4a55      	ldr	r2, [pc, #340]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008bb8:	f043 0301 	orr.w	r3, r3, #1
 8008bbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bbe:	f7fc f9f3 	bl	8004fa8 <HAL_GetTick>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bc4:	e008      	b.n	8008bd8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bc6:	f7fc f9ef 	bl	8004fa8 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d901      	bls.n	8008bd8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e1ee      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bd8:	4b4c      	ldr	r3, [pc, #304]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0f0      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x35e>
 8008be4:	e018      	b.n	8008c18 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008be6:	4b49      	ldr	r3, [pc, #292]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bea:	4a48      	ldr	r2, [pc, #288]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf2:	f7fc f9d9 	bl	8004fa8 <HAL_GetTick>
 8008bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bf8:	e008      	b.n	8008c0c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bfa:	f7fc f9d5 	bl	8004fa8 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e1d4      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c0c:	4b3f      	ldr	r3, [pc, #252]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f0      	bne.n	8008bfa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d036      	beq.n	8008c92 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d019      	beq.n	8008c60 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c2c:	4b37      	ldr	r3, [pc, #220]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a36      	ldr	r2, [pc, #216]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008c32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c38:	f7fc f9b6 	bl	8004fa8 <HAL_GetTick>
 8008c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c3e:	e008      	b.n	8008c52 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c40:	f7fc f9b2 	bl	8004fa8 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d901      	bls.n	8008c52 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e1b1      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c52:	4b2e      	ldr	r3, [pc, #184]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0f0      	beq.n	8008c40 <HAL_RCC_OscConfig+0x3d8>
 8008c5e:	e018      	b.n	8008c92 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c60:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a29      	ldr	r2, [pc, #164]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c6c:	f7fc f99c 	bl	8004fa8 <HAL_GetTick>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c74:	f7fc f998 	bl	8004fa8 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e197      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c86:	4b21      	ldr	r3, [pc, #132]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1f0      	bne.n	8008c74 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0304 	and.w	r3, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8086 	beq.w	8008dac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ca0:	4b1b      	ldr	r3, [pc, #108]	; (8008d10 <HAL_RCC_OscConfig+0x4a8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1a      	ldr	r2, [pc, #104]	; (8008d10 <HAL_RCC_OscConfig+0x4a8>)
 8008ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008caa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cac:	f7fc f97c 	bl	8004fa8 <HAL_GetTick>
 8008cb0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008cb4:	f7fc f978 	bl	8004fa8 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b64      	cmp	r3, #100	; 0x64
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e177      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cc6:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <HAL_RCC_OscConfig+0x4a8>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0f0      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d106      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x480>
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	4a0b      	ldr	r2, [pc, #44]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008ce0:	f043 0301 	orr.w	r3, r3, #1
 8008ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce6:	e032      	b.n	8008d4e <HAL_RCC_OscConfig+0x4e6>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d111      	bne.n	8008d14 <HAL_RCC_OscConfig+0x4ac>
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf4:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008cf6:	f023 0301 	bic.w	r3, r3, #1
 8008cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8008cfc:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d00:	4a02      	ldr	r2, [pc, #8]	; (8008d0c <HAL_RCC_OscConfig+0x4a4>)
 8008d02:	f023 0304 	bic.w	r3, r3, #4
 8008d06:	6713      	str	r3, [r2, #112]	; 0x70
 8008d08:	e021      	b.n	8008d4e <HAL_RCC_OscConfig+0x4e6>
 8008d0a:	bf00      	nop
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	58024800 	.word	0x58024800
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	2b05      	cmp	r3, #5
 8008d1a:	d10c      	bne.n	8008d36 <HAL_RCC_OscConfig+0x4ce>
 8008d1c:	4b83      	ldr	r3, [pc, #524]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d20:	4a82      	ldr	r2, [pc, #520]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d22:	f043 0304 	orr.w	r3, r3, #4
 8008d26:	6713      	str	r3, [r2, #112]	; 0x70
 8008d28:	4b80      	ldr	r3, [pc, #512]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2c:	4a7f      	ldr	r2, [pc, #508]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	6713      	str	r3, [r2, #112]	; 0x70
 8008d34:	e00b      	b.n	8008d4e <HAL_RCC_OscConfig+0x4e6>
 8008d36:	4b7d      	ldr	r3, [pc, #500]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	4a7c      	ldr	r2, [pc, #496]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	6713      	str	r3, [r2, #112]	; 0x70
 8008d42:	4b7a      	ldr	r3, [pc, #488]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d46:	4a79      	ldr	r2, [pc, #484]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d48:	f023 0304 	bic.w	r3, r3, #4
 8008d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d015      	beq.n	8008d82 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d56:	f7fc f927 	bl	8004fa8 <HAL_GetTick>
 8008d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d5c:	e00a      	b.n	8008d74 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d5e:	f7fc f923 	bl	8004fa8 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d901      	bls.n	8008d74 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e120      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d74:	4b6d      	ldr	r3, [pc, #436]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0ee      	beq.n	8008d5e <HAL_RCC_OscConfig+0x4f6>
 8008d80:	e014      	b.n	8008dac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d82:	f7fc f911 	bl	8004fa8 <HAL_GetTick>
 8008d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d88:	e00a      	b.n	8008da0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d8a:	f7fc f90d 	bl	8004fa8 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e10a      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008da0:	4b62      	ldr	r3, [pc, #392]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ee      	bne.n	8008d8a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80ff 	beq.w	8008fb4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008db6:	4b5d      	ldr	r3, [pc, #372]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dbe:	2b18      	cmp	r3, #24
 8008dc0:	f000 80ba 	beq.w	8008f38 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	f040 8095 	bne.w	8008ef8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dce:	4b57      	ldr	r3, [pc, #348]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a56      	ldr	r2, [pc, #344]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dda:	f7fc f8e5 	bl	8004fa8 <HAL_GetTick>
 8008dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008de0:	e008      	b.n	8008df4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008de2:	f7fc f8e1 	bl	8004fa8 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e0e0      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008df4:	4b4d      	ldr	r3, [pc, #308]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1f0      	bne.n	8008de2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e00:	4b4a      	ldr	r3, [pc, #296]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e04:	4b4a      	ldr	r3, [pc, #296]	; (8008f30 <HAL_RCC_OscConfig+0x6c8>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008e10:	0112      	lsls	r2, r2, #4
 8008e12:	430a      	orrs	r2, r1
 8008e14:	4945      	ldr	r1, [pc, #276]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	628b      	str	r3, [r1, #40]	; 0x28
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	025b      	lsls	r3, r3, #9
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	3b01      	subs	r3, #1
 8008e36:	041b      	lsls	r3, r3, #16
 8008e38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e42:	3b01      	subs	r3, #1
 8008e44:	061b      	lsls	r3, r3, #24
 8008e46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e4a:	4938      	ldr	r1, [pc, #224]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008e50:	4b36      	ldr	r3, [pc, #216]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	4a35      	ldr	r2, [pc, #212]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e56:	f023 0301 	bic.w	r3, r3, #1
 8008e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e5c:	4b33      	ldr	r3, [pc, #204]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e60:	4b34      	ldr	r3, [pc, #208]	; (8008f34 <HAL_RCC_OscConfig+0x6cc>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e68:	00d2      	lsls	r2, r2, #3
 8008e6a:	4930      	ldr	r1, [pc, #192]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e70:	4b2e      	ldr	r3, [pc, #184]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	f023 020c 	bic.w	r2, r3, #12
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7c:	492b      	ldr	r1, [pc, #172]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e82:	4b2a      	ldr	r3, [pc, #168]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	f023 0202 	bic.w	r2, r3, #2
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8e:	4927      	ldr	r1, [pc, #156]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e94:	4b25      	ldr	r3, [pc, #148]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	4a24      	ldr	r2, [pc, #144]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea0:	4b22      	ldr	r3, [pc, #136]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	4a21      	ldr	r2, [pc, #132]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008eac:	4b1f      	ldr	r3, [pc, #124]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	4a1e      	ldr	r2, [pc, #120]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008eb8:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	4a1b      	ldr	r2, [pc, #108]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008ebe:	f043 0301 	orr.w	r3, r3, #1
 8008ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ec4:	4b19      	ldr	r3, [pc, #100]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a18      	ldr	r2, [pc, #96]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed0:	f7fc f86a 	bl	8004fa8 <HAL_GetTick>
 8008ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ed6:	e008      	b.n	8008eea <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ed8:	f7fc f866 	bl	8004fa8 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e065      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eea:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0f0      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x670>
 8008ef6:	e05d      	b.n	8008fb4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a0b      	ldr	r2, [pc, #44]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f04:	f7fc f850 	bl	8004fa8 <HAL_GetTick>
 8008f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f0a:	e008      	b.n	8008f1e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f0c:	f7fc f84c 	bl	8004fa8 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d901      	bls.n	8008f1e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e04b      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f1e:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <HAL_RCC_OscConfig+0x6c4>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1f0      	bne.n	8008f0c <HAL_RCC_OscConfig+0x6a4>
 8008f2a:	e043      	b.n	8008fb4 <HAL_RCC_OscConfig+0x74c>
 8008f2c:	58024400 	.word	0x58024400
 8008f30:	fffffc0c 	.word	0xfffffc0c
 8008f34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f38:	4b21      	ldr	r3, [pc, #132]	; (8008fc0 <HAL_RCC_OscConfig+0x758>)
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f3e:	4b20      	ldr	r3, [pc, #128]	; (8008fc0 <HAL_RCC_OscConfig+0x758>)
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d031      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f003 0203 	and.w	r2, r3, #3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d12a      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	091b      	lsrs	r3, r3, #4
 8008f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d122      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d11a      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	0a5b      	lsrs	r3, r3, #9
 8008f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d111      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	0c1b      	lsrs	r3, r3, #16
 8008f90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d108      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	0e1b      	lsrs	r3, r3, #24
 8008fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d001      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3730      	adds	r7, #48	; 0x30
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	58024400 	.word	0x58024400

08008fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e19c      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fd8:	4b8a      	ldr	r3, [pc, #552]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d910      	bls.n	8009008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fe6:	4b87      	ldr	r3, [pc, #540]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f023 020f 	bic.w	r2, r3, #15
 8008fee:	4985      	ldr	r1, [pc, #532]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ff6:	4b83      	ldr	r3, [pc, #524]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d001      	beq.n	8009008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e184      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d010      	beq.n	8009036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	4b7b      	ldr	r3, [pc, #492]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009020:	429a      	cmp	r2, r3
 8009022:	d908      	bls.n	8009036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009024:	4b78      	ldr	r3, [pc, #480]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	4975      	ldr	r1, [pc, #468]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009032:	4313      	orrs	r3, r2
 8009034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0308 	and.w	r3, r3, #8
 800903e:	2b00      	cmp	r3, #0
 8009040:	d010      	beq.n	8009064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695a      	ldr	r2, [r3, #20]
 8009046:	4b70      	ldr	r3, [pc, #448]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800904e:	429a      	cmp	r2, r3
 8009050:	d908      	bls.n	8009064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009052:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	496a      	ldr	r1, [pc, #424]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009060:	4313      	orrs	r3, r2
 8009062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0310 	and.w	r3, r3, #16
 800906c:	2b00      	cmp	r3, #0
 800906e:	d010      	beq.n	8009092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699a      	ldr	r2, [r3, #24]
 8009074:	4b64      	ldr	r3, [pc, #400]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800907c:	429a      	cmp	r2, r3
 800907e:	d908      	bls.n	8009092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009080:	4b61      	ldr	r3, [pc, #388]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	495e      	ldr	r1, [pc, #376]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 800908e:	4313      	orrs	r3, r2
 8009090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	d010      	beq.n	80090c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	69da      	ldr	r2, [r3, #28]
 80090a2:	4b59      	ldr	r3, [pc, #356]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d908      	bls.n	80090c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80090ae:	4b56      	ldr	r3, [pc, #344]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	4953      	ldr	r1, [pc, #332]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d010      	beq.n	80090ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	4b4d      	ldr	r3, [pc, #308]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	429a      	cmp	r2, r3
 80090da:	d908      	bls.n	80090ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090dc:	4b4a      	ldr	r3, [pc, #296]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f023 020f 	bic.w	r2, r3, #15
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	4947      	ldr	r1, [pc, #284]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d055      	beq.n	80091a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090fa:	4b43      	ldr	r3, [pc, #268]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	4940      	ldr	r1, [pc, #256]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009108:	4313      	orrs	r3, r2
 800910a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d107      	bne.n	8009124 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009114:	4b3c      	ldr	r3, [pc, #240]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d121      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e0f6      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d107      	bne.n	800913c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800912c:	4b36      	ldr	r3, [pc, #216]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d115      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0ea      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d107      	bne.n	8009154 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009144:	4b30      	ldr	r3, [pc, #192]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e0de      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009154:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e0d6      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009164:	4b28      	ldr	r3, [pc, #160]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f023 0207 	bic.w	r2, r3, #7
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4925      	ldr	r1, [pc, #148]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009172:	4313      	orrs	r3, r2
 8009174:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009176:	f7fb ff17 	bl	8004fa8 <HAL_GetTick>
 800917a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800917c:	e00a      	b.n	8009194 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800917e:	f7fb ff13 	bl	8004fa8 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	4293      	cmp	r3, r2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e0be      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009194:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d1eb      	bne.n	800917e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d010      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	4b14      	ldr	r3, [pc, #80]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	429a      	cmp	r2, r3
 80091c0:	d208      	bcs.n	80091d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c2:	4b11      	ldr	r3, [pc, #68]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f023 020f 	bic.w	r2, r3, #15
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	490e      	ldr	r1, [pc, #56]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091d4:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d214      	bcs.n	800920c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e2:	4b08      	ldr	r3, [pc, #32]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f023 020f 	bic.w	r2, r3, #15
 80091ea:	4906      	ldr	r1, [pc, #24]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f2:	4b04      	ldr	r3, [pc, #16]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d005      	beq.n	800920c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e086      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
 8009204:	52002000 	.word	0x52002000
 8009208:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	4b3f      	ldr	r3, [pc, #252]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009224:	429a      	cmp	r2, r3
 8009226:	d208      	bcs.n	800923a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009228:	4b3c      	ldr	r3, [pc, #240]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	4939      	ldr	r1, [pc, #228]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009236:	4313      	orrs	r3, r2
 8009238:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d010      	beq.n	8009268 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695a      	ldr	r2, [r3, #20]
 800924a:	4b34      	ldr	r3, [pc, #208]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009252:	429a      	cmp	r2, r3
 8009254:	d208      	bcs.n	8009268 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009256:	4b31      	ldr	r3, [pc, #196]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	492e      	ldr	r1, [pc, #184]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009264:	4313      	orrs	r3, r2
 8009266:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d010      	beq.n	8009296 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	4b28      	ldr	r3, [pc, #160]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009280:	429a      	cmp	r2, r3
 8009282:	d208      	bcs.n	8009296 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009284:	4b25      	ldr	r3, [pc, #148]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	4922      	ldr	r1, [pc, #136]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009292:	4313      	orrs	r3, r2
 8009294:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69da      	ldr	r2, [r3, #28]
 80092a6:	4b1d      	ldr	r3, [pc, #116]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d208      	bcs.n	80092c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80092b2:	4b1a      	ldr	r3, [pc, #104]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	4917      	ldr	r1, [pc, #92]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092c4:	f000 f834 	bl	8009330 <HAL_RCC_GetSysClockFreq>
 80092c8:	4602      	mov	r2, r0
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	f003 030f 	and.w	r3, r3, #15
 80092d4:	4912      	ldr	r1, [pc, #72]	; (8009320 <HAL_RCC_ClockConfig+0x35c>)
 80092d6:	5ccb      	ldrb	r3, [r1, r3]
 80092d8:	f003 031f 	and.w	r3, r3, #31
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
 80092e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092e2:	4b0e      	ldr	r3, [pc, #56]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f003 030f 	and.w	r3, r3, #15
 80092ea:	4a0d      	ldr	r2, [pc, #52]	; (8009320 <HAL_RCC_ClockConfig+0x35c>)
 80092ec:	5cd3      	ldrb	r3, [r2, r3]
 80092ee:	f003 031f 	and.w	r3, r3, #31
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	fa22 f303 	lsr.w	r3, r2, r3
 80092f8:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <HAL_RCC_ClockConfig+0x360>)
 80092fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092fc:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <HAL_RCC_ClockConfig+0x364>)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009302:	4b0a      	ldr	r3, [pc, #40]	; (800932c <HAL_RCC_ClockConfig+0x368>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f7fb fe04 	bl	8004f14 <HAL_InitTick>
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	58024400 	.word	0x58024400
 8009320:	0800ef34 	.word	0x0800ef34
 8009324:	2400001c 	.word	0x2400001c
 8009328:	24000018 	.word	0x24000018
 800932c:	24000020 	.word	0x24000020

08009330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009330:	b480      	push	{r7}
 8009332:	b089      	sub	sp, #36	; 0x24
 8009334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009336:	4bb3      	ldr	r3, [pc, #716]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800933e:	2b18      	cmp	r3, #24
 8009340:	f200 8155 	bhi.w	80095ee <HAL_RCC_GetSysClockFreq+0x2be>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	080093b1 	.word	0x080093b1
 8009350:	080095ef 	.word	0x080095ef
 8009354:	080095ef 	.word	0x080095ef
 8009358:	080095ef 	.word	0x080095ef
 800935c:	080095ef 	.word	0x080095ef
 8009360:	080095ef 	.word	0x080095ef
 8009364:	080095ef 	.word	0x080095ef
 8009368:	080095ef 	.word	0x080095ef
 800936c:	080093d7 	.word	0x080093d7
 8009370:	080095ef 	.word	0x080095ef
 8009374:	080095ef 	.word	0x080095ef
 8009378:	080095ef 	.word	0x080095ef
 800937c:	080095ef 	.word	0x080095ef
 8009380:	080095ef 	.word	0x080095ef
 8009384:	080095ef 	.word	0x080095ef
 8009388:	080095ef 	.word	0x080095ef
 800938c:	080093dd 	.word	0x080093dd
 8009390:	080095ef 	.word	0x080095ef
 8009394:	080095ef 	.word	0x080095ef
 8009398:	080095ef 	.word	0x080095ef
 800939c:	080095ef 	.word	0x080095ef
 80093a0:	080095ef 	.word	0x080095ef
 80093a4:	080095ef 	.word	0x080095ef
 80093a8:	080095ef 	.word	0x080095ef
 80093ac:	080093e3 	.word	0x080093e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b0:	4b94      	ldr	r3, [pc, #592]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d009      	beq.n	80093d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093bc:	4b91      	ldr	r3, [pc, #580]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	4a90      	ldr	r2, [pc, #576]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
 80093cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80093ce:	e111      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093d0:	4b8d      	ldr	r3, [pc, #564]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093d2:	61bb      	str	r3, [r7, #24]
    break;
 80093d4:	e10e      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80093d6:	4b8d      	ldr	r3, [pc, #564]	; (800960c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093d8:	61bb      	str	r3, [r7, #24]
    break;
 80093da:	e10b      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80093dc:	4b8c      	ldr	r3, [pc, #560]	; (8009610 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093de:	61bb      	str	r3, [r7, #24]
    break;
 80093e0:	e108      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093e2:	4b88      	ldr	r3, [pc, #544]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80093ec:	4b85      	ldr	r3, [pc, #532]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f0:	091b      	lsrs	r3, r3, #4
 80093f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093f8:	4b82      	ldr	r3, [pc, #520]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009402:	4b80      	ldr	r3, [pc, #512]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009406:	08db      	lsrs	r3, r3, #3
 8009408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	fb02 f303 	mul.w	r3, r2, r3
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 80e1 	beq.w	80095e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b02      	cmp	r3, #2
 800942a:	f000 8083 	beq.w	8009534 <HAL_RCC_GetSysClockFreq+0x204>
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b02      	cmp	r3, #2
 8009432:	f200 80a1 	bhi.w	8009578 <HAL_RCC_GetSysClockFreq+0x248>
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <HAL_RCC_GetSysClockFreq+0x114>
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d056      	beq.n	80094f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009442:	e099      	b.n	8009578 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009444:	4b6f      	ldr	r3, [pc, #444]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d02d      	beq.n	80094ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009450:	4b6c      	ldr	r3, [pc, #432]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	08db      	lsrs	r3, r3, #3
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	4a6b      	ldr	r2, [pc, #428]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800945c:	fa22 f303 	lsr.w	r3, r2, r3
 8009460:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947a:	4b62      	ldr	r3, [pc, #392]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	ed97 6a02 	vldr	s12, [r7, #8]
 800948e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80094aa:	e087      	b.n	80095bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2e8>
 80094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094be:	4b51      	ldr	r3, [pc, #324]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80094d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ee:	e065      	b.n	80095bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800961c <HAL_RCC_GetSysClockFreq+0x2ec>
 80094fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009502:	4b40      	ldr	r3, [pc, #256]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009512:	ed97 6a02 	vldr	s12, [r7, #8]
 8009516:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800951a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009532:	e043      	b.n	80095bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009620 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009546:	4b2f      	ldr	r3, [pc, #188]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009556:	ed97 6a02 	vldr	s12, [r7, #8]
 800955a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800955e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800956a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009576:	e021      	b.n	80095bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009582:	eddf 6a26 	vldr	s13, [pc, #152]	; 800961c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958a:	4b1e      	ldr	r3, [pc, #120]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959a:	ed97 6a02 	vldr	s12, [r7, #8]
 800959e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c0:	0a5b      	lsrs	r3, r3, #9
 80095c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c6:	3301      	adds	r3, #1
 80095c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	ee07 3a90 	vmov	s15, r3
 80095d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e0:	ee17 3a90 	vmov	r3, s15
 80095e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80095e6:	e005      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	61bb      	str	r3, [r7, #24]
    break;
 80095ec:	e002      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80095ee:	4b07      	ldr	r3, [pc, #28]	; (800960c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095f0:	61bb      	str	r3, [r7, #24]
    break;
 80095f2:	bf00      	nop
  }

  return sysclockfreq;
 80095f4:	69bb      	ldr	r3, [r7, #24]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3724      	adds	r7, #36	; 0x24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	58024400 	.word	0x58024400
 8009608:	03d09000 	.word	0x03d09000
 800960c:	003d0900 	.word	0x003d0900
 8009610:	017d7840 	.word	0x017d7840
 8009614:	46000000 	.word	0x46000000
 8009618:	4c742400 	.word	0x4c742400
 800961c:	4a742400 	.word	0x4a742400
 8009620:	4bbebc20 	.word	0x4bbebc20

08009624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800962a:	f7ff fe81 	bl	8009330 <HAL_RCC_GetSysClockFreq>
 800962e:	4602      	mov	r2, r0
 8009630:	4b10      	ldr	r3, [pc, #64]	; (8009674 <HAL_RCC_GetHCLKFreq+0x50>)
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	490f      	ldr	r1, [pc, #60]	; (8009678 <HAL_RCC_GetHCLKFreq+0x54>)
 800963c:	5ccb      	ldrb	r3, [r1, r3]
 800963e:	f003 031f 	and.w	r3, r3, #31
 8009642:	fa22 f303 	lsr.w	r3, r2, r3
 8009646:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009648:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <HAL_RCC_GetHCLKFreq+0x50>)
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 030f 	and.w	r3, r3, #15
 8009650:	4a09      	ldr	r2, [pc, #36]	; (8009678 <HAL_RCC_GetHCLKFreq+0x54>)
 8009652:	5cd3      	ldrb	r3, [r2, r3]
 8009654:	f003 031f 	and.w	r3, r3, #31
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	fa22 f303 	lsr.w	r3, r2, r3
 800965e:	4a07      	ldr	r2, [pc, #28]	; (800967c <HAL_RCC_GetHCLKFreq+0x58>)
 8009660:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009662:	4a07      	ldr	r2, [pc, #28]	; (8009680 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009668:	4b04      	ldr	r3, [pc, #16]	; (800967c <HAL_RCC_GetHCLKFreq+0x58>)
 800966a:	681b      	ldr	r3, [r3, #0]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	58024400 	.word	0x58024400
 8009678:	0800ef34 	.word	0x0800ef34
 800967c:	2400001c 	.word	0x2400001c
 8009680:	24000018 	.word	0x24000018

08009684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009688:	f7ff ffcc 	bl	8009624 <HAL_RCC_GetHCLKFreq>
 800968c:	4602      	mov	r2, r0
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	091b      	lsrs	r3, r3, #4
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	4904      	ldr	r1, [pc, #16]	; (80096ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800969a:	5ccb      	ldrb	r3, [r1, r3]
 800969c:	f003 031f 	and.w	r3, r3, #31
 80096a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	58024400 	.word	0x58024400
 80096ac:	0800ef34 	.word	0x0800ef34

080096b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096b4:	f7ff ffb6 	bl	8009624 <HAL_RCC_GetHCLKFreq>
 80096b8:	4602      	mov	r2, r0
 80096ba:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	f003 0307 	and.w	r3, r3, #7
 80096c4:	4904      	ldr	r1, [pc, #16]	; (80096d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80096c6:	5ccb      	ldrb	r3, [r1, r3]
 80096c8:	f003 031f 	and.w	r3, r3, #31
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	58024400 	.word	0x58024400
 80096d8:	0800ef34 	.word	0x0800ef34

080096dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096e4:	2300      	movs	r3, #0
 80096e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096e8:	2300      	movs	r3, #0
 80096ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d03f      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009700:	d02a      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009702:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009706:	d824      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800970c:	d018      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800970e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009712:	d81e      	bhi.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800971c:	d007      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800971e:	e018      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009720:	4ba4      	ldr	r3, [pc, #656]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	4aa3      	ldr	r2, [pc, #652]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800972a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800972c:	e015      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3304      	adds	r3, #4
 8009732:	2102      	movs	r1, #2
 8009734:	4618      	mov	r0, r3
 8009736:	f001 f989 	bl	800aa4c <RCCEx_PLL2_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800973e:	e00c      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3324      	adds	r3, #36	; 0x24
 8009744:	2102      	movs	r1, #2
 8009746:	4618      	mov	r0, r3
 8009748:	f001 fa32 	bl	800abb0 <RCCEx_PLL3_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009750:	e003      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	75fb      	strb	r3, [r7, #23]
      break;
 8009756:	e000      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009760:	4b94      	ldr	r3, [pc, #592]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800976c:	4991      	ldr	r1, [pc, #580]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800976e:	4313      	orrs	r3, r2
 8009770:	650b      	str	r3, [r1, #80]	; 0x50
 8009772:	e001      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009780:	2b00      	cmp	r3, #0
 8009782:	d03d      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009788:	2b04      	cmp	r3, #4
 800978a:	d826      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800978c:	a201      	add	r2, pc, #4	; (adr r2, 8009794 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800978e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009792:	bf00      	nop
 8009794:	080097a9 	.word	0x080097a9
 8009798:	080097b7 	.word	0x080097b7
 800979c:	080097c9 	.word	0x080097c9
 80097a0:	080097e1 	.word	0x080097e1
 80097a4:	080097e1 	.word	0x080097e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a8:	4b82      	ldr	r3, [pc, #520]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	4a81      	ldr	r2, [pc, #516]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097b4:	e015      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3304      	adds	r3, #4
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 f945 	bl	800aa4c <RCCEx_PLL2_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097c6:	e00c      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3324      	adds	r3, #36	; 0x24
 80097cc:	2100      	movs	r1, #0
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 f9ee 	bl	800abb0 <RCCEx_PLL3_Config>
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097d8:	e003      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
      break;
 80097de:	e000      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80097e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097e8:	4b72      	ldr	r3, [pc, #456]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ec:	f023 0207 	bic.w	r2, r3, #7
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f4:	496f      	ldr	r1, [pc, #444]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	650b      	str	r3, [r1, #80]	; 0x50
 80097fa:	e001      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009808:	2b00      	cmp	r3, #0
 800980a:	d051      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009812:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009816:	d036      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009818:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800981c:	d830      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800981e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009822:	d032      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009828:	d82a      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800982a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800982e:	d02e      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009830:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009834:	d824      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800983a:	d018      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800983c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009840:	d81e      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800984a:	d007      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800984c:	e018      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984e:	4b59      	ldr	r3, [pc, #356]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009852:	4a58      	ldr	r2, [pc, #352]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800985a:	e019      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	2100      	movs	r1, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f001 f8f2 	bl	800aa4c <RCCEx_PLL2_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800986c:	e010      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3324      	adds	r3, #36	; 0x24
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f001 f99b 	bl	800abb0 <RCCEx_PLL3_Config>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800987e:	e007      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	75fb      	strb	r3, [r7, #23]
      break;
 8009884:	e004      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009886:	bf00      	nop
 8009888:	e002      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800988a:	bf00      	nop
 800988c:	e000      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800988e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009896:	4b47      	ldr	r3, [pc, #284]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098a4:	4943      	ldr	r1, [pc, #268]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	658b      	str	r3, [r1, #88]	; 0x58
 80098aa:	e001      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d051      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098c2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80098c6:	d036      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80098c8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80098cc:	d830      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80098ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098d2:	d032      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80098d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098d8:	d82a      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80098da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098de:	d02e      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80098e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098e4:	d824      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80098e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ea:	d018      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80098ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098f0:	d81e      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x222>
 80098f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098fa:	d007      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80098fc:	e018      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fe:	4b2d      	ldr	r3, [pc, #180]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009902:	4a2c      	ldr	r2, [pc, #176]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800990a:	e019      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3304      	adds	r3, #4
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f001 f89a 	bl	800aa4c <RCCEx_PLL2_Config>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800991c:	e010      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3324      	adds	r3, #36	; 0x24
 8009922:	2100      	movs	r1, #0
 8009924:	4618      	mov	r0, r3
 8009926:	f001 f943 	bl	800abb0 <RCCEx_PLL3_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800992e:	e007      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	75fb      	strb	r3, [r7, #23]
      break;
 8009934:	e004      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009936:	bf00      	nop
 8009938:	e002      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800993a:	bf00      	nop
 800993c:	e000      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800993e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009946:	4b1b      	ldr	r3, [pc, #108]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009954:	4917      	ldr	r1, [pc, #92]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009956:	4313      	orrs	r3, r2
 8009958:	658b      	str	r3, [r1, #88]	; 0x58
 800995a:	e001      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d035      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009970:	2b30      	cmp	r3, #48	; 0x30
 8009972:	d01c      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009974:	2b30      	cmp	r3, #48	; 0x30
 8009976:	d817      	bhi.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009978:	2b20      	cmp	r3, #32
 800997a:	d00c      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800997c:	2b20      	cmp	r3, #32
 800997e:	d813      	bhi.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d019      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009984:	2b10      	cmp	r3, #16
 8009986:	d10f      	bne.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800998a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998c:	4a09      	ldr	r2, [pc, #36]	; (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800998e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009994:	e011      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	2102      	movs	r1, #2
 800999c:	4618      	mov	r0, r3
 800999e:	f001 f855 	bl	800aa4c <RCCEx_PLL2_Config>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80099a6:	e008      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	75fb      	strb	r3, [r7, #23]
      break;
 80099ac:	e005      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80099ae:	bf00      	nop
 80099b0:	e003      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400
      break;
 80099b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80099c0:	4ba3      	ldr	r3, [pc, #652]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80099c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099cc:	49a0      	ldr	r1, [pc, #640]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099d2:	e001      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d047      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ec:	d030      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80099ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099f2:	d82a      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80099f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099f8:	d02c      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80099fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099fe:	d824      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a04:	d018      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a0a:	d81e      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a14:	d007      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a16:	e018      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a18:	4b8d      	ldr	r3, [pc, #564]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	4a8c      	ldr	r2, [pc, #560]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a24:	e017      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f001 f80d 	bl	800aa4c <RCCEx_PLL2_Config>
 8009a32:	4603      	mov	r3, r0
 8009a34:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a36:	e00e      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3324      	adds	r3, #36	; 0x24
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 f8b6 	bl	800abb0 <RCCEx_PLL3_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a48:	e005      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4e:	e002      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d109      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a5c:	4b7c      	ldr	r3, [pc, #496]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a60:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a68:	4979      	ldr	r1, [pc, #484]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8009a6e:	e001      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d049      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a88:	d02e      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a8e:	d828      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009a90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a94:	d02a      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a9a:	d822      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009a9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009aa0:	d026      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009aa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009aa6:	d81c      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aac:	d010      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ab2:	d816      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d01d      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009abc:	d111      	bne.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 ffc1 	bl	800aa4c <RCCEx_PLL2_Config>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ace:	e012      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3324      	adds	r3, #36	; 0x24
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 f86a 	bl	800abb0 <RCCEx_PLL3_Config>
 8009adc:	4603      	mov	r3, r0
 8009ade:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ae0:	e009      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae6:	e006      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009ae8:	bf00      	nop
 8009aea:	e004      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009aec:	bf00      	nop
 8009aee:	e002      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009af0:	bf00      	nop
 8009af2:	e000      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009afc:	4b54      	ldr	r3, [pc, #336]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b08:	4951      	ldr	r1, [pc, #324]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8009b0e:	e001      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d04b      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b2a:	d02e      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b30:	d828      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b36:	d02a      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b3c:	d822      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009b3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b42:	d026      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b48:	d81c      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b4e:	d010      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b54:	d816      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01d      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b5e:	d111      	bne.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3304      	adds	r3, #4
 8009b64:	2101      	movs	r1, #1
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 ff70 	bl	800aa4c <RCCEx_PLL2_Config>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b70:	e012      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3324      	adds	r3, #36	; 0x24
 8009b76:	2101      	movs	r1, #1
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 f819 	bl	800abb0 <RCCEx_PLL3_Config>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b82:	e009      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	75fb      	strb	r3, [r7, #23]
      break;
 8009b88:	e006      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b8a:	bf00      	nop
 8009b8c:	e004      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b8e:	bf00      	nop
 8009b90:	e002      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b92:	bf00      	nop
 8009b94:	e000      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10a      	bne.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b9e:	4b2c      	ldr	r3, [pc, #176]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009bac:	4928      	ldr	r1, [pc, #160]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8009bb2:	e001      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
 8009bb6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02f      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bcc:	d00e      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd2:	d814      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d015      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bdc:	d10f      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bde:	4b1c      	ldr	r3, [pc, #112]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	4a1b      	ldr	r2, [pc, #108]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009bea:	e00c      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 ff2a 	bl	800aa4c <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009bfc:	e003      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	75fb      	strb	r3, [r7, #23]
      break;
 8009c02:	e000      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c0c:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c18:	490d      	ldr	r1, [pc, #52]	; (8009c50 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	650b      	str	r3, [r1, #80]	; 0x50
 8009c1e:	e001      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d034      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c34:	2b03      	cmp	r3, #3
 8009c36:	d81d      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009c38:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3e:	bf00      	nop
 8009c40:	08009c7b 	.word	0x08009c7b
 8009c44:	08009c55 	.word	0x08009c55
 8009c48:	08009c63 	.word	0x08009c63
 8009c4c:	08009c7b 	.word	0x08009c7b
 8009c50:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c54:	4bb1      	ldr	r3, [pc, #708]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	4ab0      	ldr	r2, [pc, #704]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c60:	e00c      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3304      	adds	r3, #4
 8009c66:	2102      	movs	r1, #2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 feef 	bl	800aa4c <RCCEx_PLL2_Config>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c72:	e003      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	75fb      	strb	r3, [r7, #23]
      break;
 8009c78:	e000      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d109      	bne.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c82:	4ba6      	ldr	r3, [pc, #664]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c86:	f023 0203 	bic.w	r2, r3, #3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	49a3      	ldr	r1, [pc, #652]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c94:	e001      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 8086 	beq.w	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ca8:	4b9d      	ldr	r3, [pc, #628]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a9c      	ldr	r2, [pc, #624]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cb4:	f7fb f978 	bl	8004fa8 <HAL_GetTick>
 8009cb8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cba:	e009      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cbc:	f7fb f974 	bl	8004fa8 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b64      	cmp	r3, #100	; 0x64
 8009cc8:	d902      	bls.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	75fb      	strb	r3, [r7, #23]
        break;
 8009cce:	e005      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cd0:	4b93      	ldr	r3, [pc, #588]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d0ef      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d166      	bne.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ce2:	4b8e      	ldr	r3, [pc, #568]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ce4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cec:	4053      	eors	r3, r2
 8009cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d013      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009cf6:	4b89      	ldr	r3, [pc, #548]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cfe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d00:	4b86      	ldr	r3, [pc, #536]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d04:	4a85      	ldr	r2, [pc, #532]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d0c:	4b83      	ldr	r3, [pc, #524]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d10:	4a82      	ldr	r2, [pc, #520]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d18:	4a80      	ldr	r2, [pc, #512]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d28:	d115      	bne.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2a:	f7fb f93d 	bl	8004fa8 <HAL_GetTick>
 8009d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d30:	e00b      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d32:	f7fb f939 	bl	8004fa8 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d902      	bls.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	75fb      	strb	r3, [r7, #23]
            break;
 8009d48:	e005      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d4a:	4b74      	ldr	r3, [pc, #464]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0ed      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d126      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d6a:	d10d      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009d6c:	4b6b      	ldr	r3, [pc, #428]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d7a:	0919      	lsrs	r1, r3, #4
 8009d7c:	4b69      	ldr	r3, [pc, #420]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009d7e:	400b      	ands	r3, r1
 8009d80:	4966      	ldr	r1, [pc, #408]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	610b      	str	r3, [r1, #16]
 8009d86:	e005      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009d88:	4b64      	ldr	r3, [pc, #400]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	4a63      	ldr	r2, [pc, #396]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d92:	6113      	str	r3, [r2, #16]
 8009d94:	4b61      	ldr	r3, [pc, #388]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da2:	495e      	ldr	r1, [pc, #376]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	670b      	str	r3, [r1, #112]	; 0x70
 8009da8:	e004      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	75bb      	strb	r3, [r7, #22]
 8009dae:	e001      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
 8009db2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d07e      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc4:	2b28      	cmp	r3, #40	; 0x28
 8009dc6:	d867      	bhi.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009dc8:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009e9f 	.word	0x08009e9f
 8009dd4:	08009e99 	.word	0x08009e99
 8009dd8:	08009e99 	.word	0x08009e99
 8009ddc:	08009e99 	.word	0x08009e99
 8009de0:	08009e99 	.word	0x08009e99
 8009de4:	08009e99 	.word	0x08009e99
 8009de8:	08009e99 	.word	0x08009e99
 8009dec:	08009e99 	.word	0x08009e99
 8009df0:	08009e75 	.word	0x08009e75
 8009df4:	08009e99 	.word	0x08009e99
 8009df8:	08009e99 	.word	0x08009e99
 8009dfc:	08009e99 	.word	0x08009e99
 8009e00:	08009e99 	.word	0x08009e99
 8009e04:	08009e99 	.word	0x08009e99
 8009e08:	08009e99 	.word	0x08009e99
 8009e0c:	08009e99 	.word	0x08009e99
 8009e10:	08009e87 	.word	0x08009e87
 8009e14:	08009e99 	.word	0x08009e99
 8009e18:	08009e99 	.word	0x08009e99
 8009e1c:	08009e99 	.word	0x08009e99
 8009e20:	08009e99 	.word	0x08009e99
 8009e24:	08009e99 	.word	0x08009e99
 8009e28:	08009e99 	.word	0x08009e99
 8009e2c:	08009e99 	.word	0x08009e99
 8009e30:	08009e9f 	.word	0x08009e9f
 8009e34:	08009e99 	.word	0x08009e99
 8009e38:	08009e99 	.word	0x08009e99
 8009e3c:	08009e99 	.word	0x08009e99
 8009e40:	08009e99 	.word	0x08009e99
 8009e44:	08009e99 	.word	0x08009e99
 8009e48:	08009e99 	.word	0x08009e99
 8009e4c:	08009e99 	.word	0x08009e99
 8009e50:	08009e9f 	.word	0x08009e9f
 8009e54:	08009e99 	.word	0x08009e99
 8009e58:	08009e99 	.word	0x08009e99
 8009e5c:	08009e99 	.word	0x08009e99
 8009e60:	08009e99 	.word	0x08009e99
 8009e64:	08009e99 	.word	0x08009e99
 8009e68:	08009e99 	.word	0x08009e99
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	08009e9f 	.word	0x08009e9f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3304      	adds	r3, #4
 8009e78:	2101      	movs	r1, #1
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fde6 	bl	800aa4c <RCCEx_PLL2_Config>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e84:	e00c      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3324      	adds	r3, #36	; 0x24
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 fe8f 	bl	800abb0 <RCCEx_PLL3_Config>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e96:	e003      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e9c:	e000      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d109      	bne.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ea6:	4b1d      	ldr	r3, [pc, #116]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eaa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb2:	491a      	ldr	r1, [pc, #104]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	654b      	str	r3, [r1, #84]	; 0x54
 8009eb8:	e001      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
 8009ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d03e      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ece:	2b05      	cmp	r3, #5
 8009ed0:	d820      	bhi.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f29 	.word	0x08009f29
 8009edc:	08009ef1 	.word	0x08009ef1
 8009ee0:	08009f03 	.word	0x08009f03
 8009ee4:	08009f29 	.word	0x08009f29
 8009ee8:	08009f29 	.word	0x08009f29
 8009eec:	08009f29 	.word	0x08009f29
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fda8 	bl	800aa4c <RCCEx_PLL2_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f00:	e013      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3324      	adds	r3, #36	; 0x24
 8009f06:	2101      	movs	r1, #1
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fe51 	bl	800abb0 <RCCEx_PLL3_Config>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f12:	e00a      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	75fb      	strb	r3, [r7, #23]
      break;
 8009f18:	e007      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009f1a:	bf00      	nop
 8009f1c:	58024400 	.word	0x58024400
 8009f20:	58024800 	.word	0x58024800
 8009f24:	00ffffcf 	.word	0x00ffffcf
      break;
 8009f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d109      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f30:	4b9f      	ldr	r3, [pc, #636]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f34:	f023 0207 	bic.w	r2, r3, #7
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3c:	499c      	ldr	r1, [pc, #624]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	654b      	str	r3, [r1, #84]	; 0x54
 8009f42:	e001      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0304 	and.w	r3, r3, #4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d039      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d820      	bhi.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009f5e:	a201      	add	r2, pc, #4	; (adr r2, 8009f64 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f64:	08009fa7 	.word	0x08009fa7
 8009f68:	08009f7d 	.word	0x08009f7d
 8009f6c:	08009f8f 	.word	0x08009f8f
 8009f70:	08009fa7 	.word	0x08009fa7
 8009f74:	08009fa7 	.word	0x08009fa7
 8009f78:	08009fa7 	.word	0x08009fa7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	2101      	movs	r1, #1
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fd62 	bl	800aa4c <RCCEx_PLL2_Config>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f8c:	e00c      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3324      	adds	r3, #36	; 0x24
 8009f92:	2101      	movs	r1, #1
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fe0b 	bl	800abb0 <RCCEx_PLL3_Config>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f9e:	e003      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa4:	e000      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fae:	4b80      	ldr	r3, [pc, #512]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb2:	f023 0207 	bic.w	r2, r3, #7
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fbc:	497c      	ldr	r1, [pc, #496]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	658b      	str	r3, [r1, #88]	; 0x58
 8009fc2:	e001      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0320 	and.w	r3, r3, #32
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d04b      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fde:	d02e      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fe4:	d828      	bhi.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fea:	d02a      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff0:	d822      	bhi.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009ff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ff6:	d026      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009ff8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ffc:	d81c      	bhi.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a002:	d010      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a008:	d816      	bhi.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01d      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a00e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a012:	d111      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3304      	adds	r3, #4
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fd16 	bl	800aa4c <RCCEx_PLL2_Config>
 800a020:	4603      	mov	r3, r0
 800a022:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a024:	e012      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3324      	adds	r3, #36	; 0x24
 800a02a:	2102      	movs	r1, #2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fdbf 	bl	800abb0 <RCCEx_PLL3_Config>
 800a032:	4603      	mov	r3, r0
 800a034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a036:	e009      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	75fb      	strb	r3, [r7, #23]
      break;
 800a03c:	e006      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a03e:	bf00      	nop
 800a040:	e004      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a042:	bf00      	nop
 800a044:	e002      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a046:	bf00      	nop
 800a048:	e000      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a04a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a052:	4b57      	ldr	r3, [pc, #348]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	4953      	ldr	r1, [pc, #332]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a062:	4313      	orrs	r3, r2
 800a064:	654b      	str	r3, [r1, #84]	; 0x54
 800a066:	e001      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	d04b      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a07e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a082:	d02e      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a084:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a088:	d828      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08e:	d02a      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a094:	d822      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a09a:	d026      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a09c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0a0:	d81c      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a0a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0a6:	d010      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a0a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ac:	d816      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d01d      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0b6:	d111      	bne.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fcc4 	bl	800aa4c <RCCEx_PLL2_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0c8:	e012      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	3324      	adds	r3, #36	; 0x24
 800a0ce:	2102      	movs	r1, #2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fd6d 	bl	800abb0 <RCCEx_PLL3_Config>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0da:	e009      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e0:	e006      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a0e2:	bf00      	nop
 800a0e4:	e004      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a0e6:	bf00      	nop
 800a0e8:	e002      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a0ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0f6:	4b2e      	ldr	r3, [pc, #184]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a104:	492a      	ldr	r1, [pc, #168]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a106:	4313      	orrs	r3, r2
 800a108:	658b      	str	r3, [r1, #88]	; 0x58
 800a10a:	e001      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d04d      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a122:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a126:	d02e      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a128:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a12c:	d828      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a12e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a132:	d02a      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a138:	d822      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a13a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a13e:	d026      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a140:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a144:	d81c      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a14a:	d010      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a14c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a150:	d816      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d01d      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a15a:	d111      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3304      	adds	r3, #4
 800a160:	2100      	movs	r1, #0
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fc72 	bl	800aa4c <RCCEx_PLL2_Config>
 800a168:	4603      	mov	r3, r0
 800a16a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a16c:	e012      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3324      	adds	r3, #36	; 0x24
 800a172:	2102      	movs	r1, #2
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fd1b 	bl	800abb0 <RCCEx_PLL3_Config>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a17e:	e009      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	75fb      	strb	r3, [r7, #23]
      break;
 800a184:	e006      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a186:	bf00      	nop
 800a188:	e004      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a18a:	bf00      	nop
 800a18c:	e002      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a18e:	bf00      	nop
 800a190:	e000      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a192:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10c      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a19a:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a19e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1a8:	4901      	ldr	r1, [pc, #4]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	658b      	str	r3, [r1, #88]	; 0x58
 800a1ae:	e003      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a1b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0308 	and.w	r3, r3, #8
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d018      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1cc:	d10a      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3324      	adds	r3, #36	; 0x24
 800a1d2:	2102      	movs	r1, #2
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 fceb 	bl	800abb0 <RCCEx_PLL3_Config>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a1e4:	4b8a      	ldr	r3, [pc, #552]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1f0:	4987      	ldr	r1, [pc, #540]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0310 	and.w	r3, r3, #16
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01a      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a20c:	d10a      	bne.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3324      	adds	r3, #36	; 0x24
 800a212:	2102      	movs	r1, #2
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fccb 	bl	800abb0 <RCCEx_PLL3_Config>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a224:	4b7a      	ldr	r3, [pc, #488]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a232:	4977      	ldr	r1, [pc, #476]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a234:	4313      	orrs	r3, r2
 800a236:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d034      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a24a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a24e:	d01d      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a254:	d817      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a25a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a25e:	d009      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a260:	e011      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3304      	adds	r3, #4
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 fbef 	bl	800aa4c <RCCEx_PLL2_Config>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a272:	e00c      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3324      	adds	r3, #36	; 0x24
 800a278:	2102      	movs	r1, #2
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fc98 	bl	800abb0 <RCCEx_PLL3_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a284:	e003      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	75fb      	strb	r3, [r7, #23]
      break;
 800a28a:	e000      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a28c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a294:	4b5e      	ldr	r3, [pc, #376]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2a2:	495b      	ldr	r1, [pc, #364]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	658b      	str	r3, [r1, #88]	; 0x58
 800a2a8:	e001      	b.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d033      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2c4:	d01c      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a2c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2ca:	d816      	bhi.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a2cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d0:	d003      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a2d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2d6:	d007      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a2d8:	e00f      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2da:	4b4d      	ldr	r3, [pc, #308]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	4a4c      	ldr	r2, [pc, #304]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a2e6:	e00c      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3324      	adds	r3, #36	; 0x24
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 fc5e 	bl	800abb0 <RCCEx_PLL3_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a2f8:	e003      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fe:	e000      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a300:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a308:	4b41      	ldr	r3, [pc, #260]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a30a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a316:	493e      	ldr	r1, [pc, #248]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	654b      	str	r3, [r1, #84]	; 0x54
 800a31c:	e001      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d029      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a33a:	d007      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a33c:	e00f      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a33e:	4b34      	ldr	r3, [pc, #208]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a342:	4a33      	ldr	r2, [pc, #204]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a34a:	e00b      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3304      	adds	r3, #4
 800a350:	2102      	movs	r1, #2
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fb7a 	bl	800aa4c <RCCEx_PLL2_Config>
 800a358:	4603      	mov	r3, r0
 800a35a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a35c:	e002      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	75fb      	strb	r3, [r7, #23]
      break;
 800a362:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d109      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a36a:	4b29      	ldr	r3, [pc, #164]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a376:	4926      	ldr	r1, [pc, #152]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a37c:	e001      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00a      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3324      	adds	r3, #36	; 0x24
 800a392:	2102      	movs	r1, #2
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fc0b 	bl	800abb0 <RCCEx_PLL3_Config>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d033      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3b8:	d017      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a3ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3be:	d811      	bhi.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c4:	d013      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a3c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3ca:	d80b      	bhi.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d010      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d4:	d106      	bne.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3d6:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3da:	4a0d      	ldr	r2, [pc, #52]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a3e2:	e007      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3e8:	e004      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a3ea:	bf00      	nop
 800a3ec:	e002      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a3ee:	bf00      	nop
 800a3f0:	e000      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a3f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10c      	bne.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3fa:	4b05      	ldr	r3, [pc, #20]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a406:	4902      	ldr	r1, [pc, #8]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	654b      	str	r3, [r1, #84]	; 0x54
 800a40c:	e004      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a40e:	bf00      	nop
 800a410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a414:	7dfb      	ldrb	r3, [r7, #23]
 800a416:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d008      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a424:	4b29      	ldr	r3, [pc, #164]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a428:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a430:	4926      	ldr	r1, [pc, #152]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a432:	4313      	orrs	r3, r2
 800a434:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d008      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a442:	4b22      	ldr	r3, [pc, #136]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a446:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a44e:	491f      	ldr	r1, [pc, #124]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a450:	4313      	orrs	r3, r2
 800a452:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00d      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a460:	4b1a      	ldr	r3, [pc, #104]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	4a19      	ldr	r2, [pc, #100]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a466:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a46a:	6113      	str	r3, [r2, #16]
 800a46c:	4b17      	ldr	r3, [pc, #92]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a476:	4915      	ldr	r1, [pc, #84]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	da08      	bge.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a484:	4b11      	ldr	r3, [pc, #68]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a488:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a490:	490e      	ldr	r1, [pc, #56]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a492:	4313      	orrs	r3, r2
 800a494:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d009      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4b0:	4906      	ldr	r1, [pc, #24]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a4b6:	7dbb      	ldrb	r3, [r7, #22]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e000      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	58024400 	.word	0x58024400

0800a4d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a4d4:	f7ff f8a6 	bl	8009624 <HAL_RCC_GetHCLKFreq>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	4b06      	ldr	r3, [pc, #24]	; (800a4f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	091b      	lsrs	r3, r3, #4
 800a4e0:	f003 0307 	and.w	r3, r3, #7
 800a4e4:	4904      	ldr	r1, [pc, #16]	; (800a4f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a4e6:	5ccb      	ldrb	r3, [r1, r3]
 800a4e8:	f003 031f 	and.w	r3, r3, #31
 800a4ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	58024400 	.word	0x58024400
 800a4f8:	0800ef34 	.word	0x0800ef34

0800a4fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b089      	sub	sp, #36	; 0x24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a504:	4ba1      	ldr	r3, [pc, #644]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	f003 0303 	and.w	r3, r3, #3
 800a50c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a50e:	4b9f      	ldr	r3, [pc, #636]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	0b1b      	lsrs	r3, r3, #12
 800a514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a518:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a51a:	4b9c      	ldr	r3, [pc, #624]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	091b      	lsrs	r3, r3, #4
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a526:	4b99      	ldr	r3, [pc, #612]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52a:	08db      	lsrs	r3, r3, #3
 800a52c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	fb02 f303 	mul.w	r3, r2, r3
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8111 	beq.w	800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	f000 8083 	beq.w	800a658 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	2b02      	cmp	r3, #2
 800a556:	f200 80a1 	bhi.w	800a69c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d056      	beq.n	800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a566:	e099      	b.n	800a69c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a568:	4b88      	ldr	r3, [pc, #544]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0320 	and.w	r3, r3, #32
 800a570:	2b00      	cmp	r3, #0
 800a572:	d02d      	beq.n	800a5d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a574:	4b85      	ldr	r3, [pc, #532]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	08db      	lsrs	r3, r3, #3
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	4a84      	ldr	r2, [pc, #528]	; (800a790 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a580:	fa22 f303 	lsr.w	r3, r2, r3
 800a584:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	ee07 3a90 	vmov	s15, r3
 800a58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59e:	4b7b      	ldr	r3, [pc, #492]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a6:	ee07 3a90 	vmov	s15, r3
 800a5aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a5ce:	e087      	b.n	800a6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	ee07 3a90 	vmov	s15, r3
 800a5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a798 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a5de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5e2:	4b6a      	ldr	r3, [pc, #424]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ea:	ee07 3a90 	vmov	s15, r3
 800a5ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a612:	e065      	b.n	800a6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	ee07 3a90 	vmov	s15, r3
 800a61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a79c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a626:	4b59      	ldr	r3, [pc, #356]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a636:	ed97 6a03 	vldr	s12, [r7, #12]
 800a63a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a656:	e043      	b.n	800a6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	ee07 3a90 	vmov	s15, r3
 800a65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a662:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a7a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a66a:	4b48      	ldr	r3, [pc, #288]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a672:	ee07 3a90 	vmov	s15, r3
 800a676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a67e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a68a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a69a:	e021      	b.n	800a6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	ee07 3a90 	vmov	s15, r3
 800a6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a79c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ae:	4b37      	ldr	r3, [pc, #220]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a6e0:	4b2a      	ldr	r3, [pc, #168]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e4:	0a5b      	lsrs	r3, r3, #9
 800a6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ea:	ee07 3a90 	vmov	s15, r3
 800a6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a706:	ee17 2a90 	vmov	r2, s15
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a70e:	4b1f      	ldr	r3, [pc, #124]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a712:	0c1b      	lsrs	r3, r3, #16
 800a714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a718:	ee07 3a90 	vmov	s15, r3
 800a71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a724:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a728:	edd7 6a07 	vldr	s13, [r7, #28]
 800a72c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a734:	ee17 2a90 	vmov	r2, s15
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a73c:	4b13      	ldr	r3, [pc, #76]	; (800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	0e1b      	lsrs	r3, r3, #24
 800a742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a746:	ee07 3a90 	vmov	s15, r3
 800a74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a752:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a756:	edd7 6a07 	vldr	s13, [r7, #28]
 800a75a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a762:	ee17 2a90 	vmov	r2, s15
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a76a:	e008      	b.n	800a77e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	609a      	str	r2, [r3, #8]
}
 800a77e:	bf00      	nop
 800a780:	3724      	adds	r7, #36	; 0x24
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	58024400 	.word	0x58024400
 800a790:	03d09000 	.word	0x03d09000
 800a794:	46000000 	.word	0x46000000
 800a798:	4c742400 	.word	0x4c742400
 800a79c:	4a742400 	.word	0x4a742400
 800a7a0:	4bbebc20 	.word	0x4bbebc20

0800a7a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b089      	sub	sp, #36	; 0x24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7ac:	4ba1      	ldr	r3, [pc, #644]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	f003 0303 	and.w	r3, r3, #3
 800a7b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a7b6:	4b9f      	ldr	r3, [pc, #636]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ba:	0d1b      	lsrs	r3, r3, #20
 800a7bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a7c2:	4b9c      	ldr	r3, [pc, #624]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	0a1b      	lsrs	r3, r3, #8
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a7ce:	4b99      	ldr	r3, [pc, #612]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7d2:	08db      	lsrs	r3, r3, #3
 800a7d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	fb02 f303 	mul.w	r3, r2, r3
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8111 	beq.w	800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	f000 8083 	beq.w	800a900 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	f200 80a1 	bhi.w	800a944 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d003      	beq.n	800a810 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d056      	beq.n	800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a80e:	e099      	b.n	800a944 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a810:	4b88      	ldr	r3, [pc, #544]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0320 	and.w	r3, r3, #32
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d02d      	beq.n	800a878 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a81c:	4b85      	ldr	r3, [pc, #532]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	08db      	lsrs	r3, r3, #3
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	4a84      	ldr	r2, [pc, #528]	; (800aa38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
 800a82c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	ee07 3a90 	vmov	s15, r3
 800a834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a846:	4b7b      	ldr	r3, [pc, #492]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a856:	ed97 6a03 	vldr	s12, [r7, #12]
 800a85a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aa3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a872:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a876:	e087      	b.n	800a988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a882:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aa40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a88a:	4b6a      	ldr	r3, [pc, #424]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a89a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a89e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aa3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8ba:	e065      	b.n	800a988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aa44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ce:	4b59      	ldr	r3, [pc, #356]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d6:	ee07 3a90 	vmov	s15, r3
 800a8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aa3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8fe:	e043      	b.n	800a988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a912:	4b48      	ldr	r3, [pc, #288]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91a:	ee07 3a90 	vmov	s15, r3
 800a91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a922:	ed97 6a03 	vldr	s12, [r7, #12]
 800a926:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aa3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a942:	e021      	b.n	800a988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aa44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a956:	4b37      	ldr	r3, [pc, #220]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95e:	ee07 3a90 	vmov	s15, r3
 800a962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a966:	ed97 6a03 	vldr	s12, [r7, #12]
 800a96a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aa3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a982:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a986:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a988:	4b2a      	ldr	r3, [pc, #168]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	0a5b      	lsrs	r3, r3, #9
 800a98e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a99e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ae:	ee17 2a90 	vmov	r2, s15
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a9b6:	4b1f      	ldr	r3, [pc, #124]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	0c1b      	lsrs	r3, r3, #16
 800a9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9c0:	ee07 3a90 	vmov	s15, r3
 800a9c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9dc:	ee17 2a90 	vmov	r2, s15
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a9e4:	4b13      	ldr	r3, [pc, #76]	; (800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	0e1b      	lsrs	r3, r3, #24
 800a9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa0a:	ee17 2a90 	vmov	r2, s15
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aa12:	e008      	b.n	800aa26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	609a      	str	r2, [r3, #8]
}
 800aa26:	bf00      	nop
 800aa28:	3724      	adds	r7, #36	; 0x24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	58024400 	.word	0x58024400
 800aa38:	03d09000 	.word	0x03d09000
 800aa3c:	46000000 	.word	0x46000000
 800aa40:	4c742400 	.word	0x4c742400
 800aa44:	4a742400 	.word	0x4a742400
 800aa48:	4bbebc20 	.word	0x4bbebc20

0800aa4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa5a:	4b53      	ldr	r3, [pc, #332]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d101      	bne.n	800aa6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e099      	b.n	800ab9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa6a:	4b4f      	ldr	r3, [pc, #316]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a4e      	ldr	r2, [pc, #312]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa76:	f7fa fa97 	bl	8004fa8 <HAL_GetTick>
 800aa7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa7c:	e008      	b.n	800aa90 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa7e:	f7fa fa93 	bl	8004fa8 <HAL_GetTick>
 800aa82:	4602      	mov	r2, r0
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d901      	bls.n	800aa90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e086      	b.n	800ab9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa90:	4b45      	ldr	r3, [pc, #276]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1f0      	bne.n	800aa7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa9c:	4b42      	ldr	r3, [pc, #264]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	031b      	lsls	r3, r3, #12
 800aaaa:	493f      	ldr	r1, [pc, #252]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aaac:	4313      	orrs	r3, r2
 800aaae:	628b      	str	r3, [r1, #40]	; 0x28
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	025b      	lsls	r3, r3, #9
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	041b      	lsls	r3, r3, #16
 800aace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aad2:	431a      	orrs	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	3b01      	subs	r3, #1
 800aada:	061b      	lsls	r3, r3, #24
 800aadc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aae0:	4931      	ldr	r1, [pc, #196]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aae6:	4b30      	ldr	r3, [pc, #192]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	492d      	ldr	r1, [pc, #180]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aaf8:	4b2b      	ldr	r3, [pc, #172]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	f023 0220 	bic.w	r2, r3, #32
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	4928      	ldr	r1, [pc, #160]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab0a:	4b27      	ldr	r3, [pc, #156]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	4a26      	ldr	r2, [pc, #152]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab10:	f023 0310 	bic.w	r3, r3, #16
 800ab14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab16:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab1a:	4b24      	ldr	r3, [pc, #144]	; (800abac <RCCEx_PLL2_Config+0x160>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	69d2      	ldr	r2, [r2, #28]
 800ab22:	00d2      	lsls	r2, r2, #3
 800ab24:	4920      	ldr	r1, [pc, #128]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab2a:	4b1f      	ldr	r3, [pc, #124]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab30:	f043 0310 	orr.w	r3, r3, #16
 800ab34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d106      	bne.n	800ab4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab3c:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	4a19      	ldr	r2, [pc, #100]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab48:	e00f      	b.n	800ab6a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d106      	bne.n	800ab5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab50:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab5c:	e005      	b.n	800ab6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	4a11      	ldr	r2, [pc, #68]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab6a:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a0e      	ldr	r2, [pc, #56]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab76:	f7fa fa17 	bl	8004fa8 <HAL_GetTick>
 800ab7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab7c:	e008      	b.n	800ab90 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab7e:	f7fa fa13 	bl	8004fa8 <HAL_GetTick>
 800ab82:	4602      	mov	r2, r0
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d901      	bls.n	800ab90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e006      	b.n	800ab9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab90:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <RCCEx_PLL2_Config+0x15c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0f0      	beq.n	800ab7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	58024400 	.word	0x58024400
 800abac:	ffff0007 	.word	0xffff0007

0800abb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abbe:	4b53      	ldr	r3, [pc, #332]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d101      	bne.n	800abce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e099      	b.n	800ad02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800abce:	4b4f      	ldr	r3, [pc, #316]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a4e      	ldr	r2, [pc, #312]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abda:	f7fa f9e5 	bl	8004fa8 <HAL_GetTick>
 800abde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abe0:	e008      	b.n	800abf4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800abe2:	f7fa f9e1 	bl	8004fa8 <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	2b02      	cmp	r3, #2
 800abee:	d901      	bls.n	800abf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e086      	b.n	800ad02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abf4:	4b45      	ldr	r3, [pc, #276]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1f0      	bne.n	800abe2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac00:	4b42      	ldr	r3, [pc, #264]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	051b      	lsls	r3, r3, #20
 800ac0e:	493f      	ldr	r1, [pc, #252]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	628b      	str	r3, [r1, #40]	; 0x28
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	025b      	lsls	r3, r3, #9
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	041b      	lsls	r3, r3, #16
 800ac32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac36:	431a      	orrs	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	061b      	lsls	r3, r3, #24
 800ac40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac44:	4931      	ldr	r1, [pc, #196]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac4a:	4b30      	ldr	r3, [pc, #192]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	492d      	ldr	r1, [pc, #180]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac5c:	4b2b      	ldr	r3, [pc, #172]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	4928      	ldr	r1, [pc, #160]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac6e:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	4a26      	ldr	r2, [pc, #152]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac7a:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7e:	4b24      	ldr	r3, [pc, #144]	; (800ad10 <RCCEx_PLL3_Config+0x160>)
 800ac80:	4013      	ands	r3, r2
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	69d2      	ldr	r2, [r2, #28]
 800ac86:	00d2      	lsls	r2, r2, #3
 800ac88:	4920      	ldr	r1, [pc, #128]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac8e:	4b1f      	ldr	r3, [pc, #124]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	4a1e      	ldr	r2, [pc, #120]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800ac94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aca0:	4b1a      	ldr	r3, [pc, #104]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	4a19      	ldr	r2, [pc, #100]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800aca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800acaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acac:	e00f      	b.n	800acce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d106      	bne.n	800acc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800acb4:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	4a14      	ldr	r2, [pc, #80]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800acbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acc0:	e005      	b.n	800acce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800acc2:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc6:	4a11      	ldr	r2, [pc, #68]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800accc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a0e      	ldr	r2, [pc, #56]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acda:	f7fa f965 	bl	8004fa8 <HAL_GetTick>
 800acde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ace0:	e008      	b.n	800acf4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ace2:	f7fa f961 	bl	8004fa8 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b02      	cmp	r3, #2
 800acee:	d901      	bls.n	800acf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e006      	b.n	800ad02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <RCCEx_PLL3_Config+0x15c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0f0      	beq.n	800ace2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	58024400 	.word	0x58024400
 800ad10:	ffff0007 	.word	0xffff0007

0800ad14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e049      	b.n	800adba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d106      	bne.n	800ad40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7f9 fc3c 	bl	80045b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2202      	movs	r2, #2
 800ad44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f000 feb8 	bl	800bac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
	...

0800adc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add2:	b2db      	uxtb	r3, r3
 800add4:	2b01      	cmp	r3, #1
 800add6:	d001      	beq.n	800addc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e05e      	b.n	800ae9a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2202      	movs	r2, #2
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0201 	orr.w	r2, r2, #1
 800adf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a2b      	ldr	r2, [pc, #172]	; (800aea8 <HAL_TIM_Base_Start_IT+0xe4>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d02c      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae06:	d027      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a27      	ldr	r2, [pc, #156]	; (800aeac <HAL_TIM_Base_Start_IT+0xe8>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d022      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a26      	ldr	r2, [pc, #152]	; (800aeb0 <HAL_TIM_Base_Start_IT+0xec>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d01d      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a24      	ldr	r2, [pc, #144]	; (800aeb4 <HAL_TIM_Base_Start_IT+0xf0>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d018      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a23      	ldr	r2, [pc, #140]	; (800aeb8 <HAL_TIM_Base_Start_IT+0xf4>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d013      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a21      	ldr	r2, [pc, #132]	; (800aebc <HAL_TIM_Base_Start_IT+0xf8>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d00e      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a20      	ldr	r2, [pc, #128]	; (800aec0 <HAL_TIM_Base_Start_IT+0xfc>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d009      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a1e      	ldr	r2, [pc, #120]	; (800aec4 <HAL_TIM_Base_Start_IT+0x100>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d004      	beq.n	800ae58 <HAL_TIM_Base_Start_IT+0x94>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a1d      	ldr	r2, [pc, #116]	; (800aec8 <HAL_TIM_Base_Start_IT+0x104>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d115      	bne.n	800ae84 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689a      	ldr	r2, [r3, #8]
 800ae5e:	4b1b      	ldr	r3, [pc, #108]	; (800aecc <HAL_TIM_Base_Start_IT+0x108>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d015      	beq.n	800ae96 <HAL_TIM_Base_Start_IT+0xd2>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae70:	d011      	beq.n	800ae96 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f042 0201 	orr.w	r2, r2, #1
 800ae80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae82:	e008      	b.n	800ae96 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	e000      	b.n	800ae98 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	40010000 	.word	0x40010000
 800aeac:	40000400 	.word	0x40000400
 800aeb0:	40000800 	.word	0x40000800
 800aeb4:	40000c00 	.word	0x40000c00
 800aeb8:	40010400 	.word	0x40010400
 800aebc:	40001800 	.word	0x40001800
 800aec0:	40014000 	.word	0x40014000
 800aec4:	4000e000 	.word	0x4000e000
 800aec8:	4000e400 	.word	0x4000e400
 800aecc:	00010007 	.word	0x00010007

0800aed0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e049      	b.n	800af76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d106      	bne.n	800aefc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7f9 fc96 	bl	8004828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4619      	mov	r1, r3
 800af0e:	4610      	mov	r0, r2
 800af10:	f000 fdda 	bl	800bac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
	...

0800af80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d109      	bne.n	800afa4 <HAL_TIM_PWM_Start+0x24>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b01      	cmp	r3, #1
 800af9a:	bf14      	ite	ne
 800af9c:	2301      	movne	r3, #1
 800af9e:	2300      	moveq	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	e03c      	b.n	800b01e <HAL_TIM_PWM_Start+0x9e>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d109      	bne.n	800afbe <HAL_TIM_PWM_Start+0x3e>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	bf14      	ite	ne
 800afb6:	2301      	movne	r3, #1
 800afb8:	2300      	moveq	r3, #0
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	e02f      	b.n	800b01e <HAL_TIM_PWM_Start+0x9e>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d109      	bne.n	800afd8 <HAL_TIM_PWM_Start+0x58>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b01      	cmp	r3, #1
 800afce:	bf14      	ite	ne
 800afd0:	2301      	movne	r3, #1
 800afd2:	2300      	moveq	r3, #0
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	e022      	b.n	800b01e <HAL_TIM_PWM_Start+0x9e>
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b0c      	cmp	r3, #12
 800afdc:	d109      	bne.n	800aff2 <HAL_TIM_PWM_Start+0x72>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	bf14      	ite	ne
 800afea:	2301      	movne	r3, #1
 800afec:	2300      	moveq	r3, #0
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	e015      	b.n	800b01e <HAL_TIM_PWM_Start+0x9e>
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	d109      	bne.n	800b00c <HAL_TIM_PWM_Start+0x8c>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b01      	cmp	r3, #1
 800b002:	bf14      	ite	ne
 800b004:	2301      	movne	r3, #1
 800b006:	2300      	moveq	r3, #0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	e008      	b.n	800b01e <HAL_TIM_PWM_Start+0x9e>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b01      	cmp	r3, #1
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e0ab      	b.n	800b17e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d104      	bne.n	800b036 <HAL_TIM_PWM_Start+0xb6>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b034:	e023      	b.n	800b07e <HAL_TIM_PWM_Start+0xfe>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d104      	bne.n	800b046 <HAL_TIM_PWM_Start+0xc6>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b044:	e01b      	b.n	800b07e <HAL_TIM_PWM_Start+0xfe>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b08      	cmp	r3, #8
 800b04a:	d104      	bne.n	800b056 <HAL_TIM_PWM_Start+0xd6>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b054:	e013      	b.n	800b07e <HAL_TIM_PWM_Start+0xfe>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b0c      	cmp	r3, #12
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_PWM_Start+0xe6>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b064:	e00b      	b.n	800b07e <HAL_TIM_PWM_Start+0xfe>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b10      	cmp	r3, #16
 800b06a:	d104      	bne.n	800b076 <HAL_TIM_PWM_Start+0xf6>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2202      	movs	r2, #2
 800b070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b074:	e003      	b.n	800b07e <HAL_TIM_PWM_Start+0xfe>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2202      	movs	r2, #2
 800b07a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2201      	movs	r2, #1
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	4618      	mov	r0, r3
 800b088:	f001 f938 	bl	800c2fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a3d      	ldr	r2, [pc, #244]	; (800b188 <HAL_TIM_PWM_Start+0x208>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d013      	beq.n	800b0be <HAL_TIM_PWM_Start+0x13e>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a3c      	ldr	r2, [pc, #240]	; (800b18c <HAL_TIM_PWM_Start+0x20c>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00e      	beq.n	800b0be <HAL_TIM_PWM_Start+0x13e>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a3a      	ldr	r2, [pc, #232]	; (800b190 <HAL_TIM_PWM_Start+0x210>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d009      	beq.n	800b0be <HAL_TIM_PWM_Start+0x13e>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a39      	ldr	r2, [pc, #228]	; (800b194 <HAL_TIM_PWM_Start+0x214>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d004      	beq.n	800b0be <HAL_TIM_PWM_Start+0x13e>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a37      	ldr	r2, [pc, #220]	; (800b198 <HAL_TIM_PWM_Start+0x218>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d101      	bne.n	800b0c2 <HAL_TIM_PWM_Start+0x142>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e000      	b.n	800b0c4 <HAL_TIM_PWM_Start+0x144>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d007      	beq.n	800b0d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a2a      	ldr	r2, [pc, #168]	; (800b188 <HAL_TIM_PWM_Start+0x208>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d02c      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ea:	d027      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a2a      	ldr	r2, [pc, #168]	; (800b19c <HAL_TIM_PWM_Start+0x21c>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d022      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a29      	ldr	r2, [pc, #164]	; (800b1a0 <HAL_TIM_PWM_Start+0x220>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d01d      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a27      	ldr	r2, [pc, #156]	; (800b1a4 <HAL_TIM_PWM_Start+0x224>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d018      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a1f      	ldr	r2, [pc, #124]	; (800b18c <HAL_TIM_PWM_Start+0x20c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d013      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a23      	ldr	r2, [pc, #140]	; (800b1a8 <HAL_TIM_PWM_Start+0x228>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d00e      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <HAL_TIM_PWM_Start+0x210>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d009      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ac <HAL_TIM_PWM_Start+0x22c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d004      	beq.n	800b13c <HAL_TIM_PWM_Start+0x1bc>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a1e      	ldr	r2, [pc, #120]	; (800b1b0 <HAL_TIM_PWM_Start+0x230>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d115      	bne.n	800b168 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	689a      	ldr	r2, [r3, #8]
 800b142:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <HAL_TIM_PWM_Start+0x234>)
 800b144:	4013      	ands	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b06      	cmp	r3, #6
 800b14c:	d015      	beq.n	800b17a <HAL_TIM_PWM_Start+0x1fa>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b154:	d011      	beq.n	800b17a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f042 0201 	orr.w	r2, r2, #1
 800b164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b166:	e008      	b.n	800b17a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f042 0201 	orr.w	r2, r2, #1
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	e000      	b.n	800b17c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b17a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	40010000 	.word	0x40010000
 800b18c:	40010400 	.word	0x40010400
 800b190:	40014000 	.word	0x40014000
 800b194:	40014400 	.word	0x40014400
 800b198:	40014800 	.word	0x40014800
 800b19c:	40000400 	.word	0x40000400
 800b1a0:	40000800 	.word	0x40000800
 800b1a4:	40000c00 	.word	0x40000c00
 800b1a8:	40001800 	.word	0x40001800
 800b1ac:	4000e000 	.word	0x4000e000
 800b1b0:	4000e400 	.word	0x4000e400
 800b1b4:	00010007 	.word	0x00010007

0800b1b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e08f      	b.n	800b2ec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d106      	bne.n	800b1e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7f9 fa2f 	bl	8004644 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6899      	ldr	r1, [r3, #8]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	4b3e      	ldr	r3, [pc, #248]	; (800b2f4 <HAL_TIM_Encoder_Init+0x13c>)
 800b1fa:	400b      	ands	r3, r1
 800b1fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3304      	adds	r3, #4
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f000 fc5d 	bl	800bac8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	4b31      	ldr	r3, [pc, #196]	; (800b2f8 <HAL_TIM_Encoder_Init+0x140>)
 800b234:	4013      	ands	r3, r2
 800b236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	689a      	ldr	r2, [r3, #8]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	021b      	lsls	r3, r3, #8
 800b242:	4313      	orrs	r3, r2
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	4313      	orrs	r3, r2
 800b248:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	4b2b      	ldr	r3, [pc, #172]	; (800b2fc <HAL_TIM_Encoder_Init+0x144>)
 800b24e:	4013      	ands	r3, r2
 800b250:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4b2a      	ldr	r3, [pc, #168]	; (800b300 <HAL_TIM_Encoder_Init+0x148>)
 800b256:	4013      	ands	r3, r2
 800b258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68da      	ldr	r2, [r3, #12]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	021b      	lsls	r3, r3, #8
 800b264:	4313      	orrs	r3, r2
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	4313      	orrs	r3, r2
 800b26a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	011a      	lsls	r2, r3, #4
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	031b      	lsls	r3, r3, #12
 800b278:	4313      	orrs	r3, r2
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b286:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b28e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	011b      	lsls	r3, r3, #4
 800b29a:	4313      	orrs	r3, r2
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	fffebff8 	.word	0xfffebff8
 800b2f8:	fffffcfc 	.word	0xfffffcfc
 800b2fc:	fffff3f3 	.word	0xfffff3f3
 800b300:	ffff0f0f 	.word	0xffff0f0f

0800b304 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b314:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b31c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b324:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b32c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d110      	bne.n	800b356 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d102      	bne.n	800b340 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b33a:	7b7b      	ldrb	r3, [r7, #13]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d001      	beq.n	800b344 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e069      	b.n	800b418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2202      	movs	r2, #2
 800b350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b354:	e031      	b.n	800b3ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d110      	bne.n	800b37e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d102      	bne.n	800b368 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b362:	7b3b      	ldrb	r3, [r7, #12]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d001      	beq.n	800b36c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e055      	b.n	800b418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2202      	movs	r2, #2
 800b378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b37c:	e01d      	b.n	800b3ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d108      	bne.n	800b396 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d105      	bne.n	800b396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b38a:	7b7b      	ldrb	r3, [r7, #13]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d102      	bne.n	800b396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b390:	7b3b      	ldrb	r3, [r7, #12]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d001      	beq.n	800b39a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e03e      	b.n	800b418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2202      	movs	r2, #2
 800b39e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2202      	movs	r2, #2
 800b3ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d003      	beq.n	800b3c8 <HAL_TIM_Encoder_Start+0xc4>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	d008      	beq.n	800b3d8 <HAL_TIM_Encoder_Start+0xd4>
 800b3c6:	e00f      	b.n	800b3e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 ff93 	bl	800c2fc <TIM_CCxChannelCmd>
      break;
 800b3d6:	e016      	b.n	800b406 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	2104      	movs	r1, #4
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 ff8b 	bl	800c2fc <TIM_CCxChannelCmd>
      break;
 800b3e6:	e00e      	b.n	800b406 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 ff83 	bl	800c2fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	2104      	movs	r1, #4
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 ff7c 	bl	800c2fc <TIM_CCxChannelCmd>
      break;
 800b404:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f042 0201 	orr.w	r2, r2, #1
 800b414:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b02      	cmp	r3, #2
 800b434:	d122      	bne.n	800b47c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b02      	cmp	r3, #2
 800b442:	d11b      	bne.n	800b47c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f06f 0202 	mvn.w	r2, #2
 800b44c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f003 0303 	and.w	r3, r3, #3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fb12 	bl	800ba8c <HAL_TIM_IC_CaptureCallback>
 800b468:	e005      	b.n	800b476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fb04 	bl	800ba78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fb15 	bl	800baa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b04      	cmp	r3, #4
 800b488:	d122      	bne.n	800b4d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b04      	cmp	r3, #4
 800b496:	d11b      	bne.n	800b4d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f06f 0204 	mvn.w	r2, #4
 800b4a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fae8 	bl	800ba8c <HAL_TIM_IC_CaptureCallback>
 800b4bc:	e005      	b.n	800b4ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fada 	bl	800ba78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 faeb 	bl	800baa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	f003 0308 	and.w	r3, r3, #8
 800b4da:	2b08      	cmp	r3, #8
 800b4dc:	d122      	bne.n	800b524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	f003 0308 	and.w	r3, r3, #8
 800b4e8:	2b08      	cmp	r3, #8
 800b4ea:	d11b      	bne.n	800b524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f06f 0208 	mvn.w	r2, #8
 800b4f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2204      	movs	r2, #4
 800b4fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fabe 	bl	800ba8c <HAL_TIM_IC_CaptureCallback>
 800b510:	e005      	b.n	800b51e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fab0 	bl	800ba78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fac1 	bl	800baa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	f003 0310 	and.w	r3, r3, #16
 800b52e:	2b10      	cmp	r3, #16
 800b530:	d122      	bne.n	800b578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f003 0310 	and.w	r3, r3, #16
 800b53c:	2b10      	cmp	r3, #16
 800b53e:	d11b      	bne.n	800b578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f06f 0210 	mvn.w	r2, #16
 800b548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2208      	movs	r2, #8
 800b54e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fa94 	bl	800ba8c <HAL_TIM_IC_CaptureCallback>
 800b564:	e005      	b.n	800b572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fa86 	bl	800ba78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fa97 	bl	800baa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	2b01      	cmp	r3, #1
 800b584:	d10e      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b01      	cmp	r3, #1
 800b592:	d107      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f06f 0201 	mvn.w	r2, #1
 800b59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7f5 ff92 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ae:	2b80      	cmp	r3, #128	; 0x80
 800b5b0:	d10e      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5bc:	2b80      	cmp	r3, #128	; 0x80
 800b5be:	d107      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f001 f802 	bl	800c5d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5de:	d10e      	bne.n	800b5fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ea:	2b80      	cmp	r3, #128	; 0x80
 800b5ec:	d107      	bne.n	800b5fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fff5 	bl	800c5e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b608:	2b40      	cmp	r3, #64	; 0x40
 800b60a:	d10e      	bne.n	800b62a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b616:	2b40      	cmp	r3, #64	; 0x40
 800b618:	d107      	bne.n	800b62a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fa45 	bl	800bab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0320 	and.w	r3, r3, #32
 800b634:	2b20      	cmp	r3, #32
 800b636:	d10e      	bne.n	800b656 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b20      	cmp	r3, #32
 800b644:	d107      	bne.n	800b656 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f06f 0220 	mvn.w	r2, #32
 800b64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 ffb5 	bl	800c5c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
	...

0800b660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b676:	2b01      	cmp	r3, #1
 800b678:	d101      	bne.n	800b67e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b67a:	2302      	movs	r3, #2
 800b67c:	e0ff      	b.n	800b87e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b14      	cmp	r3, #20
 800b68a:	f200 80f0 	bhi.w	800b86e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b68e:	a201      	add	r2, pc, #4	; (adr r2, 800b694 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b694:	0800b6e9 	.word	0x0800b6e9
 800b698:	0800b86f 	.word	0x0800b86f
 800b69c:	0800b86f 	.word	0x0800b86f
 800b6a0:	0800b86f 	.word	0x0800b86f
 800b6a4:	0800b729 	.word	0x0800b729
 800b6a8:	0800b86f 	.word	0x0800b86f
 800b6ac:	0800b86f 	.word	0x0800b86f
 800b6b0:	0800b86f 	.word	0x0800b86f
 800b6b4:	0800b76b 	.word	0x0800b76b
 800b6b8:	0800b86f 	.word	0x0800b86f
 800b6bc:	0800b86f 	.word	0x0800b86f
 800b6c0:	0800b86f 	.word	0x0800b86f
 800b6c4:	0800b7ab 	.word	0x0800b7ab
 800b6c8:	0800b86f 	.word	0x0800b86f
 800b6cc:	0800b86f 	.word	0x0800b86f
 800b6d0:	0800b86f 	.word	0x0800b86f
 800b6d4:	0800b7ed 	.word	0x0800b7ed
 800b6d8:	0800b86f 	.word	0x0800b86f
 800b6dc:	0800b86f 	.word	0x0800b86f
 800b6e0:	0800b86f 	.word	0x0800b86f
 800b6e4:	0800b82d 	.word	0x0800b82d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68b9      	ldr	r1, [r7, #8]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fa90 	bl	800bc14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	699a      	ldr	r2, [r3, #24]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f042 0208 	orr.w	r2, r2, #8
 800b702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	699a      	ldr	r2, [r3, #24]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f022 0204 	bic.w	r2, r2, #4
 800b712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6999      	ldr	r1, [r3, #24]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	691a      	ldr	r2, [r3, #16]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	619a      	str	r2, [r3, #24]
      break;
 800b726:	e0a5      	b.n	800b874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 fb00 	bl	800bd34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	699a      	ldr	r2, [r3, #24]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	699a      	ldr	r2, [r3, #24]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6999      	ldr	r1, [r3, #24]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	021a      	lsls	r2, r3, #8
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	619a      	str	r2, [r3, #24]
      break;
 800b768:	e084      	b.n	800b874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fb69 	bl	800be48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	69da      	ldr	r2, [r3, #28]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f042 0208 	orr.w	r2, r2, #8
 800b784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	69da      	ldr	r2, [r3, #28]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 0204 	bic.w	r2, r2, #4
 800b794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	69d9      	ldr	r1, [r3, #28]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	691a      	ldr	r2, [r3, #16]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	430a      	orrs	r2, r1
 800b7a6:	61da      	str	r2, [r3, #28]
      break;
 800b7a8:	e064      	b.n	800b874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68b9      	ldr	r1, [r7, #8]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 fbd1 	bl	800bf58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	69da      	ldr	r2, [r3, #28]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	69da      	ldr	r2, [r3, #28]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	69d9      	ldr	r1, [r3, #28]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	021a      	lsls	r2, r3, #8
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	430a      	orrs	r2, r1
 800b7e8:	61da      	str	r2, [r3, #28]
      break;
 800b7ea:	e043      	b.n	800b874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68b9      	ldr	r1, [r7, #8]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 fc1a 	bl	800c02c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0208 	orr.w	r2, r2, #8
 800b806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f022 0204 	bic.w	r2, r2, #4
 800b816:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	691a      	ldr	r2, [r3, #16]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b82a:	e023      	b.n	800b874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 fc5e 	bl	800c0f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b846:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b856:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	021a      	lsls	r2, r3, #8
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	430a      	orrs	r2, r1
 800b86a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b86c:	e002      	b.n	800b874 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	75fb      	strb	r3, [r7, #23]
      break;
 800b872:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop

0800b888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d101      	bne.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	e0dc      	b.n	800ba5e <HAL_TIM_ConfigClockSource+0x1d6>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	4b6a      	ldr	r3, [pc, #424]	; (800ba68 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a64      	ldr	r2, [pc, #400]	; (800ba6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	f000 80a9 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8e0:	4a62      	ldr	r2, [pc, #392]	; (800ba6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	f200 80ae 	bhi.w	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8e8:	4a61      	ldr	r2, [pc, #388]	; (800ba70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	f000 80a1 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8f0:	4a5f      	ldr	r2, [pc, #380]	; (800ba70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	f200 80a6 	bhi.w	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8f8:	4a5e      	ldr	r2, [pc, #376]	; (800ba74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	f000 8099 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b900:	4a5c      	ldr	r2, [pc, #368]	; (800ba74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b902:	4293      	cmp	r3, r2
 800b904:	f200 809e 	bhi.w	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b908:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b90c:	f000 8091 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b910:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b914:	f200 8096 	bhi.w	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b91c:	f000 8089 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b924:	f200 808e 	bhi.w	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b92c:	d03e      	beq.n	800b9ac <HAL_TIM_ConfigClockSource+0x124>
 800b92e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b932:	f200 8087 	bhi.w	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b93a:	f000 8086 	beq.w	800ba4a <HAL_TIM_ConfigClockSource+0x1c2>
 800b93e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b942:	d87f      	bhi.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b944:	2b70      	cmp	r3, #112	; 0x70
 800b946:	d01a      	beq.n	800b97e <HAL_TIM_ConfigClockSource+0xf6>
 800b948:	2b70      	cmp	r3, #112	; 0x70
 800b94a:	d87b      	bhi.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b94c:	2b60      	cmp	r3, #96	; 0x60
 800b94e:	d050      	beq.n	800b9f2 <HAL_TIM_ConfigClockSource+0x16a>
 800b950:	2b60      	cmp	r3, #96	; 0x60
 800b952:	d877      	bhi.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b954:	2b50      	cmp	r3, #80	; 0x50
 800b956:	d03c      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x14a>
 800b958:	2b50      	cmp	r3, #80	; 0x50
 800b95a:	d873      	bhi.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b95c:	2b40      	cmp	r3, #64	; 0x40
 800b95e:	d058      	beq.n	800ba12 <HAL_TIM_ConfigClockSource+0x18a>
 800b960:	2b40      	cmp	r3, #64	; 0x40
 800b962:	d86f      	bhi.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b964:	2b30      	cmp	r3, #48	; 0x30
 800b966:	d064      	beq.n	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b968:	2b30      	cmp	r3, #48	; 0x30
 800b96a:	d86b      	bhi.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b96c:	2b20      	cmp	r3, #32
 800b96e:	d060      	beq.n	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b970:	2b20      	cmp	r3, #32
 800b972:	d867      	bhi.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d05c      	beq.n	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b978:	2b10      	cmp	r3, #16
 800b97a:	d05a      	beq.n	800ba32 <HAL_TIM_ConfigClockSource+0x1aa>
 800b97c:	e062      	b.n	800ba44 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	6899      	ldr	r1, [r3, #8]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	f000 fc95 	bl	800c2bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b9a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	609a      	str	r2, [r3, #8]
      break;
 800b9aa:	e04f      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6818      	ldr	r0, [r3, #0]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	6899      	ldr	r1, [r3, #8]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685a      	ldr	r2, [r3, #4]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f000 fc7e 	bl	800c2bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9ce:	609a      	str	r2, [r3, #8]
      break;
 800b9d0:	e03c      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	6859      	ldr	r1, [r3, #4]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	f000 fbee 	bl	800c1c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2150      	movs	r1, #80	; 0x50
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 fc48 	bl	800c280 <TIM_ITRx_SetConfig>
      break;
 800b9f0:	e02c      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	6859      	ldr	r1, [r3, #4]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f000 fc0d 	bl	800c21e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2160      	movs	r1, #96	; 0x60
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 fc38 	bl	800c280 <TIM_ITRx_SetConfig>
      break;
 800ba10:	e01c      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	6859      	ldr	r1, [r3, #4]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f000 fbce 	bl	800c1c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2140      	movs	r1, #64	; 0x40
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fc28 	bl	800c280 <TIM_ITRx_SetConfig>
      break;
 800ba30:	e00c      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f000 fc1f 	bl	800c280 <TIM_ITRx_SetConfig>
      break;
 800ba42:	e003      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	73fb      	strb	r3, [r7, #15]
      break;
 800ba48:	e000      	b.n	800ba4c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ba4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	ffceff88 	.word	0xffceff88
 800ba6c:	00100040 	.word	0x00100040
 800ba70:	00100030 	.word	0x00100030
 800ba74:	00100020 	.word	0x00100020

0800ba78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a44      	ldr	r2, [pc, #272]	; (800bbec <TIM_Base_SetConfig+0x124>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d013      	beq.n	800bb08 <TIM_Base_SetConfig+0x40>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae6:	d00f      	beq.n	800bb08 <TIM_Base_SetConfig+0x40>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a41      	ldr	r2, [pc, #260]	; (800bbf0 <TIM_Base_SetConfig+0x128>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d00b      	beq.n	800bb08 <TIM_Base_SetConfig+0x40>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a40      	ldr	r2, [pc, #256]	; (800bbf4 <TIM_Base_SetConfig+0x12c>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d007      	beq.n	800bb08 <TIM_Base_SetConfig+0x40>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a3f      	ldr	r2, [pc, #252]	; (800bbf8 <TIM_Base_SetConfig+0x130>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d003      	beq.n	800bb08 <TIM_Base_SetConfig+0x40>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a3e      	ldr	r2, [pc, #248]	; (800bbfc <TIM_Base_SetConfig+0x134>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d108      	bne.n	800bb1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a33      	ldr	r2, [pc, #204]	; (800bbec <TIM_Base_SetConfig+0x124>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d027      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb28:	d023      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a30      	ldr	r2, [pc, #192]	; (800bbf0 <TIM_Base_SetConfig+0x128>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d01f      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a2f      	ldr	r2, [pc, #188]	; (800bbf4 <TIM_Base_SetConfig+0x12c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d01b      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a2e      	ldr	r2, [pc, #184]	; (800bbf8 <TIM_Base_SetConfig+0x130>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d017      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a2d      	ldr	r2, [pc, #180]	; (800bbfc <TIM_Base_SetConfig+0x134>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d013      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a2c      	ldr	r2, [pc, #176]	; (800bc00 <TIM_Base_SetConfig+0x138>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d00f      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a2b      	ldr	r2, [pc, #172]	; (800bc04 <TIM_Base_SetConfig+0x13c>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d00b      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a2a      	ldr	r2, [pc, #168]	; (800bc08 <TIM_Base_SetConfig+0x140>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d007      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a29      	ldr	r2, [pc, #164]	; (800bc0c <TIM_Base_SetConfig+0x144>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d003      	beq.n	800bb72 <TIM_Base_SetConfig+0xaa>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a28      	ldr	r2, [pc, #160]	; (800bc10 <TIM_Base_SetConfig+0x148>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d108      	bne.n	800bb84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4a10      	ldr	r2, [pc, #64]	; (800bbec <TIM_Base_SetConfig+0x124>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d00f      	beq.n	800bbd0 <TIM_Base_SetConfig+0x108>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4a12      	ldr	r2, [pc, #72]	; (800bbfc <TIM_Base_SetConfig+0x134>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d00b      	beq.n	800bbd0 <TIM_Base_SetConfig+0x108>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a11      	ldr	r2, [pc, #68]	; (800bc00 <TIM_Base_SetConfig+0x138>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d007      	beq.n	800bbd0 <TIM_Base_SetConfig+0x108>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a10      	ldr	r2, [pc, #64]	; (800bc04 <TIM_Base_SetConfig+0x13c>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d003      	beq.n	800bbd0 <TIM_Base_SetConfig+0x108>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a0f      	ldr	r2, [pc, #60]	; (800bc08 <TIM_Base_SetConfig+0x140>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d103      	bne.n	800bbd8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	691a      	ldr	r2, [r3, #16]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	615a      	str	r2, [r3, #20]
}
 800bbde:	bf00      	nop
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	40010000 	.word	0x40010000
 800bbf0:	40000400 	.word	0x40000400
 800bbf4:	40000800 	.word	0x40000800
 800bbf8:	40000c00 	.word	0x40000c00
 800bbfc:	40010400 	.word	0x40010400
 800bc00:	40014000 	.word	0x40014000
 800bc04:	40014400 	.word	0x40014400
 800bc08:	40014800 	.word	0x40014800
 800bc0c:	4000e000 	.word	0x4000e000
 800bc10:	4000e400 	.word	0x4000e400

0800bc14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	f023 0201 	bic.w	r2, r3, #1
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	4b37      	ldr	r3, [pc, #220]	; (800bd1c <TIM_OC1_SetConfig+0x108>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0303 	bic.w	r3, r3, #3
 800bc4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f023 0302 	bic.w	r3, r3, #2
 800bc5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a2d      	ldr	r2, [pc, #180]	; (800bd20 <TIM_OC1_SetConfig+0x10c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d00f      	beq.n	800bc90 <TIM_OC1_SetConfig+0x7c>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a2c      	ldr	r2, [pc, #176]	; (800bd24 <TIM_OC1_SetConfig+0x110>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d00b      	beq.n	800bc90 <TIM_OC1_SetConfig+0x7c>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a2b      	ldr	r2, [pc, #172]	; (800bd28 <TIM_OC1_SetConfig+0x114>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d007      	beq.n	800bc90 <TIM_OC1_SetConfig+0x7c>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a2a      	ldr	r2, [pc, #168]	; (800bd2c <TIM_OC1_SetConfig+0x118>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d003      	beq.n	800bc90 <TIM_OC1_SetConfig+0x7c>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a29      	ldr	r2, [pc, #164]	; (800bd30 <TIM_OC1_SetConfig+0x11c>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10c      	bne.n	800bcaa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f023 0308 	bic.w	r3, r3, #8
 800bc96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f023 0304 	bic.w	r3, r3, #4
 800bca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a1c      	ldr	r2, [pc, #112]	; (800bd20 <TIM_OC1_SetConfig+0x10c>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d00f      	beq.n	800bcd2 <TIM_OC1_SetConfig+0xbe>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a1b      	ldr	r2, [pc, #108]	; (800bd24 <TIM_OC1_SetConfig+0x110>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d00b      	beq.n	800bcd2 <TIM_OC1_SetConfig+0xbe>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4a1a      	ldr	r2, [pc, #104]	; (800bd28 <TIM_OC1_SetConfig+0x114>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d007      	beq.n	800bcd2 <TIM_OC1_SetConfig+0xbe>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a19      	ldr	r2, [pc, #100]	; (800bd2c <TIM_OC1_SetConfig+0x118>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d003      	beq.n	800bcd2 <TIM_OC1_SetConfig+0xbe>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a18      	ldr	r2, [pc, #96]	; (800bd30 <TIM_OC1_SetConfig+0x11c>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d111      	bne.n	800bcf6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	685a      	ldr	r2, [r3, #4]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	621a      	str	r2, [r3, #32]
}
 800bd10:	bf00      	nop
 800bd12:	371c      	adds	r7, #28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	fffeff8f 	.word	0xfffeff8f
 800bd20:	40010000 	.word	0x40010000
 800bd24:	40010400 	.word	0x40010400
 800bd28:	40014000 	.word	0x40014000
 800bd2c:	40014400 	.word	0x40014400
 800bd30:	40014800 	.word	0x40014800

0800bd34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	f023 0210 	bic.w	r2, r3, #16
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4b34      	ldr	r3, [pc, #208]	; (800be30 <TIM_OC2_SetConfig+0xfc>)
 800bd60:	4013      	ands	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	021b      	lsls	r3, r3, #8
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f023 0320 	bic.w	r3, r3, #32
 800bd7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a29      	ldr	r2, [pc, #164]	; (800be34 <TIM_OC2_SetConfig+0x100>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d003      	beq.n	800bd9c <TIM_OC2_SetConfig+0x68>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a28      	ldr	r2, [pc, #160]	; (800be38 <TIM_OC2_SetConfig+0x104>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d10d      	bne.n	800bdb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bda2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	011b      	lsls	r3, r3, #4
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a1e      	ldr	r2, [pc, #120]	; (800be34 <TIM_OC2_SetConfig+0x100>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d00f      	beq.n	800bde0 <TIM_OC2_SetConfig+0xac>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a1d      	ldr	r2, [pc, #116]	; (800be38 <TIM_OC2_SetConfig+0x104>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d00b      	beq.n	800bde0 <TIM_OC2_SetConfig+0xac>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4a1c      	ldr	r2, [pc, #112]	; (800be3c <TIM_OC2_SetConfig+0x108>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d007      	beq.n	800bde0 <TIM_OC2_SetConfig+0xac>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a1b      	ldr	r2, [pc, #108]	; (800be40 <TIM_OC2_SetConfig+0x10c>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d003      	beq.n	800bde0 <TIM_OC2_SetConfig+0xac>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a1a      	ldr	r2, [pc, #104]	; (800be44 <TIM_OC2_SetConfig+0x110>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d113      	bne.n	800be08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bde6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	4313      	orrs	r3, r2
 800be06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	621a      	str	r2, [r3, #32]
}
 800be22:	bf00      	nop
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	feff8fff 	.word	0xfeff8fff
 800be34:	40010000 	.word	0x40010000
 800be38:	40010400 	.word	0x40010400
 800be3c:	40014000 	.word	0x40014000
 800be40:	40014400 	.word	0x40014400
 800be44:	40014800 	.word	0x40014800

0800be48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	4b33      	ldr	r3, [pc, #204]	; (800bf40 <TIM_OC3_SetConfig+0xf8>)
 800be74:	4013      	ands	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	021b      	lsls	r3, r3, #8
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a28      	ldr	r2, [pc, #160]	; (800bf44 <TIM_OC3_SetConfig+0xfc>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d003      	beq.n	800beae <TIM_OC3_SetConfig+0x66>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a27      	ldr	r2, [pc, #156]	; (800bf48 <TIM_OC3_SetConfig+0x100>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d10d      	bne.n	800beca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	021b      	lsls	r3, r3, #8
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a1d      	ldr	r2, [pc, #116]	; (800bf44 <TIM_OC3_SetConfig+0xfc>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d00f      	beq.n	800bef2 <TIM_OC3_SetConfig+0xaa>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a1c      	ldr	r2, [pc, #112]	; (800bf48 <TIM_OC3_SetConfig+0x100>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d00b      	beq.n	800bef2 <TIM_OC3_SetConfig+0xaa>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a1b      	ldr	r2, [pc, #108]	; (800bf4c <TIM_OC3_SetConfig+0x104>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d007      	beq.n	800bef2 <TIM_OC3_SetConfig+0xaa>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a1a      	ldr	r2, [pc, #104]	; (800bf50 <TIM_OC3_SetConfig+0x108>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d003      	beq.n	800bef2 <TIM_OC3_SetConfig+0xaa>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a19      	ldr	r2, [pc, #100]	; (800bf54 <TIM_OC3_SetConfig+0x10c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d113      	bne.n	800bf1a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	011b      	lsls	r3, r3, #4
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	011b      	lsls	r3, r3, #4
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	621a      	str	r2, [r3, #32]
}
 800bf34:	bf00      	nop
 800bf36:	371c      	adds	r7, #28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	fffeff8f 	.word	0xfffeff8f
 800bf44:	40010000 	.word	0x40010000
 800bf48:	40010400 	.word	0x40010400
 800bf4c:	40014000 	.word	0x40014000
 800bf50:	40014400 	.word	0x40014400
 800bf54:	40014800 	.word	0x40014800

0800bf58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b087      	sub	sp, #28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	4b24      	ldr	r3, [pc, #144]	; (800c014 <TIM_OC4_SetConfig+0xbc>)
 800bf84:	4013      	ands	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	021b      	lsls	r3, r3, #8
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	031b      	lsls	r3, r3, #12
 800bfaa:	693a      	ldr	r2, [r7, #16]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a19      	ldr	r2, [pc, #100]	; (800c018 <TIM_OC4_SetConfig+0xc0>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d00f      	beq.n	800bfd8 <TIM_OC4_SetConfig+0x80>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a18      	ldr	r2, [pc, #96]	; (800c01c <TIM_OC4_SetConfig+0xc4>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d00b      	beq.n	800bfd8 <TIM_OC4_SetConfig+0x80>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4a17      	ldr	r2, [pc, #92]	; (800c020 <TIM_OC4_SetConfig+0xc8>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d007      	beq.n	800bfd8 <TIM_OC4_SetConfig+0x80>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a16      	ldr	r2, [pc, #88]	; (800c024 <TIM_OC4_SetConfig+0xcc>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d003      	beq.n	800bfd8 <TIM_OC4_SetConfig+0x80>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a15      	ldr	r2, [pc, #84]	; (800c028 <TIM_OC4_SetConfig+0xd0>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d109      	bne.n	800bfec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bfde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	019b      	lsls	r3, r3, #6
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	621a      	str	r2, [r3, #32]
}
 800c006:	bf00      	nop
 800c008:	371c      	adds	r7, #28
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	feff8fff 	.word	0xfeff8fff
 800c018:	40010000 	.word	0x40010000
 800c01c:	40010400 	.word	0x40010400
 800c020:	40014000 	.word	0x40014000
 800c024:	40014400 	.word	0x40014400
 800c028:	40014800 	.word	0x40014800

0800c02c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b087      	sub	sp, #28
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <TIM_OC5_SetConfig+0xb0>)
 800c058:	4013      	ands	r3, r2
 800c05a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c06c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	041b      	lsls	r3, r3, #16
 800c074:	693a      	ldr	r2, [r7, #16]
 800c076:	4313      	orrs	r3, r2
 800c078:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a18      	ldr	r2, [pc, #96]	; (800c0e0 <TIM_OC5_SetConfig+0xb4>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d00f      	beq.n	800c0a2 <TIM_OC5_SetConfig+0x76>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a17      	ldr	r2, [pc, #92]	; (800c0e4 <TIM_OC5_SetConfig+0xb8>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d00b      	beq.n	800c0a2 <TIM_OC5_SetConfig+0x76>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a16      	ldr	r2, [pc, #88]	; (800c0e8 <TIM_OC5_SetConfig+0xbc>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d007      	beq.n	800c0a2 <TIM_OC5_SetConfig+0x76>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a15      	ldr	r2, [pc, #84]	; (800c0ec <TIM_OC5_SetConfig+0xc0>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d003      	beq.n	800c0a2 <TIM_OC5_SetConfig+0x76>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a14      	ldr	r2, [pc, #80]	; (800c0f0 <TIM_OC5_SetConfig+0xc4>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d109      	bne.n	800c0b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	021b      	lsls	r3, r3, #8
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	697a      	ldr	r2, [r7, #20]
 800c0ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	621a      	str	r2, [r3, #32]
}
 800c0d0:	bf00      	nop
 800c0d2:	371c      	adds	r7, #28
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	fffeff8f 	.word	0xfffeff8f
 800c0e0:	40010000 	.word	0x40010000
 800c0e4:	40010400 	.word	0x40010400
 800c0e8:	40014000 	.word	0x40014000
 800c0ec:	40014400 	.word	0x40014400
 800c0f0:	40014800 	.word	0x40014800

0800c0f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b087      	sub	sp, #28
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4b22      	ldr	r3, [pc, #136]	; (800c1a8 <TIM_OC6_SetConfig+0xb4>)
 800c120:	4013      	ands	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	021b      	lsls	r3, r3, #8
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	051b      	lsls	r3, r3, #20
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	4313      	orrs	r3, r2
 800c142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a19      	ldr	r2, [pc, #100]	; (800c1ac <TIM_OC6_SetConfig+0xb8>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d00f      	beq.n	800c16c <TIM_OC6_SetConfig+0x78>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a18      	ldr	r2, [pc, #96]	; (800c1b0 <TIM_OC6_SetConfig+0xbc>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d00b      	beq.n	800c16c <TIM_OC6_SetConfig+0x78>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a17      	ldr	r2, [pc, #92]	; (800c1b4 <TIM_OC6_SetConfig+0xc0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d007      	beq.n	800c16c <TIM_OC6_SetConfig+0x78>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a16      	ldr	r2, [pc, #88]	; (800c1b8 <TIM_OC6_SetConfig+0xc4>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d003      	beq.n	800c16c <TIM_OC6_SetConfig+0x78>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a15      	ldr	r2, [pc, #84]	; (800c1bc <TIM_OC6_SetConfig+0xc8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d109      	bne.n	800c180 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c172:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	029b      	lsls	r3, r3, #10
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	621a      	str	r2, [r3, #32]
}
 800c19a:	bf00      	nop
 800c19c:	371c      	adds	r7, #28
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	feff8fff 	.word	0xfeff8fff
 800c1ac:	40010000 	.word	0x40010000
 800c1b0:	40010400 	.word	0x40010400
 800c1b4:	40014000 	.word	0x40014000
 800c1b8:	40014400 	.word	0x40014400
 800c1bc:	40014800 	.word	0x40014800

0800c1c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6a1b      	ldr	r3, [r3, #32]
 800c1d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6a1b      	ldr	r3, [r3, #32]
 800c1d6:	f023 0201 	bic.w	r2, r3, #1
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	f023 030a 	bic.w	r3, r3, #10
 800c1fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	4313      	orrs	r3, r2
 800c204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	621a      	str	r2, [r3, #32]
}
 800c212:	bf00      	nop
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c21e:	b480      	push	{r7}
 800c220:	b087      	sub	sp, #28
 800c222:	af00      	add	r7, sp, #0
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	60b9      	str	r1, [r7, #8]
 800c228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	f023 0210 	bic.w	r2, r3, #16
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	699b      	ldr	r3, [r3, #24]
 800c23a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	031b      	lsls	r3, r3, #12
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	4313      	orrs	r3, r2
 800c252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c25a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	011b      	lsls	r3, r3, #4
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	4313      	orrs	r3, r2
 800c264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	621a      	str	r2, [r3, #32]
}
 800c272:	bf00      	nop
 800c274:	371c      	adds	r7, #28
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
	...

0800c280 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <TIM_ITRx_SetConfig+0x38>)
 800c294:	4013      	ands	r3, r2
 800c296:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	f043 0307 	orr.w	r3, r3, #7
 800c2a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	609a      	str	r2, [r3, #8]
}
 800c2aa:	bf00      	nop
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	ffcfff8f 	.word	0xffcfff8f

0800c2bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	021a      	lsls	r2, r3, #8
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	609a      	str	r2, [r3, #8]
}
 800c2f0:	bf00      	nop
 800c2f2:	371c      	adds	r7, #28
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b087      	sub	sp, #28
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f003 031f 	and.w	r3, r3, #31
 800c30e:	2201      	movs	r2, #1
 800c310:	fa02 f303 	lsl.w	r3, r2, r3
 800c314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6a1a      	ldr	r2, [r3, #32]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	43db      	mvns	r3, r3
 800c31e:	401a      	ands	r2, r3
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6a1a      	ldr	r2, [r3, #32]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f003 031f 	and.w	r3, r3, #31
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	fa01 f303 	lsl.w	r3, r1, r3
 800c334:	431a      	orrs	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	621a      	str	r2, [r3, #32]
}
 800c33a:	bf00      	nop
 800c33c:	371c      	adds	r7, #28
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
	...

0800c348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d101      	bne.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c35c:	2302      	movs	r3, #2
 800c35e:	e077      	b.n	800c450 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a35      	ldr	r2, [pc, #212]	; (800c45c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d004      	beq.n	800c394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a34      	ldr	r2, [pc, #208]	; (800c460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d108      	bne.n	800c3a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c39a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a25      	ldr	r2, [pc, #148]	; (800c45c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d02c      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d2:	d027      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a22      	ldr	r2, [pc, #136]	; (800c464 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d022      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a21      	ldr	r2, [pc, #132]	; (800c468 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d01d      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a1f      	ldr	r2, [pc, #124]	; (800c46c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d018      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a1a      	ldr	r2, [pc, #104]	; (800c460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d013      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a1b      	ldr	r2, [pc, #108]	; (800c470 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d00e      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a1a      	ldr	r2, [pc, #104]	; (800c474 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d009      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a18      	ldr	r2, [pc, #96]	; (800c478 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d004      	beq.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a17      	ldr	r2, [pc, #92]	; (800c47c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d10c      	bne.n	800c43e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c42a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	4313      	orrs	r3, r2
 800c434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	40010000 	.word	0x40010000
 800c460:	40010400 	.word	0x40010400
 800c464:	40000400 	.word	0x40000400
 800c468:	40000800 	.word	0x40000800
 800c46c:	40000c00 	.word	0x40000c00
 800c470:	40001800 	.word	0x40001800
 800c474:	40014000 	.word	0x40014000
 800c478:	4000e000 	.word	0x4000e000
 800c47c:	4000e400 	.word	0x4000e400

0800c480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c494:	2b01      	cmp	r3, #1
 800c496:	d101      	bne.n	800c49c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c498:	2302      	movs	r3, #2
 800c49a:	e087      	b.n	800c5ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	695b      	ldr	r3, [r3, #20]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c502:	4313      	orrs	r3, r2
 800c504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	041b      	lsls	r3, r3, #16
 800c512:	4313      	orrs	r3, r2
 800c514:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a27      	ldr	r2, [pc, #156]	; (800c5b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d004      	beq.n	800c52a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a25      	ldr	r2, [pc, #148]	; (800c5bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d106      	bne.n	800c538 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	4313      	orrs	r3, r2
 800c536:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a1e      	ldr	r2, [pc, #120]	; (800c5b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d004      	beq.n	800c54c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a1d      	ldr	r2, [pc, #116]	; (800c5bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d126      	bne.n	800c59a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c556:	051b      	lsls	r3, r3, #20
 800c558:	4313      	orrs	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	4313      	orrs	r3, r2
 800c568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c574:	4313      	orrs	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a0e      	ldr	r2, [pc, #56]	; (800c5b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d004      	beq.n	800c58c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a0d      	ldr	r2, [pc, #52]	; (800c5bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d106      	bne.n	800c59a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c596:	4313      	orrs	r3, r2
 800c598:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	40010000 	.word	0x40010000
 800c5bc:	40010400 	.word	0x40010400

0800c5c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e042      	b.n	800c694 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c614:	2b00      	cmp	r3, #0
 800c616:	d106      	bne.n	800c626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7f8 f9c1 	bl	80049a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2224      	movs	r2, #36	; 0x24
 800c62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f022 0201 	bic.w	r2, r2, #1
 800c63c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fd18 	bl	800d074 <UART_SetConfig>
 800c644:	4603      	mov	r3, r0
 800c646:	2b01      	cmp	r3, #1
 800c648:	d101      	bne.n	800c64e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e022      	b.n	800c694 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f001 fb78 	bl	800dd4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c66a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	689a      	ldr	r2, [r3, #8]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c67a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f042 0201 	orr.w	r2, r2, #1
 800c68a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f001 fbff 	bl	800de90 <UART_CheckIdleState>
 800c692:	4603      	mov	r3, r0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e02e      	b.n	800c70c <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2224      	movs	r2, #36	; 0x24
 800c6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f022 0201 	bic.w	r2, r2, #1
 800c6c4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7f8 fa4a 	bl	8004b78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b08a      	sub	sp, #40	; 0x28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	4613      	mov	r3, r2
 800c720:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c728:	2b20      	cmp	r3, #32
 800c72a:	d17a      	bne.n	800c822 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <HAL_UART_Transmit_DMA+0x24>
 800c732:	88fb      	ldrh	r3, [r7, #6]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e073      	b.n	800c824 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c742:	2b01      	cmp	r3, #1
 800c744:	d101      	bne.n	800c74a <HAL_UART_Transmit_DMA+0x36>
 800c746:	2302      	movs	r3, #2
 800c748:	e06c      	b.n	800c824 <HAL_UART_Transmit_DMA+0x110>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	88fa      	ldrh	r2, [r7, #6]
 800c75c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	88fa      	ldrh	r2, [r7, #6]
 800c764:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2221      	movs	r2, #33	; 0x21
 800c774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d02c      	beq.n	800c7da <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c784:	4a29      	ldr	r2, [pc, #164]	; (800c82c <HAL_UART_Transmit_DMA+0x118>)
 800c786:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c78c:	4a28      	ldr	r2, [pc, #160]	; (800c830 <HAL_UART_Transmit_DMA+0x11c>)
 800c78e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c794:	4a27      	ldr	r2, [pc, #156]	; (800c834 <HAL_UART_Transmit_DMA+0x120>)
 800c796:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c79c:	2200      	movs	r2, #0
 800c79e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3328      	adds	r3, #40	; 0x28
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	88fb      	ldrh	r3, [r7, #6]
 800c7b4:	f7f9 fa56 	bl	8005c64 <HAL_DMA_Start_IT>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00d      	beq.n	800c7da <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2210      	movs	r2, #16
 800c7c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e024      	b.n	800c824 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2240      	movs	r2, #64	; 0x40
 800c7e0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	e853 3f00 	ldrex	r3, [r3]
 800c7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c800:	627b      	str	r3, [r7, #36]	; 0x24
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3308      	adds	r3, #8
 800c808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c80a:	623a      	str	r2, [r7, #32]
 800c80c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80e:	69f9      	ldr	r1, [r7, #28]
 800c810:	6a3a      	ldr	r2, [r7, #32]
 800c812:	e841 2300 	strex	r3, r2, [r1]
 800c816:	61bb      	str	r3, [r7, #24]
   return(result);
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1e5      	bne.n	800c7ea <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	e000      	b.n	800c824 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c822:	2302      	movs	r3, #2
  }
}
 800c824:	4618      	mov	r0, r3
 800c826:	3728      	adds	r7, #40	; 0x28
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	0800e359 	.word	0x0800e359
 800c830:	0800e3ef 	.word	0x0800e3ef
 800c834:	0800e565 	.word	0x0800e565

0800c838 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	; 0x28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	4613      	mov	r3, r2
 800c844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c84c:	2b20      	cmp	r3, #32
 800c84e:	d142      	bne.n	800c8d6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d002      	beq.n	800c85c <HAL_UART_Receive_DMA+0x24>
 800c856:	88fb      	ldrh	r3, [r7, #6]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	e03b      	b.n	800c8d8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c866:	2b01      	cmp	r3, #1
 800c868:	d101      	bne.n	800c86e <HAL_UART_Receive_DMA+0x36>
 800c86a:	2302      	movs	r3, #2
 800c86c:	e034      	b.n	800c8d8 <HAL_UART_Receive_DMA+0xa0>
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a17      	ldr	r2, [pc, #92]	; (800c8e0 <HAL_UART_Receive_DMA+0xa8>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d01f      	beq.n	800c8c6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c890:	2b00      	cmp	r3, #0
 800c892:	d018      	beq.n	800c8c6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	e853 3f00 	ldrex	r3, [r3]
 800c8a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b2:	623b      	str	r3, [r7, #32]
 800c8b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b6:	69f9      	ldr	r1, [r7, #28]
 800c8b8:	6a3a      	ldr	r2, [r7, #32]
 800c8ba:	e841 2300 	strex	r3, r2, [r1]
 800c8be:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1e6      	bne.n	800c894 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	68b9      	ldr	r1, [r7, #8]
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f001 fbf3 	bl	800e0b8 <UART_Start_Receive_DMA>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	e000      	b.n	800c8d8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c8d6:	2302      	movs	r3, #2
  }
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3728      	adds	r7, #40	; 0x28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	58000c00 	.word	0x58000c00

0800c8e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b0ba      	sub	sp, #232	; 0xe8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c90a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c90e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c912:	4013      	ands	r3, r2
 800c914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d11b      	bne.n	800c958 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c924:	f003 0320 	and.w	r3, r3, #32
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d015      	beq.n	800c958 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c930:	f003 0320 	and.w	r3, r3, #32
 800c934:	2b00      	cmp	r3, #0
 800c936:	d105      	bne.n	800c944 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c93c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d009      	beq.n	800c958 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 835a 	beq.w	800d002 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	4798      	blx	r3
      }
      return;
 800c956:	e354      	b.n	800d002 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 811f 	beq.w	800cba0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c962:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c966:	4b8b      	ldr	r3, [pc, #556]	; (800cb94 <HAL_UART_IRQHandler+0x2b0>)
 800c968:	4013      	ands	r3, r2
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c96e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c972:	4b89      	ldr	r3, [pc, #548]	; (800cb98 <HAL_UART_IRQHandler+0x2b4>)
 800c974:	4013      	ands	r3, r2
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 8112 	beq.w	800cba0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	2b00      	cmp	r3, #0
 800c986:	d011      	beq.n	800c9ac <HAL_UART_IRQHandler+0xc8>
 800c988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00b      	beq.n	800c9ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2201      	movs	r2, #1
 800c99a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9a2:	f043 0201 	orr.w	r2, r3, #1
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9b0:	f003 0302 	and.w	r3, r3, #2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d011      	beq.n	800c9dc <HAL_UART_IRQHandler+0xf8>
 800c9b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d2:	f043 0204 	orr.w	r2, r3, #4
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9e0:	f003 0304 	and.w	r3, r3, #4
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d011      	beq.n	800ca0c <HAL_UART_IRQHandler+0x128>
 800c9e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00b      	beq.n	800ca0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca02:	f043 0202 	orr.w	r2, r3, #2
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ca0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca10:	f003 0308 	and.w	r3, r3, #8
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d017      	beq.n	800ca48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d105      	bne.n	800ca30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ca24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ca28:	4b5a      	ldr	r3, [pc, #360]	; (800cb94 <HAL_UART_IRQHandler+0x2b0>)
 800ca2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00b      	beq.n	800ca48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2208      	movs	r2, #8
 800ca36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca3e:	f043 0208 	orr.w	r2, r3, #8
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d012      	beq.n	800ca7a <HAL_UART_IRQHandler+0x196>
 800ca54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00c      	beq.n	800ca7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca70:	f043 0220 	orr.w	r2, r3, #32
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 82c0 	beq.w	800d006 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca8a:	f003 0320 	and.w	r3, r3, #32
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d013      	beq.n	800caba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca96:	f003 0320 	and.w	r3, r3, #32
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d105      	bne.n	800caaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d007      	beq.n	800caba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cace:	2b40      	cmp	r3, #64	; 0x40
 800cad0:	d005      	beq.n	800cade <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d04f      	beq.n	800cb7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 fbd4 	bl	800e28c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caee:	2b40      	cmp	r3, #64	; 0x40
 800caf0:	d141      	bne.n	800cb76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3308      	adds	r3, #8
 800caf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb00:	e853 3f00 	ldrex	r3, [r3]
 800cb04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cb08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cb0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	3308      	adds	r3, #8
 800cb1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cb1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cb22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cb2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb2e:	e841 2300 	strex	r3, r2, [r1]
 800cb32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cb36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1d9      	bne.n	800caf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d013      	beq.n	800cb6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb4a:	4a14      	ldr	r2, [pc, #80]	; (800cb9c <HAL_UART_IRQHandler+0x2b8>)
 800cb4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7f9 fe0e 	bl	8006774 <HAL_DMA_Abort_IT>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d017      	beq.n	800cb8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb6c:	e00f      	b.n	800cb8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7f6 fe68 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb74:	e00b      	b.n	800cb8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7f6 fe64 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb7c:	e007      	b.n	800cb8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7f6 fe60 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cb8c:	e23b      	b.n	800d006 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb8e:	bf00      	nop
    return;
 800cb90:	e239      	b.n	800d006 <HAL_UART_IRQHandler+0x722>
 800cb92:	bf00      	nop
 800cb94:	10000001 	.word	0x10000001
 800cb98:	04000120 	.word	0x04000120
 800cb9c:	0800e5e5 	.word	0x0800e5e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	f040 81ce 	bne.w	800cf46 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbae:	f003 0310 	and.w	r3, r3, #16
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f000 81c7 	beq.w	800cf46 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cbb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbbc:	f003 0310 	and.w	r3, r3, #16
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 81c0 	beq.w	800cf46 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2210      	movs	r2, #16
 800cbcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd8:	2b40      	cmp	r3, #64	; 0x40
 800cbda:	f040 813b 	bne.w	800ce54 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a8b      	ldr	r2, [pc, #556]	; (800ce14 <HAL_UART_IRQHandler+0x530>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d059      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a89      	ldr	r2, [pc, #548]	; (800ce18 <HAL_UART_IRQHandler+0x534>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d053      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a87      	ldr	r2, [pc, #540]	; (800ce1c <HAL_UART_IRQHandler+0x538>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d04d      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a85      	ldr	r2, [pc, #532]	; (800ce20 <HAL_UART_IRQHandler+0x53c>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d047      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a83      	ldr	r2, [pc, #524]	; (800ce24 <HAL_UART_IRQHandler+0x540>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d041      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a81      	ldr	r2, [pc, #516]	; (800ce28 <HAL_UART_IRQHandler+0x544>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d03b      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a7f      	ldr	r2, [pc, #508]	; (800ce2c <HAL_UART_IRQHandler+0x548>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d035      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a7d      	ldr	r2, [pc, #500]	; (800ce30 <HAL_UART_IRQHandler+0x54c>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d02f      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a7b      	ldr	r2, [pc, #492]	; (800ce34 <HAL_UART_IRQHandler+0x550>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d029      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a79      	ldr	r2, [pc, #484]	; (800ce38 <HAL_UART_IRQHandler+0x554>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d023      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a77      	ldr	r2, [pc, #476]	; (800ce3c <HAL_UART_IRQHandler+0x558>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d01d      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a75      	ldr	r2, [pc, #468]	; (800ce40 <HAL_UART_IRQHandler+0x55c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d017      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a73      	ldr	r2, [pc, #460]	; (800ce44 <HAL_UART_IRQHandler+0x560>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d011      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a71      	ldr	r2, [pc, #452]	; (800ce48 <HAL_UART_IRQHandler+0x564>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d00b      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a6f      	ldr	r2, [pc, #444]	; (800ce4c <HAL_UART_IRQHandler+0x568>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d005      	beq.n	800cc9e <HAL_UART_IRQHandler+0x3ba>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a6d      	ldr	r2, [pc, #436]	; (800ce50 <HAL_UART_IRQHandler+0x56c>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d105      	bne.n	800ccaa <HAL_UART_IRQHandler+0x3c6>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	e004      	b.n	800ccb4 <HAL_UART_IRQHandler+0x3d0>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ccb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 81a4 	beq.w	800d00a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ccc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cccc:	429a      	cmp	r2, r3
 800ccce:	f080 819c 	bcs.w	800d00a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ccd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce0:	69db      	ldr	r3, [r3, #28]
 800cce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cce6:	f000 8086 	beq.w	800cdf6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ccf6:	e853 3f00 	ldrex	r3, [r3]
 800ccfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ccfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cd14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cd18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cd20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd24:	e841 2300 	strex	r3, r2, [r1]
 800cd28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cd2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d1da      	bne.n	800ccea <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3308      	adds	r3, #8
 800cd3a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd3e:	e853 3f00 	ldrex	r3, [r3]
 800cd42:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd46:	f023 0301 	bic.w	r3, r3, #1
 800cd4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3308      	adds	r3, #8
 800cd54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cd58:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cd5c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd64:	e841 2300 	strex	r3, r2, [r1]
 800cd68:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e1      	bne.n	800cd34 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3308      	adds	r3, #8
 800cd76:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd7a:	e853 3f00 	ldrex	r3, [r3]
 800cd7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3308      	adds	r3, #8
 800cd90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd94:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cd96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd9c:	e841 2300 	strex	r3, r2, [r1]
 800cda0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cda2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1e3      	bne.n	800cd70 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2220      	movs	r2, #32
 800cdac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdbe:	e853 3f00 	ldrex	r3, [r3]
 800cdc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cdc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdc6:	f023 0310 	bic.w	r3, r3, #16
 800cdca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cdd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cde0:	e841 2300 	strex	r3, r2, [r1]
 800cde4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1e4      	bne.n	800cdb6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7f9 f9a1 	bl	8006138 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f926 	bl	800d05c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce10:	e0fb      	b.n	800d00a <HAL_UART_IRQHandler+0x726>
 800ce12:	bf00      	nop
 800ce14:	40020010 	.word	0x40020010
 800ce18:	40020028 	.word	0x40020028
 800ce1c:	40020040 	.word	0x40020040
 800ce20:	40020058 	.word	0x40020058
 800ce24:	40020070 	.word	0x40020070
 800ce28:	40020088 	.word	0x40020088
 800ce2c:	400200a0 	.word	0x400200a0
 800ce30:	400200b8 	.word	0x400200b8
 800ce34:	40020410 	.word	0x40020410
 800ce38:	40020428 	.word	0x40020428
 800ce3c:	40020440 	.word	0x40020440
 800ce40:	40020458 	.word	0x40020458
 800ce44:	40020470 	.word	0x40020470
 800ce48:	40020488 	.word	0x40020488
 800ce4c:	400204a0 	.word	0x400204a0
 800ce50:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 80cc 	beq.w	800d00e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ce76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f000 80c7 	beq.w	800d00e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	e853 3f00 	ldrex	r3, [r3]
 800ce8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cea2:	647b      	str	r3, [r7, #68]	; 0x44
 800cea4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ceaa:	e841 2300 	strex	r3, r2, [r1]
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ceb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e4      	bne.n	800ce80 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3308      	adds	r3, #8
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	623b      	str	r3, [r7, #32]
   return(result);
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	4b54      	ldr	r3, [pc, #336]	; (800d01c <HAL_UART_IRQHandler+0x738>)
 800ceca:	4013      	ands	r3, r2
 800cecc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	3308      	adds	r3, #8
 800ced6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ceda:	633a      	str	r2, [r7, #48]	; 0x30
 800cedc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e3      	bne.n	800ceb6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2220      	movs	r2, #32
 800cef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	e853 3f00 	ldrex	r3, [r3]
 800cf0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f023 0310 	bic.w	r3, r3, #16
 800cf16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cf24:	61fb      	str	r3, [r7, #28]
 800cf26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf28:	69b9      	ldr	r1, [r7, #24]
 800cf2a:	69fa      	ldr	r2, [r7, #28]
 800cf2c:	e841 2300 	strex	r3, r2, [r1]
 800cf30:	617b      	str	r3, [r7, #20]
   return(result);
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1e4      	bne.n	800cf02 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f88c 	bl	800d05c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf44:	e063      	b.n	800d00e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00e      	beq.n	800cf70 <HAL_UART_IRQHandler+0x68c>
 800cf52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d008      	beq.n	800cf70 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cf66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f001 fb7c 	bl	800e666 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf6e:	e051      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cf70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d014      	beq.n	800cfa6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cf7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d105      	bne.n	800cf94 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cf88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d008      	beq.n	800cfa6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d03a      	beq.n	800d012 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	4798      	blx	r3
    }
    return;
 800cfa4:	e035      	b.n	800d012 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cfa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d009      	beq.n	800cfc6 <HAL_UART_IRQHandler+0x6e2>
 800cfb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d003      	beq.n	800cfc6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f001 fb26 	bl	800e610 <UART_EndTransmit_IT>
    return;
 800cfc4:	e026      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cfc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d009      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x702>
 800cfd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d003      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f001 fb55 	bl	800e68e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfe4:	e016      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cfe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d010      	beq.n	800d014 <HAL_UART_IRQHandler+0x730>
 800cff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	da0c      	bge.n	800d014 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f001 fb3d 	bl	800e67a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d000:	e008      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
      return;
 800d002:	bf00      	nop
 800d004:	e006      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
    return;
 800d006:	bf00      	nop
 800d008:	e004      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
      return;
 800d00a:	bf00      	nop
 800d00c:	e002      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
      return;
 800d00e:	bf00      	nop
 800d010:	e000      	b.n	800d014 <HAL_UART_IRQHandler+0x730>
    return;
 800d012:	bf00      	nop
  }
}
 800d014:	37e8      	adds	r7, #232	; 0xe8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	effffffe 	.word	0xeffffffe

0800d020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	460b      	mov	r3, r1
 800d066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d068:	bf00      	nop
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d078:	b092      	sub	sp, #72	; 0x48
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	689a      	ldr	r2, [r3, #8]
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	431a      	orrs	r2, r3
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	431a      	orrs	r2, r3
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	69db      	ldr	r3, [r3, #28]
 800d098:	4313      	orrs	r3, r2
 800d09a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	4bbe      	ldr	r3, [pc, #760]	; (800d39c <UART_SetConfig+0x328>)
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	6812      	ldr	r2, [r2, #0]
 800d0aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0ac:	430b      	orrs	r3, r1
 800d0ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	68da      	ldr	r2, [r3, #12]
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	430a      	orrs	r2, r1
 800d0c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	699b      	ldr	r3, [r3, #24]
 800d0ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4ab3      	ldr	r2, [pc, #716]	; (800d3a0 <UART_SetConfig+0x32c>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d004      	beq.n	800d0e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	6a1b      	ldr	r3, [r3, #32]
 800d0da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	689a      	ldr	r2, [r3, #8]
 800d0e6:	4baf      	ldr	r3, [pc, #700]	; (800d3a4 <UART_SetConfig+0x330>)
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	6812      	ldr	r2, [r2, #0]
 800d0ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0f0:	430b      	orrs	r3, r1
 800d0f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fa:	f023 010f 	bic.w	r1, r3, #15
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	430a      	orrs	r2, r1
 800d108:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4aa6      	ldr	r2, [pc, #664]	; (800d3a8 <UART_SetConfig+0x334>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d177      	bne.n	800d204 <UART_SetConfig+0x190>
 800d114:	4ba5      	ldr	r3, [pc, #660]	; (800d3ac <UART_SetConfig+0x338>)
 800d116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d11c:	2b28      	cmp	r3, #40	; 0x28
 800d11e:	d86d      	bhi.n	800d1fc <UART_SetConfig+0x188>
 800d120:	a201      	add	r2, pc, #4	; (adr r2, 800d128 <UART_SetConfig+0xb4>)
 800d122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d126:	bf00      	nop
 800d128:	0800d1cd 	.word	0x0800d1cd
 800d12c:	0800d1fd 	.word	0x0800d1fd
 800d130:	0800d1fd 	.word	0x0800d1fd
 800d134:	0800d1fd 	.word	0x0800d1fd
 800d138:	0800d1fd 	.word	0x0800d1fd
 800d13c:	0800d1fd 	.word	0x0800d1fd
 800d140:	0800d1fd 	.word	0x0800d1fd
 800d144:	0800d1fd 	.word	0x0800d1fd
 800d148:	0800d1d5 	.word	0x0800d1d5
 800d14c:	0800d1fd 	.word	0x0800d1fd
 800d150:	0800d1fd 	.word	0x0800d1fd
 800d154:	0800d1fd 	.word	0x0800d1fd
 800d158:	0800d1fd 	.word	0x0800d1fd
 800d15c:	0800d1fd 	.word	0x0800d1fd
 800d160:	0800d1fd 	.word	0x0800d1fd
 800d164:	0800d1fd 	.word	0x0800d1fd
 800d168:	0800d1dd 	.word	0x0800d1dd
 800d16c:	0800d1fd 	.word	0x0800d1fd
 800d170:	0800d1fd 	.word	0x0800d1fd
 800d174:	0800d1fd 	.word	0x0800d1fd
 800d178:	0800d1fd 	.word	0x0800d1fd
 800d17c:	0800d1fd 	.word	0x0800d1fd
 800d180:	0800d1fd 	.word	0x0800d1fd
 800d184:	0800d1fd 	.word	0x0800d1fd
 800d188:	0800d1e5 	.word	0x0800d1e5
 800d18c:	0800d1fd 	.word	0x0800d1fd
 800d190:	0800d1fd 	.word	0x0800d1fd
 800d194:	0800d1fd 	.word	0x0800d1fd
 800d198:	0800d1fd 	.word	0x0800d1fd
 800d19c:	0800d1fd 	.word	0x0800d1fd
 800d1a0:	0800d1fd 	.word	0x0800d1fd
 800d1a4:	0800d1fd 	.word	0x0800d1fd
 800d1a8:	0800d1ed 	.word	0x0800d1ed
 800d1ac:	0800d1fd 	.word	0x0800d1fd
 800d1b0:	0800d1fd 	.word	0x0800d1fd
 800d1b4:	0800d1fd 	.word	0x0800d1fd
 800d1b8:	0800d1fd 	.word	0x0800d1fd
 800d1bc:	0800d1fd 	.word	0x0800d1fd
 800d1c0:	0800d1fd 	.word	0x0800d1fd
 800d1c4:	0800d1fd 	.word	0x0800d1fd
 800d1c8:	0800d1f5 	.word	0x0800d1f5
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d2:	e326      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1da:	e322      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d1dc:	2308      	movs	r3, #8
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e2:	e31e      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d1e4:	2310      	movs	r3, #16
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e31a      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e316      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d1f4:	2340      	movs	r3, #64	; 0x40
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e312      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d1fc:	2380      	movs	r3, #128	; 0x80
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e30e      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a69      	ldr	r2, [pc, #420]	; (800d3b0 <UART_SetConfig+0x33c>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d130      	bne.n	800d270 <UART_SetConfig+0x1fc>
 800d20e:	4b67      	ldr	r3, [pc, #412]	; (800d3ac <UART_SetConfig+0x338>)
 800d210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b05      	cmp	r3, #5
 800d218:	d826      	bhi.n	800d268 <UART_SetConfig+0x1f4>
 800d21a:	a201      	add	r2, pc, #4	; (adr r2, 800d220 <UART_SetConfig+0x1ac>)
 800d21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d220:	0800d239 	.word	0x0800d239
 800d224:	0800d241 	.word	0x0800d241
 800d228:	0800d249 	.word	0x0800d249
 800d22c:	0800d251 	.word	0x0800d251
 800d230:	0800d259 	.word	0x0800d259
 800d234:	0800d261 	.word	0x0800d261
 800d238:	2300      	movs	r3, #0
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23e:	e2f0      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d240:	2304      	movs	r3, #4
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d246:	e2ec      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d248:	2308      	movs	r3, #8
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24e:	e2e8      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d250:	2310      	movs	r3, #16
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e2e4      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d258:	2320      	movs	r3, #32
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e2e0      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d260:	2340      	movs	r3, #64	; 0x40
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e2dc      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d268:	2380      	movs	r3, #128	; 0x80
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26e:	e2d8      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a4f      	ldr	r2, [pc, #316]	; (800d3b4 <UART_SetConfig+0x340>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d130      	bne.n	800d2dc <UART_SetConfig+0x268>
 800d27a:	4b4c      	ldr	r3, [pc, #304]	; (800d3ac <UART_SetConfig+0x338>)
 800d27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27e:	f003 0307 	and.w	r3, r3, #7
 800d282:	2b05      	cmp	r3, #5
 800d284:	d826      	bhi.n	800d2d4 <UART_SetConfig+0x260>
 800d286:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <UART_SetConfig+0x218>)
 800d288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28c:	0800d2a5 	.word	0x0800d2a5
 800d290:	0800d2ad 	.word	0x0800d2ad
 800d294:	0800d2b5 	.word	0x0800d2b5
 800d298:	0800d2bd 	.word	0x0800d2bd
 800d29c:	0800d2c5 	.word	0x0800d2c5
 800d2a0:	0800d2cd 	.word	0x0800d2cd
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2aa:	e2ba      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d2ac:	2304      	movs	r3, #4
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b2:	e2b6      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d2b4:	2308      	movs	r3, #8
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ba:	e2b2      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d2bc:	2310      	movs	r3, #16
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c2:	e2ae      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d2c4:	2320      	movs	r3, #32
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ca:	e2aa      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d2cc:	2340      	movs	r3, #64	; 0x40
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d2:	e2a6      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d2d4:	2380      	movs	r3, #128	; 0x80
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2da:	e2a2      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a35      	ldr	r2, [pc, #212]	; (800d3b8 <UART_SetConfig+0x344>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d130      	bne.n	800d348 <UART_SetConfig+0x2d4>
 800d2e6:	4b31      	ldr	r3, [pc, #196]	; (800d3ac <UART_SetConfig+0x338>)
 800d2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ea:	f003 0307 	and.w	r3, r3, #7
 800d2ee:	2b05      	cmp	r3, #5
 800d2f0:	d826      	bhi.n	800d340 <UART_SetConfig+0x2cc>
 800d2f2:	a201      	add	r2, pc, #4	; (adr r2, 800d2f8 <UART_SetConfig+0x284>)
 800d2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f8:	0800d311 	.word	0x0800d311
 800d2fc:	0800d319 	.word	0x0800d319
 800d300:	0800d321 	.word	0x0800d321
 800d304:	0800d329 	.word	0x0800d329
 800d308:	0800d331 	.word	0x0800d331
 800d30c:	0800d339 	.word	0x0800d339
 800d310:	2300      	movs	r3, #0
 800d312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d316:	e284      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d318:	2304      	movs	r3, #4
 800d31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31e:	e280      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d320:	2308      	movs	r3, #8
 800d322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d326:	e27c      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d328:	2310      	movs	r3, #16
 800d32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32e:	e278      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d330:	2320      	movs	r3, #32
 800d332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d336:	e274      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d338:	2340      	movs	r3, #64	; 0x40
 800d33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33e:	e270      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d340:	2380      	movs	r3, #128	; 0x80
 800d342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d346:	e26c      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a1b      	ldr	r2, [pc, #108]	; (800d3bc <UART_SetConfig+0x348>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d142      	bne.n	800d3d8 <UART_SetConfig+0x364>
 800d352:	4b16      	ldr	r3, [pc, #88]	; (800d3ac <UART_SetConfig+0x338>)
 800d354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d356:	f003 0307 	and.w	r3, r3, #7
 800d35a:	2b05      	cmp	r3, #5
 800d35c:	d838      	bhi.n	800d3d0 <UART_SetConfig+0x35c>
 800d35e:	a201      	add	r2, pc, #4	; (adr r2, 800d364 <UART_SetConfig+0x2f0>)
 800d360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d364:	0800d37d 	.word	0x0800d37d
 800d368:	0800d385 	.word	0x0800d385
 800d36c:	0800d38d 	.word	0x0800d38d
 800d370:	0800d395 	.word	0x0800d395
 800d374:	0800d3c1 	.word	0x0800d3c1
 800d378:	0800d3c9 	.word	0x0800d3c9
 800d37c:	2300      	movs	r3, #0
 800d37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d382:	e24e      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d384:	2304      	movs	r3, #4
 800d386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38a:	e24a      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d38c:	2308      	movs	r3, #8
 800d38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d392:	e246      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d394:	2310      	movs	r3, #16
 800d396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39a:	e242      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d39c:	cfff69f3 	.word	0xcfff69f3
 800d3a0:	58000c00 	.word	0x58000c00
 800d3a4:	11fff4ff 	.word	0x11fff4ff
 800d3a8:	40011000 	.word	0x40011000
 800d3ac:	58024400 	.word	0x58024400
 800d3b0:	40004400 	.word	0x40004400
 800d3b4:	40004800 	.word	0x40004800
 800d3b8:	40004c00 	.word	0x40004c00
 800d3bc:	40005000 	.word	0x40005000
 800d3c0:	2320      	movs	r3, #32
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c6:	e22c      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d3c8:	2340      	movs	r3, #64	; 0x40
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e228      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d3d0:	2380      	movs	r3, #128	; 0x80
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e224      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4ab1      	ldr	r2, [pc, #708]	; (800d6a4 <UART_SetConfig+0x630>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d176      	bne.n	800d4d0 <UART_SetConfig+0x45c>
 800d3e2:	4bb1      	ldr	r3, [pc, #708]	; (800d6a8 <UART_SetConfig+0x634>)
 800d3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d3ea:	2b28      	cmp	r3, #40	; 0x28
 800d3ec:	d86c      	bhi.n	800d4c8 <UART_SetConfig+0x454>
 800d3ee:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <UART_SetConfig+0x380>)
 800d3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f4:	0800d499 	.word	0x0800d499
 800d3f8:	0800d4c9 	.word	0x0800d4c9
 800d3fc:	0800d4c9 	.word	0x0800d4c9
 800d400:	0800d4c9 	.word	0x0800d4c9
 800d404:	0800d4c9 	.word	0x0800d4c9
 800d408:	0800d4c9 	.word	0x0800d4c9
 800d40c:	0800d4c9 	.word	0x0800d4c9
 800d410:	0800d4c9 	.word	0x0800d4c9
 800d414:	0800d4a1 	.word	0x0800d4a1
 800d418:	0800d4c9 	.word	0x0800d4c9
 800d41c:	0800d4c9 	.word	0x0800d4c9
 800d420:	0800d4c9 	.word	0x0800d4c9
 800d424:	0800d4c9 	.word	0x0800d4c9
 800d428:	0800d4c9 	.word	0x0800d4c9
 800d42c:	0800d4c9 	.word	0x0800d4c9
 800d430:	0800d4c9 	.word	0x0800d4c9
 800d434:	0800d4a9 	.word	0x0800d4a9
 800d438:	0800d4c9 	.word	0x0800d4c9
 800d43c:	0800d4c9 	.word	0x0800d4c9
 800d440:	0800d4c9 	.word	0x0800d4c9
 800d444:	0800d4c9 	.word	0x0800d4c9
 800d448:	0800d4c9 	.word	0x0800d4c9
 800d44c:	0800d4c9 	.word	0x0800d4c9
 800d450:	0800d4c9 	.word	0x0800d4c9
 800d454:	0800d4b1 	.word	0x0800d4b1
 800d458:	0800d4c9 	.word	0x0800d4c9
 800d45c:	0800d4c9 	.word	0x0800d4c9
 800d460:	0800d4c9 	.word	0x0800d4c9
 800d464:	0800d4c9 	.word	0x0800d4c9
 800d468:	0800d4c9 	.word	0x0800d4c9
 800d46c:	0800d4c9 	.word	0x0800d4c9
 800d470:	0800d4c9 	.word	0x0800d4c9
 800d474:	0800d4b9 	.word	0x0800d4b9
 800d478:	0800d4c9 	.word	0x0800d4c9
 800d47c:	0800d4c9 	.word	0x0800d4c9
 800d480:	0800d4c9 	.word	0x0800d4c9
 800d484:	0800d4c9 	.word	0x0800d4c9
 800d488:	0800d4c9 	.word	0x0800d4c9
 800d48c:	0800d4c9 	.word	0x0800d4c9
 800d490:	0800d4c9 	.word	0x0800d4c9
 800d494:	0800d4c1 	.word	0x0800d4c1
 800d498:	2301      	movs	r3, #1
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49e:	e1c0      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d4a0:	2304      	movs	r3, #4
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a6:	e1bc      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d4a8:	2308      	movs	r3, #8
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ae:	e1b8      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d4b0:	2310      	movs	r3, #16
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b6:	e1b4      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d4b8:	2320      	movs	r3, #32
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4be:	e1b0      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d4c0:	2340      	movs	r3, #64	; 0x40
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c6:	e1ac      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d4c8:	2380      	movs	r3, #128	; 0x80
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ce:	e1a8      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a75      	ldr	r2, [pc, #468]	; (800d6ac <UART_SetConfig+0x638>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d130      	bne.n	800d53c <UART_SetConfig+0x4c8>
 800d4da:	4b73      	ldr	r3, [pc, #460]	; (800d6a8 <UART_SetConfig+0x634>)
 800d4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4de:	f003 0307 	and.w	r3, r3, #7
 800d4e2:	2b05      	cmp	r3, #5
 800d4e4:	d826      	bhi.n	800d534 <UART_SetConfig+0x4c0>
 800d4e6:	a201      	add	r2, pc, #4	; (adr r2, 800d4ec <UART_SetConfig+0x478>)
 800d4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ec:	0800d505 	.word	0x0800d505
 800d4f0:	0800d50d 	.word	0x0800d50d
 800d4f4:	0800d515 	.word	0x0800d515
 800d4f8:	0800d51d 	.word	0x0800d51d
 800d4fc:	0800d525 	.word	0x0800d525
 800d500:	0800d52d 	.word	0x0800d52d
 800d504:	2300      	movs	r3, #0
 800d506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50a:	e18a      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d50c:	2304      	movs	r3, #4
 800d50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d512:	e186      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d514:	2308      	movs	r3, #8
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51a:	e182      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d51c:	2310      	movs	r3, #16
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d522:	e17e      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d524:	2320      	movs	r3, #32
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52a:	e17a      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d52c:	2340      	movs	r3, #64	; 0x40
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d532:	e176      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d534:	2380      	movs	r3, #128	; 0x80
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53a:	e172      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a5b      	ldr	r2, [pc, #364]	; (800d6b0 <UART_SetConfig+0x63c>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d130      	bne.n	800d5a8 <UART_SetConfig+0x534>
 800d546:	4b58      	ldr	r3, [pc, #352]	; (800d6a8 <UART_SetConfig+0x634>)
 800d548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54a:	f003 0307 	and.w	r3, r3, #7
 800d54e:	2b05      	cmp	r3, #5
 800d550:	d826      	bhi.n	800d5a0 <UART_SetConfig+0x52c>
 800d552:	a201      	add	r2, pc, #4	; (adr r2, 800d558 <UART_SetConfig+0x4e4>)
 800d554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d558:	0800d571 	.word	0x0800d571
 800d55c:	0800d579 	.word	0x0800d579
 800d560:	0800d581 	.word	0x0800d581
 800d564:	0800d589 	.word	0x0800d589
 800d568:	0800d591 	.word	0x0800d591
 800d56c:	0800d599 	.word	0x0800d599
 800d570:	2300      	movs	r3, #0
 800d572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d576:	e154      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d578:	2304      	movs	r3, #4
 800d57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57e:	e150      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d580:	2308      	movs	r3, #8
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d586:	e14c      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d588:	2310      	movs	r3, #16
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58e:	e148      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d590:	2320      	movs	r3, #32
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d596:	e144      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d598:	2340      	movs	r3, #64	; 0x40
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59e:	e140      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d5a0:	2380      	movs	r3, #128	; 0x80
 800d5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a6:	e13c      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a41      	ldr	r2, [pc, #260]	; (800d6b4 <UART_SetConfig+0x640>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	f040 8082 	bne.w	800d6b8 <UART_SetConfig+0x644>
 800d5b4:	4b3c      	ldr	r3, [pc, #240]	; (800d6a8 <UART_SetConfig+0x634>)
 800d5b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5bc:	2b28      	cmp	r3, #40	; 0x28
 800d5be:	d86d      	bhi.n	800d69c <UART_SetConfig+0x628>
 800d5c0:	a201      	add	r2, pc, #4	; (adr r2, 800d5c8 <UART_SetConfig+0x554>)
 800d5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c6:	bf00      	nop
 800d5c8:	0800d66d 	.word	0x0800d66d
 800d5cc:	0800d69d 	.word	0x0800d69d
 800d5d0:	0800d69d 	.word	0x0800d69d
 800d5d4:	0800d69d 	.word	0x0800d69d
 800d5d8:	0800d69d 	.word	0x0800d69d
 800d5dc:	0800d69d 	.word	0x0800d69d
 800d5e0:	0800d69d 	.word	0x0800d69d
 800d5e4:	0800d69d 	.word	0x0800d69d
 800d5e8:	0800d675 	.word	0x0800d675
 800d5ec:	0800d69d 	.word	0x0800d69d
 800d5f0:	0800d69d 	.word	0x0800d69d
 800d5f4:	0800d69d 	.word	0x0800d69d
 800d5f8:	0800d69d 	.word	0x0800d69d
 800d5fc:	0800d69d 	.word	0x0800d69d
 800d600:	0800d69d 	.word	0x0800d69d
 800d604:	0800d69d 	.word	0x0800d69d
 800d608:	0800d67d 	.word	0x0800d67d
 800d60c:	0800d69d 	.word	0x0800d69d
 800d610:	0800d69d 	.word	0x0800d69d
 800d614:	0800d69d 	.word	0x0800d69d
 800d618:	0800d69d 	.word	0x0800d69d
 800d61c:	0800d69d 	.word	0x0800d69d
 800d620:	0800d69d 	.word	0x0800d69d
 800d624:	0800d69d 	.word	0x0800d69d
 800d628:	0800d685 	.word	0x0800d685
 800d62c:	0800d69d 	.word	0x0800d69d
 800d630:	0800d69d 	.word	0x0800d69d
 800d634:	0800d69d 	.word	0x0800d69d
 800d638:	0800d69d 	.word	0x0800d69d
 800d63c:	0800d69d 	.word	0x0800d69d
 800d640:	0800d69d 	.word	0x0800d69d
 800d644:	0800d69d 	.word	0x0800d69d
 800d648:	0800d68d 	.word	0x0800d68d
 800d64c:	0800d69d 	.word	0x0800d69d
 800d650:	0800d69d 	.word	0x0800d69d
 800d654:	0800d69d 	.word	0x0800d69d
 800d658:	0800d69d 	.word	0x0800d69d
 800d65c:	0800d69d 	.word	0x0800d69d
 800d660:	0800d69d 	.word	0x0800d69d
 800d664:	0800d69d 	.word	0x0800d69d
 800d668:	0800d695 	.word	0x0800d695
 800d66c:	2301      	movs	r3, #1
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e0d6      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d674:	2304      	movs	r3, #4
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e0d2      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d67c:	2308      	movs	r3, #8
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e0ce      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d684:	2310      	movs	r3, #16
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e0ca      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d68c:	2320      	movs	r3, #32
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d692:	e0c6      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d694:	2340      	movs	r3, #64	; 0x40
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69a:	e0c2      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d69c:	2380      	movs	r3, #128	; 0x80
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a2:	e0be      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d6a4:	40011400 	.word	0x40011400
 800d6a8:	58024400 	.word	0x58024400
 800d6ac:	40007800 	.word	0x40007800
 800d6b0:	40007c00 	.word	0x40007c00
 800d6b4:	40011800 	.word	0x40011800
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4aad      	ldr	r2, [pc, #692]	; (800d974 <UART_SetConfig+0x900>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d176      	bne.n	800d7b0 <UART_SetConfig+0x73c>
 800d6c2:	4bad      	ldr	r3, [pc, #692]	; (800d978 <UART_SetConfig+0x904>)
 800d6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6ca:	2b28      	cmp	r3, #40	; 0x28
 800d6cc:	d86c      	bhi.n	800d7a8 <UART_SetConfig+0x734>
 800d6ce:	a201      	add	r2, pc, #4	; (adr r2, 800d6d4 <UART_SetConfig+0x660>)
 800d6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d4:	0800d779 	.word	0x0800d779
 800d6d8:	0800d7a9 	.word	0x0800d7a9
 800d6dc:	0800d7a9 	.word	0x0800d7a9
 800d6e0:	0800d7a9 	.word	0x0800d7a9
 800d6e4:	0800d7a9 	.word	0x0800d7a9
 800d6e8:	0800d7a9 	.word	0x0800d7a9
 800d6ec:	0800d7a9 	.word	0x0800d7a9
 800d6f0:	0800d7a9 	.word	0x0800d7a9
 800d6f4:	0800d781 	.word	0x0800d781
 800d6f8:	0800d7a9 	.word	0x0800d7a9
 800d6fc:	0800d7a9 	.word	0x0800d7a9
 800d700:	0800d7a9 	.word	0x0800d7a9
 800d704:	0800d7a9 	.word	0x0800d7a9
 800d708:	0800d7a9 	.word	0x0800d7a9
 800d70c:	0800d7a9 	.word	0x0800d7a9
 800d710:	0800d7a9 	.word	0x0800d7a9
 800d714:	0800d789 	.word	0x0800d789
 800d718:	0800d7a9 	.word	0x0800d7a9
 800d71c:	0800d7a9 	.word	0x0800d7a9
 800d720:	0800d7a9 	.word	0x0800d7a9
 800d724:	0800d7a9 	.word	0x0800d7a9
 800d728:	0800d7a9 	.word	0x0800d7a9
 800d72c:	0800d7a9 	.word	0x0800d7a9
 800d730:	0800d7a9 	.word	0x0800d7a9
 800d734:	0800d791 	.word	0x0800d791
 800d738:	0800d7a9 	.word	0x0800d7a9
 800d73c:	0800d7a9 	.word	0x0800d7a9
 800d740:	0800d7a9 	.word	0x0800d7a9
 800d744:	0800d7a9 	.word	0x0800d7a9
 800d748:	0800d7a9 	.word	0x0800d7a9
 800d74c:	0800d7a9 	.word	0x0800d7a9
 800d750:	0800d7a9 	.word	0x0800d7a9
 800d754:	0800d799 	.word	0x0800d799
 800d758:	0800d7a9 	.word	0x0800d7a9
 800d75c:	0800d7a9 	.word	0x0800d7a9
 800d760:	0800d7a9 	.word	0x0800d7a9
 800d764:	0800d7a9 	.word	0x0800d7a9
 800d768:	0800d7a9 	.word	0x0800d7a9
 800d76c:	0800d7a9 	.word	0x0800d7a9
 800d770:	0800d7a9 	.word	0x0800d7a9
 800d774:	0800d7a1 	.word	0x0800d7a1
 800d778:	2301      	movs	r3, #1
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e050      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d780:	2304      	movs	r3, #4
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e04c      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d788:	2308      	movs	r3, #8
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e048      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d790:	2310      	movs	r3, #16
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e044      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d798:	2320      	movs	r3, #32
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e040      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e03c      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d7a8:	2380      	movs	r3, #128	; 0x80
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e038      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a71      	ldr	r2, [pc, #452]	; (800d97c <UART_SetConfig+0x908>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d130      	bne.n	800d81c <UART_SetConfig+0x7a8>
 800d7ba:	4b6f      	ldr	r3, [pc, #444]	; (800d978 <UART_SetConfig+0x904>)
 800d7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	2b05      	cmp	r3, #5
 800d7c4:	d826      	bhi.n	800d814 <UART_SetConfig+0x7a0>
 800d7c6:	a201      	add	r2, pc, #4	; (adr r2, 800d7cc <UART_SetConfig+0x758>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d7e5 	.word	0x0800d7e5
 800d7d0:	0800d7ed 	.word	0x0800d7ed
 800d7d4:	0800d7f5 	.word	0x0800d7f5
 800d7d8:	0800d7fd 	.word	0x0800d7fd
 800d7dc:	0800d805 	.word	0x0800d805
 800d7e0:	0800d80d 	.word	0x0800d80d
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e01a      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d7ec:	2304      	movs	r3, #4
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e016      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d7f4:	2308      	movs	r3, #8
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e012      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d7fc:	2310      	movs	r3, #16
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e00e      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d804:	2320      	movs	r3, #32
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e00a      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d80c:	2340      	movs	r3, #64	; 0x40
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e006      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d814:	2380      	movs	r3, #128	; 0x80
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81a:	e002      	b.n	800d822 <UART_SetConfig+0x7ae>
 800d81c:	2380      	movs	r3, #128	; 0x80
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a55      	ldr	r2, [pc, #340]	; (800d97c <UART_SetConfig+0x908>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	f040 80f8 	bne.w	800da1e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d82e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d832:	2b20      	cmp	r3, #32
 800d834:	dc46      	bgt.n	800d8c4 <UART_SetConfig+0x850>
 800d836:	2b02      	cmp	r3, #2
 800d838:	db75      	blt.n	800d926 <UART_SetConfig+0x8b2>
 800d83a:	3b02      	subs	r3, #2
 800d83c:	2b1e      	cmp	r3, #30
 800d83e:	d872      	bhi.n	800d926 <UART_SetConfig+0x8b2>
 800d840:	a201      	add	r2, pc, #4	; (adr r2, 800d848 <UART_SetConfig+0x7d4>)
 800d842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d846:	bf00      	nop
 800d848:	0800d8cb 	.word	0x0800d8cb
 800d84c:	0800d927 	.word	0x0800d927
 800d850:	0800d8d3 	.word	0x0800d8d3
 800d854:	0800d927 	.word	0x0800d927
 800d858:	0800d927 	.word	0x0800d927
 800d85c:	0800d927 	.word	0x0800d927
 800d860:	0800d8e3 	.word	0x0800d8e3
 800d864:	0800d927 	.word	0x0800d927
 800d868:	0800d927 	.word	0x0800d927
 800d86c:	0800d927 	.word	0x0800d927
 800d870:	0800d927 	.word	0x0800d927
 800d874:	0800d927 	.word	0x0800d927
 800d878:	0800d927 	.word	0x0800d927
 800d87c:	0800d927 	.word	0x0800d927
 800d880:	0800d8f3 	.word	0x0800d8f3
 800d884:	0800d927 	.word	0x0800d927
 800d888:	0800d927 	.word	0x0800d927
 800d88c:	0800d927 	.word	0x0800d927
 800d890:	0800d927 	.word	0x0800d927
 800d894:	0800d927 	.word	0x0800d927
 800d898:	0800d927 	.word	0x0800d927
 800d89c:	0800d927 	.word	0x0800d927
 800d8a0:	0800d927 	.word	0x0800d927
 800d8a4:	0800d927 	.word	0x0800d927
 800d8a8:	0800d927 	.word	0x0800d927
 800d8ac:	0800d927 	.word	0x0800d927
 800d8b0:	0800d927 	.word	0x0800d927
 800d8b4:	0800d927 	.word	0x0800d927
 800d8b8:	0800d927 	.word	0x0800d927
 800d8bc:	0800d927 	.word	0x0800d927
 800d8c0:	0800d919 	.word	0x0800d919
 800d8c4:	2b40      	cmp	r3, #64	; 0x40
 800d8c6:	d02a      	beq.n	800d91e <UART_SetConfig+0x8aa>
 800d8c8:	e02d      	b.n	800d926 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d8ca:	f7fc fe01 	bl	800a4d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d8ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8d0:	e02f      	b.n	800d932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fc fe10 	bl	800a4fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8e0:	e027      	b.n	800d932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8e2:	f107 0318 	add.w	r3, r7, #24
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fc ff5c 	bl	800a7a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8f0:	e01f      	b.n	800d932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8f2:	4b21      	ldr	r3, [pc, #132]	; (800d978 <UART_SetConfig+0x904>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f003 0320 	and.w	r3, r3, #32
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d009      	beq.n	800d912 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8fe:	4b1e      	ldr	r3, [pc, #120]	; (800d978 <UART_SetConfig+0x904>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	08db      	lsrs	r3, r3, #3
 800d904:	f003 0303 	and.w	r3, r3, #3
 800d908:	4a1d      	ldr	r2, [pc, #116]	; (800d980 <UART_SetConfig+0x90c>)
 800d90a:	fa22 f303 	lsr.w	r3, r2, r3
 800d90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d910:	e00f      	b.n	800d932 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d912:	4b1b      	ldr	r3, [pc, #108]	; (800d980 <UART_SetConfig+0x90c>)
 800d914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d916:	e00c      	b.n	800d932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d918:	4b1a      	ldr	r3, [pc, #104]	; (800d984 <UART_SetConfig+0x910>)
 800d91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d91c:	e009      	b.n	800d932 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d924:	e005      	b.n	800d932 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d926:	2300      	movs	r3, #0
 800d928:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d92a:	2301      	movs	r3, #1
 800d92c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d934:	2b00      	cmp	r3, #0
 800d936:	f000 81ee 	beq.w	800dd16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93e:	4a12      	ldr	r2, [pc, #72]	; (800d988 <UART_SetConfig+0x914>)
 800d940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d944:	461a      	mov	r2, r3
 800d946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d948:	fbb3 f3f2 	udiv	r3, r3, r2
 800d94c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	685a      	ldr	r2, [r3, #4]
 800d952:	4613      	mov	r3, r2
 800d954:	005b      	lsls	r3, r3, #1
 800d956:	4413      	add	r3, r2
 800d958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d305      	bcc.n	800d96a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d966:	429a      	cmp	r2, r3
 800d968:	d910      	bls.n	800d98c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d970:	e1d1      	b.n	800dd16 <UART_SetConfig+0xca2>
 800d972:	bf00      	nop
 800d974:	40011c00 	.word	0x40011c00
 800d978:	58024400 	.word	0x58024400
 800d97c:	58000c00 	.word	0x58000c00
 800d980:	03d09000 	.word	0x03d09000
 800d984:	003d0900 	.word	0x003d0900
 800d988:	0800ef4c 	.word	0x0800ef4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98e:	2200      	movs	r2, #0
 800d990:	60bb      	str	r3, [r7, #8]
 800d992:	60fa      	str	r2, [r7, #12]
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d998:	4ac0      	ldr	r2, [pc, #768]	; (800dc9c <UART_SetConfig+0xc28>)
 800d99a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	603b      	str	r3, [r7, #0]
 800d9a4:	607a      	str	r2, [r7, #4]
 800d9a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d9ae:	f7f2 fcb7 	bl	8000320 <__aeabi_uldivmod>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	4610      	mov	r0, r2
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	f04f 0200 	mov.w	r2, #0
 800d9be:	f04f 0300 	mov.w	r3, #0
 800d9c2:	020b      	lsls	r3, r1, #8
 800d9c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d9c8:	0202      	lsls	r2, r0, #8
 800d9ca:	6979      	ldr	r1, [r7, #20]
 800d9cc:	6849      	ldr	r1, [r1, #4]
 800d9ce:	0849      	lsrs	r1, r1, #1
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	eb12 0804 	adds.w	r8, r2, r4
 800d9da:	eb43 0905 	adc.w	r9, r3, r5
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	469a      	mov	sl, r3
 800d9e6:	4693      	mov	fp, r2
 800d9e8:	4652      	mov	r2, sl
 800d9ea:	465b      	mov	r3, fp
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	f7f2 fc96 	bl	8000320 <__aeabi_uldivmod>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da02:	d308      	bcc.n	800da16 <UART_SetConfig+0x9a2>
 800da04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da0a:	d204      	bcs.n	800da16 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da12:	60da      	str	r2, [r3, #12]
 800da14:	e17f      	b.n	800dd16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da1c:	e17b      	b.n	800dd16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da26:	f040 80bd 	bne.w	800dba4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800da2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da2e:	2b20      	cmp	r3, #32
 800da30:	dc48      	bgt.n	800dac4 <UART_SetConfig+0xa50>
 800da32:	2b00      	cmp	r3, #0
 800da34:	db7b      	blt.n	800db2e <UART_SetConfig+0xaba>
 800da36:	2b20      	cmp	r3, #32
 800da38:	d879      	bhi.n	800db2e <UART_SetConfig+0xaba>
 800da3a:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <UART_SetConfig+0x9cc>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800dacb 	.word	0x0800dacb
 800da44:	0800dad3 	.word	0x0800dad3
 800da48:	0800db2f 	.word	0x0800db2f
 800da4c:	0800db2f 	.word	0x0800db2f
 800da50:	0800dadb 	.word	0x0800dadb
 800da54:	0800db2f 	.word	0x0800db2f
 800da58:	0800db2f 	.word	0x0800db2f
 800da5c:	0800db2f 	.word	0x0800db2f
 800da60:	0800daeb 	.word	0x0800daeb
 800da64:	0800db2f 	.word	0x0800db2f
 800da68:	0800db2f 	.word	0x0800db2f
 800da6c:	0800db2f 	.word	0x0800db2f
 800da70:	0800db2f 	.word	0x0800db2f
 800da74:	0800db2f 	.word	0x0800db2f
 800da78:	0800db2f 	.word	0x0800db2f
 800da7c:	0800db2f 	.word	0x0800db2f
 800da80:	0800dafb 	.word	0x0800dafb
 800da84:	0800db2f 	.word	0x0800db2f
 800da88:	0800db2f 	.word	0x0800db2f
 800da8c:	0800db2f 	.word	0x0800db2f
 800da90:	0800db2f 	.word	0x0800db2f
 800da94:	0800db2f 	.word	0x0800db2f
 800da98:	0800db2f 	.word	0x0800db2f
 800da9c:	0800db2f 	.word	0x0800db2f
 800daa0:	0800db2f 	.word	0x0800db2f
 800daa4:	0800db2f 	.word	0x0800db2f
 800daa8:	0800db2f 	.word	0x0800db2f
 800daac:	0800db2f 	.word	0x0800db2f
 800dab0:	0800db2f 	.word	0x0800db2f
 800dab4:	0800db2f 	.word	0x0800db2f
 800dab8:	0800db2f 	.word	0x0800db2f
 800dabc:	0800db2f 	.word	0x0800db2f
 800dac0:	0800db21 	.word	0x0800db21
 800dac4:	2b40      	cmp	r3, #64	; 0x40
 800dac6:	d02e      	beq.n	800db26 <UART_SetConfig+0xab2>
 800dac8:	e031      	b.n	800db2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800daca:	f7fb fddb 	bl	8009684 <HAL_RCC_GetPCLK1Freq>
 800dace:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dad0:	e033      	b.n	800db3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dad2:	f7fb fded 	bl	80096b0 <HAL_RCC_GetPCLK2Freq>
 800dad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dad8:	e02f      	b.n	800db3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fc fd0c 	bl	800a4fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae8:	e027      	b.n	800db3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daea:	f107 0318 	add.w	r3, r7, #24
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fc fe58 	bl	800a7a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daf8:	e01f      	b.n	800db3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dafa:	4b69      	ldr	r3, [pc, #420]	; (800dca0 <UART_SetConfig+0xc2c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f003 0320 	and.w	r3, r3, #32
 800db02:	2b00      	cmp	r3, #0
 800db04:	d009      	beq.n	800db1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db06:	4b66      	ldr	r3, [pc, #408]	; (800dca0 <UART_SetConfig+0xc2c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	08db      	lsrs	r3, r3, #3
 800db0c:	f003 0303 	and.w	r3, r3, #3
 800db10:	4a64      	ldr	r2, [pc, #400]	; (800dca4 <UART_SetConfig+0xc30>)
 800db12:	fa22 f303 	lsr.w	r3, r2, r3
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db18:	e00f      	b.n	800db3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800db1a:	4b62      	ldr	r3, [pc, #392]	; (800dca4 <UART_SetConfig+0xc30>)
 800db1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db1e:	e00c      	b.n	800db3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db20:	4b61      	ldr	r3, [pc, #388]	; (800dca8 <UART_SetConfig+0xc34>)
 800db22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db24:	e009      	b.n	800db3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db2c:	e005      	b.n	800db3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800db2e:	2300      	movs	r3, #0
 800db30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f000 80ea 	beq.w	800dd16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db46:	4a55      	ldr	r2, [pc, #340]	; (800dc9c <UART_SetConfig+0xc28>)
 800db48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db4c:	461a      	mov	r2, r3
 800db4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db50:	fbb3 f3f2 	udiv	r3, r3, r2
 800db54:	005a      	lsls	r2, r3, #1
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	085b      	lsrs	r3, r3, #1
 800db5c:	441a      	add	r2, r3
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	fbb2 f3f3 	udiv	r3, r2, r3
 800db66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6a:	2b0f      	cmp	r3, #15
 800db6c:	d916      	bls.n	800db9c <UART_SetConfig+0xb28>
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db74:	d212      	bcs.n	800db9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db78:	b29b      	uxth	r3, r3
 800db7a:	f023 030f 	bic.w	r3, r3, #15
 800db7e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db82:	085b      	lsrs	r3, r3, #1
 800db84:	b29b      	uxth	r3, r3
 800db86:	f003 0307 	and.w	r3, r3, #7
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db8e:	4313      	orrs	r3, r2
 800db90:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800db98:	60da      	str	r2, [r3, #12]
 800db9a:	e0bc      	b.n	800dd16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dba2:	e0b8      	b.n	800dd16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dba4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dba8:	2b20      	cmp	r3, #32
 800dbaa:	dc4b      	bgt.n	800dc44 <UART_SetConfig+0xbd0>
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f2c0 8087 	blt.w	800dcc0 <UART_SetConfig+0xc4c>
 800dbb2:	2b20      	cmp	r3, #32
 800dbb4:	f200 8084 	bhi.w	800dcc0 <UART_SetConfig+0xc4c>
 800dbb8:	a201      	add	r2, pc, #4	; (adr r2, 800dbc0 <UART_SetConfig+0xb4c>)
 800dbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbe:	bf00      	nop
 800dbc0:	0800dc4b 	.word	0x0800dc4b
 800dbc4:	0800dc53 	.word	0x0800dc53
 800dbc8:	0800dcc1 	.word	0x0800dcc1
 800dbcc:	0800dcc1 	.word	0x0800dcc1
 800dbd0:	0800dc5b 	.word	0x0800dc5b
 800dbd4:	0800dcc1 	.word	0x0800dcc1
 800dbd8:	0800dcc1 	.word	0x0800dcc1
 800dbdc:	0800dcc1 	.word	0x0800dcc1
 800dbe0:	0800dc6b 	.word	0x0800dc6b
 800dbe4:	0800dcc1 	.word	0x0800dcc1
 800dbe8:	0800dcc1 	.word	0x0800dcc1
 800dbec:	0800dcc1 	.word	0x0800dcc1
 800dbf0:	0800dcc1 	.word	0x0800dcc1
 800dbf4:	0800dcc1 	.word	0x0800dcc1
 800dbf8:	0800dcc1 	.word	0x0800dcc1
 800dbfc:	0800dcc1 	.word	0x0800dcc1
 800dc00:	0800dc7b 	.word	0x0800dc7b
 800dc04:	0800dcc1 	.word	0x0800dcc1
 800dc08:	0800dcc1 	.word	0x0800dcc1
 800dc0c:	0800dcc1 	.word	0x0800dcc1
 800dc10:	0800dcc1 	.word	0x0800dcc1
 800dc14:	0800dcc1 	.word	0x0800dcc1
 800dc18:	0800dcc1 	.word	0x0800dcc1
 800dc1c:	0800dcc1 	.word	0x0800dcc1
 800dc20:	0800dcc1 	.word	0x0800dcc1
 800dc24:	0800dcc1 	.word	0x0800dcc1
 800dc28:	0800dcc1 	.word	0x0800dcc1
 800dc2c:	0800dcc1 	.word	0x0800dcc1
 800dc30:	0800dcc1 	.word	0x0800dcc1
 800dc34:	0800dcc1 	.word	0x0800dcc1
 800dc38:	0800dcc1 	.word	0x0800dcc1
 800dc3c:	0800dcc1 	.word	0x0800dcc1
 800dc40:	0800dcb3 	.word	0x0800dcb3
 800dc44:	2b40      	cmp	r3, #64	; 0x40
 800dc46:	d037      	beq.n	800dcb8 <UART_SetConfig+0xc44>
 800dc48:	e03a      	b.n	800dcc0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc4a:	f7fb fd1b 	bl	8009684 <HAL_RCC_GetPCLK1Freq>
 800dc4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dc50:	e03c      	b.n	800dccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc52:	f7fb fd2d 	bl	80096b0 <HAL_RCC_GetPCLK2Freq>
 800dc56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dc58:	e038      	b.n	800dccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fc fc4c 	bl	800a4fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc68:	e030      	b.n	800dccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc6a:	f107 0318 	add.w	r3, r7, #24
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fc fd98 	bl	800a7a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc78:	e028      	b.n	800dccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc7a:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <UART_SetConfig+0xc2c>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0320 	and.w	r3, r3, #32
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d012      	beq.n	800dcac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc86:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <UART_SetConfig+0xc2c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	08db      	lsrs	r3, r3, #3
 800dc8c:	f003 0303 	and.w	r3, r3, #3
 800dc90:	4a04      	ldr	r2, [pc, #16]	; (800dca4 <UART_SetConfig+0xc30>)
 800dc92:	fa22 f303 	lsr.w	r3, r2, r3
 800dc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc98:	e018      	b.n	800dccc <UART_SetConfig+0xc58>
 800dc9a:	bf00      	nop
 800dc9c:	0800ef4c 	.word	0x0800ef4c
 800dca0:	58024400 	.word	0x58024400
 800dca4:	03d09000 	.word	0x03d09000
 800dca8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dcac:	4b24      	ldr	r3, [pc, #144]	; (800dd40 <UART_SetConfig+0xccc>)
 800dcae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcb0:	e00c      	b.n	800dccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dcb2:	4b24      	ldr	r3, [pc, #144]	; (800dd44 <UART_SetConfig+0xcd0>)
 800dcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcb6:	e009      	b.n	800dccc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dcb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcbe:	e005      	b.n	800dccc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dcca:	bf00      	nop
    }

    if (pclk != 0U)
 800dccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d021      	beq.n	800dd16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd6:	4a1c      	ldr	r2, [pc, #112]	; (800dd48 <UART_SetConfig+0xcd4>)
 800dcd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce0:	fbb3 f2f2 	udiv	r2, r3, r2
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	085b      	lsrs	r3, r3, #1
 800dcea:	441a      	add	r2, r3
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcf4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf8:	2b0f      	cmp	r3, #15
 800dcfa:	d909      	bls.n	800dd10 <UART_SetConfig+0xc9c>
 800dcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd02:	d205      	bcs.n	800dd10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	60da      	str	r2, [r3, #12]
 800dd0e:	e002      	b.n	800dd16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dd32:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3748      	adds	r7, #72	; 0x48
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd40:	03d09000 	.word	0x03d09000
 800dd44:	003d0900 	.word	0x003d0900
 800dd48:	0800ef4c 	.word	0x0800ef4c

0800dd4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00a      	beq.n	800dd76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	430a      	orrs	r2, r1
 800dd74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd7a:	f003 0302 	and.w	r3, r3, #2
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00a      	beq.n	800dd98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	430a      	orrs	r2, r1
 800dd96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9c:	f003 0304 	and.w	r3, r3, #4
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00a      	beq.n	800ddba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddbe:	f003 0308 	and.w	r3, r3, #8
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00a      	beq.n	800dddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde0:	f003 0310 	and.w	r3, r3, #16
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00a      	beq.n	800ddfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	430a      	orrs	r2, r1
 800ddfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de02:	f003 0320 	and.w	r3, r3, #32
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00a      	beq.n	800de20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	430a      	orrs	r2, r1
 800de1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01a      	beq.n	800de62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	430a      	orrs	r2, r1
 800de40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de4a:	d10a      	bne.n	800de62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	430a      	orrs	r2, r1
 800de60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00a      	beq.n	800de84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	430a      	orrs	r2, r1
 800de82:	605a      	str	r2, [r3, #4]
  }
}
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af02      	add	r7, sp, #8
 800de96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dea0:	f7f7 f882 	bl	8004fa8 <HAL_GetTick>
 800dea4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f003 0308 	and.w	r3, r3, #8
 800deb0:	2b08      	cmp	r3, #8
 800deb2:	d10e      	bne.n	800ded2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800deb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 f82f 	bl	800df26 <UART_WaitOnFlagUntilTimeout>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d001      	beq.n	800ded2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dece:	2303      	movs	r3, #3
 800ded0:	e025      	b.n	800df1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b04      	cmp	r3, #4
 800dede:	d10e      	bne.n	800defe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f819 	bl	800df26 <UART_WaitOnFlagUntilTimeout>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d001      	beq.n	800defe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800defa:	2303      	movs	r3, #3
 800defc:	e00f      	b.n	800df1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2220      	movs	r2, #32
 800df02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2220      	movs	r2, #32
 800df0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b09c      	sub	sp, #112	; 0x70
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	60f8      	str	r0, [r7, #12]
 800df2e:	60b9      	str	r1, [r7, #8]
 800df30:	603b      	str	r3, [r7, #0]
 800df32:	4613      	mov	r3, r2
 800df34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df36:	e0a9      	b.n	800e08c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3e:	f000 80a5 	beq.w	800e08c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df42:	f7f7 f831 	bl	8004fa8 <HAL_GetTick>
 800df46:	4602      	mov	r2, r0
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800df4e:	429a      	cmp	r2, r3
 800df50:	d302      	bcc.n	800df58 <UART_WaitOnFlagUntilTimeout+0x32>
 800df52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df54:	2b00      	cmp	r3, #0
 800df56:	d140      	bne.n	800dfda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df60:	e853 3f00 	ldrex	r3, [r3]
 800df64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800df66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df6c:	667b      	str	r3, [r7, #100]	; 0x64
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df7e:	e841 2300 	strex	r3, r2, [r1]
 800df82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800df84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df86:	2b00      	cmp	r3, #0
 800df88:	d1e6      	bne.n	800df58 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	3308      	adds	r3, #8
 800df90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df94:	e853 3f00 	ldrex	r3, [r3]
 800df98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	f023 0301 	bic.w	r3, r3, #1
 800dfa0:	663b      	str	r3, [r7, #96]	; 0x60
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfaa:	64ba      	str	r2, [r7, #72]	; 0x48
 800dfac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfb2:	e841 2300 	strex	r3, r2, [r1]
 800dfb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dfb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1e5      	bne.n	800df8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2220      	movs	r2, #32
 800dfc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2220      	movs	r2, #32
 800dfca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	e069      	b.n	800e0ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f003 0304 	and.w	r3, r3, #4
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d051      	beq.n	800e08c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	69db      	ldr	r3, [r3, #28]
 800dfee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dff6:	d149      	bne.n	800e08c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e000:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00a:	e853 3f00 	ldrex	r3, [r3]
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e016:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	461a      	mov	r2, r3
 800e01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e020:	637b      	str	r3, [r7, #52]	; 0x34
 800e022:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e028:	e841 2300 	strex	r3, r2, [r1]
 800e02c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1e6      	bne.n	800e002 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	3308      	adds	r3, #8
 800e03a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	e853 3f00 	ldrex	r3, [r3]
 800e042:	613b      	str	r3, [r7, #16]
   return(result);
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f023 0301 	bic.w	r3, r3, #1
 800e04a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3308      	adds	r3, #8
 800e052:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e054:	623a      	str	r2, [r7, #32]
 800e056:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e058:	69f9      	ldr	r1, [r7, #28]
 800e05a:	6a3a      	ldr	r2, [r7, #32]
 800e05c:	e841 2300 	strex	r3, r2, [r1]
 800e060:	61bb      	str	r3, [r7, #24]
   return(result);
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1e5      	bne.n	800e034 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2220      	movs	r2, #32
 800e06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2220      	movs	r2, #32
 800e074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2220      	movs	r2, #32
 800e07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e088:	2303      	movs	r3, #3
 800e08a:	e010      	b.n	800e0ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	69da      	ldr	r2, [r3, #28]
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	4013      	ands	r3, r2
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	429a      	cmp	r2, r3
 800e09a:	bf0c      	ite	eq
 800e09c:	2301      	moveq	r3, #1
 800e09e:	2300      	movne	r3, #0
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	f43f af46 	beq.w	800df38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3770      	adds	r7, #112	; 0x70
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b096      	sub	sp, #88	; 0x58
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	88fa      	ldrh	r2, [r7, #6]
 800e0d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2222      	movs	r2, #34	; 0x22
 800e0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d02c      	beq.n	800e146 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f0:	4a42      	ldr	r2, [pc, #264]	; (800e1fc <UART_Start_Receive_DMA+0x144>)
 800e0f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f8:	4a41      	ldr	r2, [pc, #260]	; (800e200 <UART_Start_Receive_DMA+0x148>)
 800e0fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e100:	4a40      	ldr	r2, [pc, #256]	; (800e204 <UART_Start_Receive_DMA+0x14c>)
 800e102:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e108:	2200      	movs	r2, #0
 800e10a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3324      	adds	r3, #36	; 0x24
 800e116:	4619      	mov	r1, r3
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e11c:	461a      	mov	r2, r3
 800e11e:	88fb      	ldrh	r3, [r7, #6]
 800e120:	f7f7 fda0 	bl	8005c64 <HAL_DMA_Start_IT>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00d      	beq.n	800e146 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2210      	movs	r2, #16
 800e12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2220      	movs	r2, #32
 800e13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e055      	b.n	800e1f2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d018      	beq.n	800e188 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15e:	e853 3f00 	ldrex	r3, [r3]
 800e162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e16a:	657b      	str	r3, [r7, #84]	; 0x54
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	461a      	mov	r2, r3
 800e172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e174:	64bb      	str	r3, [r7, #72]	; 0x48
 800e176:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e178:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e17a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e17c:	e841 2300 	strex	r3, r2, [r1]
 800e180:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1e6      	bne.n	800e156 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3308      	adds	r3, #8
 800e18e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	e853 3f00 	ldrex	r3, [r3]
 800e196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19a:	f043 0301 	orr.w	r3, r3, #1
 800e19e:	653b      	str	r3, [r7, #80]	; 0x50
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1a8:	637a      	str	r2, [r7, #52]	; 0x34
 800e1aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1b0:	e841 2300 	strex	r3, r2, [r1]
 800e1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1e5      	bne.n	800e188 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	e853 3f00 	ldrex	r3, [r3]
 800e1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3308      	adds	r3, #8
 800e1da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1dc:	623a      	str	r2, [r7, #32]
 800e1de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e0:	69f9      	ldr	r1, [r7, #28]
 800e1e2:	6a3a      	ldr	r2, [r7, #32]
 800e1e4:	e841 2300 	strex	r3, r2, [r1]
 800e1e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1e5      	bne.n	800e1bc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e1f0:	2300      	movs	r3, #0
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3758      	adds	r7, #88	; 0x58
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	0800e40b 	.word	0x0800e40b
 800e200:	0800e52d 	.word	0x0800e52d
 800e204:	0800e565 	.word	0x0800e565

0800e208 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e208:	b480      	push	{r7}
 800e20a:	b08f      	sub	sp, #60	; 0x3c
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	e853 3f00 	ldrex	r3, [r3]
 800e21c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e224:	637b      	str	r3, [r7, #52]	; 0x34
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	461a      	mov	r2, r3
 800e22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e230:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e236:	e841 2300 	strex	r3, r2, [r1]
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1e6      	bne.n	800e210 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3308      	adds	r3, #8
 800e248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	e853 3f00 	ldrex	r3, [r3]
 800e250:	60bb      	str	r3, [r7, #8]
   return(result);
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e258:	633b      	str	r3, [r7, #48]	; 0x30
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	3308      	adds	r3, #8
 800e260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e262:	61ba      	str	r2, [r7, #24]
 800e264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e266:	6979      	ldr	r1, [r7, #20]
 800e268:	69ba      	ldr	r2, [r7, #24]
 800e26a:	e841 2300 	strex	r3, r2, [r1]
 800e26e:	613b      	str	r3, [r7, #16]
   return(result);
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1e5      	bne.n	800e242 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2220      	movs	r2, #32
 800e27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e27e:	bf00      	nop
 800e280:	373c      	adds	r7, #60	; 0x3c
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
	...

0800e28c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b095      	sub	sp, #84	; 0x54
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e29c:	e853 3f00 	ldrex	r3, [r3]
 800e2a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e2b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2ba:	e841 2300 	strex	r3, r2, [r1]
 800e2be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1e6      	bne.n	800e294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	e853 3f00 	ldrex	r3, [r3]
 800e2d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2d6:	69fa      	ldr	r2, [r7, #28]
 800e2d8:	4b1e      	ldr	r3, [pc, #120]	; (800e354 <UART_EndRxTransfer+0xc8>)
 800e2da:	4013      	ands	r3, r2
 800e2dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	3308      	adds	r3, #8
 800e2e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e2e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2ee:	e841 2300 	strex	r3, r2, [r1]
 800e2f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1e5      	bne.n	800e2c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d118      	bne.n	800e334 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	e853 3f00 	ldrex	r3, [r3]
 800e30e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	f023 0310 	bic.w	r3, r3, #16
 800e316:	647b      	str	r3, [r7, #68]	; 0x44
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	461a      	mov	r2, r3
 800e31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e320:	61bb      	str	r3, [r7, #24]
 800e322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e324:	6979      	ldr	r1, [r7, #20]
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	e841 2300 	strex	r3, r2, [r1]
 800e32c:	613b      	str	r3, [r7, #16]
   return(result);
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1e6      	bne.n	800e302 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2220      	movs	r2, #32
 800e338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2200      	movs	r2, #0
 800e340:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e348:	bf00      	nop
 800e34a:	3754      	adds	r7, #84	; 0x54
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr
 800e354:	effffffe 	.word	0xeffffffe

0800e358 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b090      	sub	sp, #64	; 0x40
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e364:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	69db      	ldr	r3, [r3, #28]
 800e36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e36e:	d037      	beq.n	800e3e0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e372:	2200      	movs	r2, #0
 800e374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	3308      	adds	r3, #8
 800e37e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	e853 3f00 	ldrex	r3, [r3]
 800e386:	623b      	str	r3, [r7, #32]
   return(result);
 800e388:	6a3b      	ldr	r3, [r7, #32]
 800e38a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e38e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3308      	adds	r3, #8
 800e396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e398:	633a      	str	r2, [r7, #48]	; 0x30
 800e39a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e39e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3a0:	e841 2300 	strex	r3, r2, [r1]
 800e3a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1e5      	bne.n	800e378 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	e853 3f00 	ldrex	r3, [r3]
 800e3b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ca:	61fb      	str	r3, [r7, #28]
 800e3cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ce:	69b9      	ldr	r1, [r7, #24]
 800e3d0:	69fa      	ldr	r2, [r7, #28]
 800e3d2:	e841 2300 	strex	r3, r2, [r1]
 800e3d6:	617b      	str	r3, [r7, #20]
   return(result);
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1e6      	bne.n	800e3ac <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3de:	e002      	b.n	800e3e6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e3e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e3e2:	f7fe fe1d 	bl	800d020 <HAL_UART_TxCpltCallback>
}
 800e3e6:	bf00      	nop
 800e3e8:	3740      	adds	r7, #64	; 0x40
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7fe fe19 	bl	800d034 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b09c      	sub	sp, #112	; 0x70
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e416:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	69db      	ldr	r3, [r3, #28]
 800e41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e420:	d071      	beq.n	800e506 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e424:	2200      	movs	r2, #0
 800e426:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e432:	e853 3f00 	ldrex	r3, [r3]
 800e436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e43a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e43e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	461a      	mov	r2, r3
 800e446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e448:	65bb      	str	r3, [r7, #88]	; 0x58
 800e44a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e44e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e450:	e841 2300 	strex	r3, r2, [r1]
 800e454:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1e6      	bne.n	800e42a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3308      	adds	r3, #8
 800e462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e46e:	f023 0301 	bic.w	r3, r3, #1
 800e472:	667b      	str	r3, [r7, #100]	; 0x64
 800e474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3308      	adds	r3, #8
 800e47a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e47c:	647a      	str	r2, [r7, #68]	; 0x44
 800e47e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e484:	e841 2300 	strex	r3, r2, [r1]
 800e488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e5      	bne.n	800e45c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3308      	adds	r3, #8
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	e853 3f00 	ldrex	r3, [r3]
 800e49e:	623b      	str	r3, [r7, #32]
   return(result);
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4a6:	663b      	str	r3, [r7, #96]	; 0x60
 800e4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4b0:	633a      	str	r2, [r7, #48]	; 0x30
 800e4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4b8:	e841 2300 	strex	r3, r2, [r1]
 800e4bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e5      	bne.n	800e490 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4c6:	2220      	movs	r2, #32
 800e4c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d118      	bne.n	800e506 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	e853 3f00 	ldrex	r3, [r3]
 800e4e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f023 0310 	bic.w	r3, r3, #16
 800e4e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4f2:	61fb      	str	r3, [r7, #28]
 800e4f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f6:	69b9      	ldr	r1, [r7, #24]
 800e4f8:	69fa      	ldr	r2, [r7, #28]
 800e4fa:	e841 2300 	strex	r3, r2, [r1]
 800e4fe:	617b      	str	r3, [r7, #20]
   return(result);
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1e6      	bne.n	800e4d4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d107      	bne.n	800e51e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e514:	4619      	mov	r1, r3
 800e516:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e518:	f7fe fda0 	bl	800d05c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e51c:	e002      	b.n	800e524 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e51e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e520:	f7f5 f9c8 	bl	80038b4 <HAL_UART_RxCpltCallback>
}
 800e524:	bf00      	nop
 800e526:	3770      	adds	r7, #112	; 0x70
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e538:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d109      	bne.n	800e556 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e548:	085b      	lsrs	r3, r3, #1
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	4619      	mov	r1, r3
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f7fe fd84 	bl	800d05c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e554:	e002      	b.n	800e55c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f7fe fd76 	bl	800d048 <HAL_UART_RxHalfCpltCallback>
}
 800e55c:	bf00      	nop
 800e55e:	3710      	adds	r7, #16
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e570:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e578:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e580:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e58c:	2b80      	cmp	r3, #128	; 0x80
 800e58e:	d109      	bne.n	800e5a4 <UART_DMAError+0x40>
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	2b21      	cmp	r3, #33	; 0x21
 800e594:	d106      	bne.n	800e5a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	2200      	movs	r2, #0
 800e59a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e59e:	6978      	ldr	r0, [r7, #20]
 800e5a0:	f7ff fe32 	bl	800e208 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ae:	2b40      	cmp	r3, #64	; 0x40
 800e5b0:	d109      	bne.n	800e5c6 <UART_DMAError+0x62>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2b22      	cmp	r3, #34	; 0x22
 800e5b6:	d106      	bne.n	800e5c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e5c0:	6978      	ldr	r0, [r7, #20]
 800e5c2:	f7ff fe63 	bl	800e28c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5cc:	f043 0210 	orr.w	r2, r3, #16
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e5d6:	6978      	ldr	r0, [r7, #20]
 800e5d8:	f7f5 f934 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5dc:	bf00      	nop
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f7f5 f91e 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e608:	bf00      	nop
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	e853 3f00 	ldrex	r3, [r3]
 800e624:	60bb      	str	r3, [r7, #8]
   return(result);
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e62c:	61fb      	str	r3, [r7, #28]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	61bb      	str	r3, [r7, #24]
 800e638:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63a:	6979      	ldr	r1, [r7, #20]
 800e63c:	69ba      	ldr	r2, [r7, #24]
 800e63e:	e841 2300 	strex	r3, r2, [r1]
 800e642:	613b      	str	r3, [r7, #16]
   return(result);
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1e6      	bne.n	800e618 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2220      	movs	r2, #32
 800e64e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7fe fce1 	bl	800d020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e65e:	bf00      	nop
 800e660:	3720      	adds	r7, #32
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e666:	b480      	push	{r7}
 800e668:	b083      	sub	sp, #12
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e66e:	bf00      	nop
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b083      	sub	sp, #12
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e682:	bf00      	nop
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr

0800e68e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e68e:	b480      	push	{r7}
 800e690:	b083      	sub	sp, #12
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e696:	bf00      	nop
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e6a2:	b480      	push	{r7}
 800e6a4:	b085      	sub	sp, #20
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d101      	bne.n	800e6b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800e6b4:	2302      	movs	r3, #2
 800e6b6:	e027      	b.n	800e708 <HAL_UARTEx_DisableFifoMode+0x66>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2224      	movs	r2, #36	; 0x24
 800e6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f022 0201 	bic.w	r2, r2, #1
 800e6de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e6e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2220      	movs	r2, #32
 800e6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3714      	adds	r7, #20
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e724:	2b01      	cmp	r3, #1
 800e726:	d101      	bne.n	800e72c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e728:	2302      	movs	r3, #2
 800e72a:	e02d      	b.n	800e788 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2224      	movs	r2, #36	; 0x24
 800e738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f022 0201 	bic.w	r2, r2, #1
 800e752:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	430a      	orrs	r2, r1
 800e766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f84f 	bl	800e80c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2220      	movs	r2, #32
 800e77a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d101      	bne.n	800e7a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	e02d      	b.n	800e804 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2224      	movs	r2, #36	; 0x24
 800e7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f022 0201 	bic.w	r2, r2, #1
 800e7ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	430a      	orrs	r2, r1
 800e7e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 f811 	bl	800e80c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2220      	movs	r2, #32
 800e7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d108      	bne.n	800e82e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2201      	movs	r2, #1
 800e820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2201      	movs	r2, #1
 800e828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e82c:	e031      	b.n	800e892 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e82e:	2310      	movs	r3, #16
 800e830:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e832:	2310      	movs	r3, #16
 800e834:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	0e5b      	lsrs	r3, r3, #25
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	f003 0307 	and.w	r3, r3, #7
 800e844:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	0f5b      	lsrs	r3, r3, #29
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	f003 0307 	and.w	r3, r3, #7
 800e854:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e856:	7bbb      	ldrb	r3, [r7, #14]
 800e858:	7b3a      	ldrb	r2, [r7, #12]
 800e85a:	4911      	ldr	r1, [pc, #68]	; (800e8a0 <UARTEx_SetNbDataToProcess+0x94>)
 800e85c:	5c8a      	ldrb	r2, [r1, r2]
 800e85e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e862:	7b3a      	ldrb	r2, [r7, #12]
 800e864:	490f      	ldr	r1, [pc, #60]	; (800e8a4 <UARTEx_SetNbDataToProcess+0x98>)
 800e866:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e868:	fb93 f3f2 	sdiv	r3, r3, r2
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	7b7a      	ldrb	r2, [r7, #13]
 800e878:	4909      	ldr	r1, [pc, #36]	; (800e8a0 <UARTEx_SetNbDataToProcess+0x94>)
 800e87a:	5c8a      	ldrb	r2, [r1, r2]
 800e87c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e880:	7b7a      	ldrb	r2, [r7, #13]
 800e882:	4908      	ldr	r1, [pc, #32]	; (800e8a4 <UARTEx_SetNbDataToProcess+0x98>)
 800e884:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e886:	fb93 f3f2 	sdiv	r3, r3, r2
 800e88a:	b29a      	uxth	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e892:	bf00      	nop
 800e894:	3714      	adds	r7, #20
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	0800ef64 	.word	0x0800ef64
 800e8a4:	0800ef6c 	.word	0x0800ef6c

0800e8a8 <__cxa_pure_virtual>:
 800e8a8:	b508      	push	{r3, lr}
 800e8aa:	f000 f80d 	bl	800e8c8 <_ZSt9terminatev>

0800e8ae <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e8ae:	b508      	push	{r3, lr}
 800e8b0:	4780      	blx	r0
 800e8b2:	f000 f80e 	bl	800e8d2 <abort>
	...

0800e8b8 <_ZSt13get_terminatev>:
 800e8b8:	4b02      	ldr	r3, [pc, #8]	; (800e8c4 <_ZSt13get_terminatev+0xc>)
 800e8ba:	6818      	ldr	r0, [r3, #0]
 800e8bc:	f3bf 8f5b 	dmb	ish
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	24000028 	.word	0x24000028

0800e8c8 <_ZSt9terminatev>:
 800e8c8:	b508      	push	{r3, lr}
 800e8ca:	f7ff fff5 	bl	800e8b8 <_ZSt13get_terminatev>
 800e8ce:	f7ff ffee 	bl	800e8ae <_ZN10__cxxabiv111__terminateEPFvvE>

0800e8d2 <abort>:
 800e8d2:	b508      	push	{r3, lr}
 800e8d4:	2006      	movs	r0, #6
 800e8d6:	f000 f873 	bl	800e9c0 <raise>
 800e8da:	2001      	movs	r0, #1
 800e8dc:	f7f6 f9fc 	bl	8004cd8 <_exit>

0800e8e0 <__errno>:
 800e8e0:	4b01      	ldr	r3, [pc, #4]	; (800e8e8 <__errno+0x8>)
 800e8e2:	6818      	ldr	r0, [r3, #0]
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	2400002c 	.word	0x2400002c

0800e8ec <__libc_init_array>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	4d0d      	ldr	r5, [pc, #52]	; (800e924 <__libc_init_array+0x38>)
 800e8f0:	4c0d      	ldr	r4, [pc, #52]	; (800e928 <__libc_init_array+0x3c>)
 800e8f2:	1b64      	subs	r4, r4, r5
 800e8f4:	10a4      	asrs	r4, r4, #2
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	42a6      	cmp	r6, r4
 800e8fa:	d109      	bne.n	800e910 <__libc_init_array+0x24>
 800e8fc:	4d0b      	ldr	r5, [pc, #44]	; (800e92c <__libc_init_array+0x40>)
 800e8fe:	4c0c      	ldr	r4, [pc, #48]	; (800e930 <__libc_init_array+0x44>)
 800e900:	f000 f9b0 	bl	800ec64 <_init>
 800e904:	1b64      	subs	r4, r4, r5
 800e906:	10a4      	asrs	r4, r4, #2
 800e908:	2600      	movs	r6, #0
 800e90a:	42a6      	cmp	r6, r4
 800e90c:	d105      	bne.n	800e91a <__libc_init_array+0x2e>
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	f855 3b04 	ldr.w	r3, [r5], #4
 800e914:	4798      	blx	r3
 800e916:	3601      	adds	r6, #1
 800e918:	e7ee      	b.n	800e8f8 <__libc_init_array+0xc>
 800e91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e91e:	4798      	blx	r3
 800e920:	3601      	adds	r6, #1
 800e922:	e7f2      	b.n	800e90a <__libc_init_array+0x1e>
 800e924:	0800ef7c 	.word	0x0800ef7c
 800e928:	0800ef7c 	.word	0x0800ef7c
 800e92c:	0800ef7c 	.word	0x0800ef7c
 800e930:	0800ef84 	.word	0x0800ef84

0800e934 <memcpy>:
 800e934:	440a      	add	r2, r1
 800e936:	4291      	cmp	r1, r2
 800e938:	f100 33ff 	add.w	r3, r0, #4294967295
 800e93c:	d100      	bne.n	800e940 <memcpy+0xc>
 800e93e:	4770      	bx	lr
 800e940:	b510      	push	{r4, lr}
 800e942:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e94a:	4291      	cmp	r1, r2
 800e94c:	d1f9      	bne.n	800e942 <memcpy+0xe>
 800e94e:	bd10      	pop	{r4, pc}

0800e950 <memset>:
 800e950:	4402      	add	r2, r0
 800e952:	4603      	mov	r3, r0
 800e954:	4293      	cmp	r3, r2
 800e956:	d100      	bne.n	800e95a <memset+0xa>
 800e958:	4770      	bx	lr
 800e95a:	f803 1b01 	strb.w	r1, [r3], #1
 800e95e:	e7f9      	b.n	800e954 <memset+0x4>

0800e960 <realloc>:
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <realloc+0xc>)
 800e962:	460a      	mov	r2, r1
 800e964:	4601      	mov	r1, r0
 800e966:	6818      	ldr	r0, [r3, #0]
 800e968:	f000 b8da 	b.w	800eb20 <_realloc_r>
 800e96c:	2400002c 	.word	0x2400002c

0800e970 <_raise_r>:
 800e970:	291f      	cmp	r1, #31
 800e972:	b538      	push	{r3, r4, r5, lr}
 800e974:	4604      	mov	r4, r0
 800e976:	460d      	mov	r5, r1
 800e978:	d904      	bls.n	800e984 <_raise_r+0x14>
 800e97a:	2316      	movs	r3, #22
 800e97c:	6003      	str	r3, [r0, #0]
 800e97e:	f04f 30ff 	mov.w	r0, #4294967295
 800e982:	bd38      	pop	{r3, r4, r5, pc}
 800e984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e986:	b112      	cbz	r2, 800e98e <_raise_r+0x1e>
 800e988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e98c:	b94b      	cbnz	r3, 800e9a2 <_raise_r+0x32>
 800e98e:	4620      	mov	r0, r4
 800e990:	f000 f830 	bl	800e9f4 <_getpid_r>
 800e994:	462a      	mov	r2, r5
 800e996:	4601      	mov	r1, r0
 800e998:	4620      	mov	r0, r4
 800e99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e99e:	f000 b817 	b.w	800e9d0 <_kill_r>
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d00a      	beq.n	800e9bc <_raise_r+0x4c>
 800e9a6:	1c59      	adds	r1, r3, #1
 800e9a8:	d103      	bne.n	800e9b2 <_raise_r+0x42>
 800e9aa:	2316      	movs	r3, #22
 800e9ac:	6003      	str	r3, [r0, #0]
 800e9ae:	2001      	movs	r0, #1
 800e9b0:	e7e7      	b.n	800e982 <_raise_r+0x12>
 800e9b2:	2400      	movs	r4, #0
 800e9b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	4798      	blx	r3
 800e9bc:	2000      	movs	r0, #0
 800e9be:	e7e0      	b.n	800e982 <_raise_r+0x12>

0800e9c0 <raise>:
 800e9c0:	4b02      	ldr	r3, [pc, #8]	; (800e9cc <raise+0xc>)
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	6818      	ldr	r0, [r3, #0]
 800e9c6:	f7ff bfd3 	b.w	800e970 <_raise_r>
 800e9ca:	bf00      	nop
 800e9cc:	2400002c 	.word	0x2400002c

0800e9d0 <_kill_r>:
 800e9d0:	b538      	push	{r3, r4, r5, lr}
 800e9d2:	4d07      	ldr	r5, [pc, #28]	; (800e9f0 <_kill_r+0x20>)
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	4608      	mov	r0, r1
 800e9da:	4611      	mov	r1, r2
 800e9dc:	602b      	str	r3, [r5, #0]
 800e9de:	f7f6 f96b 	bl	8004cb8 <_kill>
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	d102      	bne.n	800e9ec <_kill_r+0x1c>
 800e9e6:	682b      	ldr	r3, [r5, #0]
 800e9e8:	b103      	cbz	r3, 800e9ec <_kill_r+0x1c>
 800e9ea:	6023      	str	r3, [r4, #0]
 800e9ec:	bd38      	pop	{r3, r4, r5, pc}
 800e9ee:	bf00      	nop
 800e9f0:	240010fc 	.word	0x240010fc

0800e9f4 <_getpid_r>:
 800e9f4:	f7f6 b958 	b.w	8004ca8 <_getpid>

0800e9f8 <sbrk_aligned>:
 800e9f8:	b570      	push	{r4, r5, r6, lr}
 800e9fa:	4e0e      	ldr	r6, [pc, #56]	; (800ea34 <sbrk_aligned+0x3c>)
 800e9fc:	460c      	mov	r4, r1
 800e9fe:	6831      	ldr	r1, [r6, #0]
 800ea00:	4605      	mov	r5, r0
 800ea02:	b911      	cbnz	r1, 800ea0a <sbrk_aligned+0x12>
 800ea04:	f000 f8bc 	bl	800eb80 <_sbrk_r>
 800ea08:	6030      	str	r0, [r6, #0]
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	f000 f8b7 	bl	800eb80 <_sbrk_r>
 800ea12:	1c43      	adds	r3, r0, #1
 800ea14:	d00a      	beq.n	800ea2c <sbrk_aligned+0x34>
 800ea16:	1cc4      	adds	r4, r0, #3
 800ea18:	f024 0403 	bic.w	r4, r4, #3
 800ea1c:	42a0      	cmp	r0, r4
 800ea1e:	d007      	beq.n	800ea30 <sbrk_aligned+0x38>
 800ea20:	1a21      	subs	r1, r4, r0
 800ea22:	4628      	mov	r0, r5
 800ea24:	f000 f8ac 	bl	800eb80 <_sbrk_r>
 800ea28:	3001      	adds	r0, #1
 800ea2a:	d101      	bne.n	800ea30 <sbrk_aligned+0x38>
 800ea2c:	f04f 34ff 	mov.w	r4, #4294967295
 800ea30:	4620      	mov	r0, r4
 800ea32:	bd70      	pop	{r4, r5, r6, pc}
 800ea34:	240010f8 	.word	0x240010f8

0800ea38 <_malloc_r>:
 800ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3c:	1ccd      	adds	r5, r1, #3
 800ea3e:	f025 0503 	bic.w	r5, r5, #3
 800ea42:	3508      	adds	r5, #8
 800ea44:	2d0c      	cmp	r5, #12
 800ea46:	bf38      	it	cc
 800ea48:	250c      	movcc	r5, #12
 800ea4a:	2d00      	cmp	r5, #0
 800ea4c:	4607      	mov	r7, r0
 800ea4e:	db01      	blt.n	800ea54 <_malloc_r+0x1c>
 800ea50:	42a9      	cmp	r1, r5
 800ea52:	d905      	bls.n	800ea60 <_malloc_r+0x28>
 800ea54:	230c      	movs	r3, #12
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	2600      	movs	r6, #0
 800ea5a:	4630      	mov	r0, r6
 800ea5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea60:	4e2e      	ldr	r6, [pc, #184]	; (800eb1c <_malloc_r+0xe4>)
 800ea62:	f000 f89d 	bl	800eba0 <__malloc_lock>
 800ea66:	6833      	ldr	r3, [r6, #0]
 800ea68:	461c      	mov	r4, r3
 800ea6a:	bb34      	cbnz	r4, 800eaba <_malloc_r+0x82>
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	4638      	mov	r0, r7
 800ea70:	f7ff ffc2 	bl	800e9f8 <sbrk_aligned>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	4604      	mov	r4, r0
 800ea78:	d14d      	bne.n	800eb16 <_malloc_r+0xde>
 800ea7a:	6834      	ldr	r4, [r6, #0]
 800ea7c:	4626      	mov	r6, r4
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	d140      	bne.n	800eb04 <_malloc_r+0xcc>
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	4631      	mov	r1, r6
 800ea86:	4638      	mov	r0, r7
 800ea88:	eb04 0803 	add.w	r8, r4, r3
 800ea8c:	f000 f878 	bl	800eb80 <_sbrk_r>
 800ea90:	4580      	cmp	r8, r0
 800ea92:	d13a      	bne.n	800eb0a <_malloc_r+0xd2>
 800ea94:	6821      	ldr	r1, [r4, #0]
 800ea96:	3503      	adds	r5, #3
 800ea98:	1a6d      	subs	r5, r5, r1
 800ea9a:	f025 0503 	bic.w	r5, r5, #3
 800ea9e:	3508      	adds	r5, #8
 800eaa0:	2d0c      	cmp	r5, #12
 800eaa2:	bf38      	it	cc
 800eaa4:	250c      	movcc	r5, #12
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	4638      	mov	r0, r7
 800eaaa:	f7ff ffa5 	bl	800e9f8 <sbrk_aligned>
 800eaae:	3001      	adds	r0, #1
 800eab0:	d02b      	beq.n	800eb0a <_malloc_r+0xd2>
 800eab2:	6823      	ldr	r3, [r4, #0]
 800eab4:	442b      	add	r3, r5
 800eab6:	6023      	str	r3, [r4, #0]
 800eab8:	e00e      	b.n	800ead8 <_malloc_r+0xa0>
 800eaba:	6822      	ldr	r2, [r4, #0]
 800eabc:	1b52      	subs	r2, r2, r5
 800eabe:	d41e      	bmi.n	800eafe <_malloc_r+0xc6>
 800eac0:	2a0b      	cmp	r2, #11
 800eac2:	d916      	bls.n	800eaf2 <_malloc_r+0xba>
 800eac4:	1961      	adds	r1, r4, r5
 800eac6:	42a3      	cmp	r3, r4
 800eac8:	6025      	str	r5, [r4, #0]
 800eaca:	bf18      	it	ne
 800eacc:	6059      	strne	r1, [r3, #4]
 800eace:	6863      	ldr	r3, [r4, #4]
 800ead0:	bf08      	it	eq
 800ead2:	6031      	streq	r1, [r6, #0]
 800ead4:	5162      	str	r2, [r4, r5]
 800ead6:	604b      	str	r3, [r1, #4]
 800ead8:	4638      	mov	r0, r7
 800eada:	f104 060b 	add.w	r6, r4, #11
 800eade:	f000 f865 	bl	800ebac <__malloc_unlock>
 800eae2:	f026 0607 	bic.w	r6, r6, #7
 800eae6:	1d23      	adds	r3, r4, #4
 800eae8:	1af2      	subs	r2, r6, r3
 800eaea:	d0b6      	beq.n	800ea5a <_malloc_r+0x22>
 800eaec:	1b9b      	subs	r3, r3, r6
 800eaee:	50a3      	str	r3, [r4, r2]
 800eaf0:	e7b3      	b.n	800ea5a <_malloc_r+0x22>
 800eaf2:	6862      	ldr	r2, [r4, #4]
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	bf0c      	ite	eq
 800eaf8:	6032      	streq	r2, [r6, #0]
 800eafa:	605a      	strne	r2, [r3, #4]
 800eafc:	e7ec      	b.n	800ead8 <_malloc_r+0xa0>
 800eafe:	4623      	mov	r3, r4
 800eb00:	6864      	ldr	r4, [r4, #4]
 800eb02:	e7b2      	b.n	800ea6a <_malloc_r+0x32>
 800eb04:	4634      	mov	r4, r6
 800eb06:	6876      	ldr	r6, [r6, #4]
 800eb08:	e7b9      	b.n	800ea7e <_malloc_r+0x46>
 800eb0a:	230c      	movs	r3, #12
 800eb0c:	603b      	str	r3, [r7, #0]
 800eb0e:	4638      	mov	r0, r7
 800eb10:	f000 f84c 	bl	800ebac <__malloc_unlock>
 800eb14:	e7a1      	b.n	800ea5a <_malloc_r+0x22>
 800eb16:	6025      	str	r5, [r4, #0]
 800eb18:	e7de      	b.n	800ead8 <_malloc_r+0xa0>
 800eb1a:	bf00      	nop
 800eb1c:	240010f4 	.word	0x240010f4

0800eb20 <_realloc_r>:
 800eb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb24:	4680      	mov	r8, r0
 800eb26:	4614      	mov	r4, r2
 800eb28:	460e      	mov	r6, r1
 800eb2a:	b921      	cbnz	r1, 800eb36 <_realloc_r+0x16>
 800eb2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb30:	4611      	mov	r1, r2
 800eb32:	f7ff bf81 	b.w	800ea38 <_malloc_r>
 800eb36:	b92a      	cbnz	r2, 800eb44 <_realloc_r+0x24>
 800eb38:	f000 f83e 	bl	800ebb8 <_free_r>
 800eb3c:	4625      	mov	r5, r4
 800eb3e:	4628      	mov	r0, r5
 800eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb44:	f000 f884 	bl	800ec50 <_malloc_usable_size_r>
 800eb48:	4284      	cmp	r4, r0
 800eb4a:	4607      	mov	r7, r0
 800eb4c:	d802      	bhi.n	800eb54 <_realloc_r+0x34>
 800eb4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb52:	d812      	bhi.n	800eb7a <_realloc_r+0x5a>
 800eb54:	4621      	mov	r1, r4
 800eb56:	4640      	mov	r0, r8
 800eb58:	f7ff ff6e 	bl	800ea38 <_malloc_r>
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d0ed      	beq.n	800eb3e <_realloc_r+0x1e>
 800eb62:	42bc      	cmp	r4, r7
 800eb64:	4622      	mov	r2, r4
 800eb66:	4631      	mov	r1, r6
 800eb68:	bf28      	it	cs
 800eb6a:	463a      	movcs	r2, r7
 800eb6c:	f7ff fee2 	bl	800e934 <memcpy>
 800eb70:	4631      	mov	r1, r6
 800eb72:	4640      	mov	r0, r8
 800eb74:	f000 f820 	bl	800ebb8 <_free_r>
 800eb78:	e7e1      	b.n	800eb3e <_realloc_r+0x1e>
 800eb7a:	4635      	mov	r5, r6
 800eb7c:	e7df      	b.n	800eb3e <_realloc_r+0x1e>
	...

0800eb80 <_sbrk_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4d06      	ldr	r5, [pc, #24]	; (800eb9c <_sbrk_r+0x1c>)
 800eb84:	2300      	movs	r3, #0
 800eb86:	4604      	mov	r4, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	602b      	str	r3, [r5, #0]
 800eb8c:	f7f6 f8ae 	bl	8004cec <_sbrk>
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	d102      	bne.n	800eb9a <_sbrk_r+0x1a>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	b103      	cbz	r3, 800eb9a <_sbrk_r+0x1a>
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	bd38      	pop	{r3, r4, r5, pc}
 800eb9c:	240010fc 	.word	0x240010fc

0800eba0 <__malloc_lock>:
 800eba0:	4801      	ldr	r0, [pc, #4]	; (800eba8 <__malloc_lock+0x8>)
 800eba2:	f000 b85d 	b.w	800ec60 <__retarget_lock_acquire_recursive>
 800eba6:	bf00      	nop
 800eba8:	24001100 	.word	0x24001100

0800ebac <__malloc_unlock>:
 800ebac:	4801      	ldr	r0, [pc, #4]	; (800ebb4 <__malloc_unlock+0x8>)
 800ebae:	f000 b858 	b.w	800ec62 <__retarget_lock_release_recursive>
 800ebb2:	bf00      	nop
 800ebb4:	24001100 	.word	0x24001100

0800ebb8 <_free_r>:
 800ebb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebba:	2900      	cmp	r1, #0
 800ebbc:	d044      	beq.n	800ec48 <_free_r+0x90>
 800ebbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebc2:	9001      	str	r0, [sp, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f1a1 0404 	sub.w	r4, r1, #4
 800ebca:	bfb8      	it	lt
 800ebcc:	18e4      	addlt	r4, r4, r3
 800ebce:	f7ff ffe7 	bl	800eba0 <__malloc_lock>
 800ebd2:	4a1e      	ldr	r2, [pc, #120]	; (800ec4c <_free_r+0x94>)
 800ebd4:	9801      	ldr	r0, [sp, #4]
 800ebd6:	6813      	ldr	r3, [r2, #0]
 800ebd8:	b933      	cbnz	r3, 800ebe8 <_free_r+0x30>
 800ebda:	6063      	str	r3, [r4, #4]
 800ebdc:	6014      	str	r4, [r2, #0]
 800ebde:	b003      	add	sp, #12
 800ebe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebe4:	f7ff bfe2 	b.w	800ebac <__malloc_unlock>
 800ebe8:	42a3      	cmp	r3, r4
 800ebea:	d908      	bls.n	800ebfe <_free_r+0x46>
 800ebec:	6825      	ldr	r5, [r4, #0]
 800ebee:	1961      	adds	r1, r4, r5
 800ebf0:	428b      	cmp	r3, r1
 800ebf2:	bf01      	itttt	eq
 800ebf4:	6819      	ldreq	r1, [r3, #0]
 800ebf6:	685b      	ldreq	r3, [r3, #4]
 800ebf8:	1949      	addeq	r1, r1, r5
 800ebfa:	6021      	streq	r1, [r4, #0]
 800ebfc:	e7ed      	b.n	800ebda <_free_r+0x22>
 800ebfe:	461a      	mov	r2, r3
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	b10b      	cbz	r3, 800ec08 <_free_r+0x50>
 800ec04:	42a3      	cmp	r3, r4
 800ec06:	d9fa      	bls.n	800ebfe <_free_r+0x46>
 800ec08:	6811      	ldr	r1, [r2, #0]
 800ec0a:	1855      	adds	r5, r2, r1
 800ec0c:	42a5      	cmp	r5, r4
 800ec0e:	d10b      	bne.n	800ec28 <_free_r+0x70>
 800ec10:	6824      	ldr	r4, [r4, #0]
 800ec12:	4421      	add	r1, r4
 800ec14:	1854      	adds	r4, r2, r1
 800ec16:	42a3      	cmp	r3, r4
 800ec18:	6011      	str	r1, [r2, #0]
 800ec1a:	d1e0      	bne.n	800ebde <_free_r+0x26>
 800ec1c:	681c      	ldr	r4, [r3, #0]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	6053      	str	r3, [r2, #4]
 800ec22:	4421      	add	r1, r4
 800ec24:	6011      	str	r1, [r2, #0]
 800ec26:	e7da      	b.n	800ebde <_free_r+0x26>
 800ec28:	d902      	bls.n	800ec30 <_free_r+0x78>
 800ec2a:	230c      	movs	r3, #12
 800ec2c:	6003      	str	r3, [r0, #0]
 800ec2e:	e7d6      	b.n	800ebde <_free_r+0x26>
 800ec30:	6825      	ldr	r5, [r4, #0]
 800ec32:	1961      	adds	r1, r4, r5
 800ec34:	428b      	cmp	r3, r1
 800ec36:	bf04      	itt	eq
 800ec38:	6819      	ldreq	r1, [r3, #0]
 800ec3a:	685b      	ldreq	r3, [r3, #4]
 800ec3c:	6063      	str	r3, [r4, #4]
 800ec3e:	bf04      	itt	eq
 800ec40:	1949      	addeq	r1, r1, r5
 800ec42:	6021      	streq	r1, [r4, #0]
 800ec44:	6054      	str	r4, [r2, #4]
 800ec46:	e7ca      	b.n	800ebde <_free_r+0x26>
 800ec48:	b003      	add	sp, #12
 800ec4a:	bd30      	pop	{r4, r5, pc}
 800ec4c:	240010f4 	.word	0x240010f4

0800ec50 <_malloc_usable_size_r>:
 800ec50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec54:	1f18      	subs	r0, r3, #4
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	bfbc      	itt	lt
 800ec5a:	580b      	ldrlt	r3, [r1, r0]
 800ec5c:	18c0      	addlt	r0, r0, r3
 800ec5e:	4770      	bx	lr

0800ec60 <__retarget_lock_acquire_recursive>:
 800ec60:	4770      	bx	lr

0800ec62 <__retarget_lock_release_recursive>:
 800ec62:	4770      	bx	lr

0800ec64 <_init>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr

0800ec70 <_fini>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	bf00      	nop
 800ec74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec76:	bc08      	pop	{r3}
 800ec78:	469e      	mov	lr, r3
 800ec7a:	4770      	bx	lr
